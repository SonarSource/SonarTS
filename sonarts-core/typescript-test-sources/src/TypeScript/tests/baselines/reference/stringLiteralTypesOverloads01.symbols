=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads01.ts ===
type PrimitiveName = 'string' | 'number' | 'boolean';
>PrimitiveName : Symbol(PrimitiveName, Decl(stringLiteralTypesOverloads01.ts, 0, 0))

function getFalsyPrimitive(x: "string"): string;
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 2, 27))

function getFalsyPrimitive(x: "number"): number;
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 3, 27))

function getFalsyPrimitive(x: "boolean"): boolean;
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 4, 27))

function getFalsyPrimitive(x: "boolean" | "string"): boolean | string;
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 5, 27))

function getFalsyPrimitive(x: "boolean" | "number"): boolean | number;
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 6, 27))

function getFalsyPrimitive(x: "number" | "string"): number | string;
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 7, 27))

function getFalsyPrimitive(x: "number" | "string" | "boolean"): number | string | boolean;
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 8, 27))

function getFalsyPrimitive(x: PrimitiveName): number | string | boolean {
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 9, 27))
>PrimitiveName : Symbol(PrimitiveName, Decl(stringLiteralTypesOverloads01.ts, 0, 0))

    if (x === "string") {
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 9, 27))

        return "";
    }
    if (x === "number") {
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 9, 27))

        return 0;
    }
    if (x === "boolean") {
>x : Symbol(x, Decl(stringLiteralTypesOverloads01.ts, 9, 27))

        return false;
    }

    // Should be unreachable.
    throw "Invalid value";
}

namespace Consts1 {
>Consts1 : Symbol(Consts1, Decl(stringLiteralTypesOverloads01.ts, 22, 1))

    const EMPTY_STRING = getFalsyPrimitive("string");
>EMPTY_STRING : Symbol(EMPTY_STRING, Decl(stringLiteralTypesOverloads01.ts, 25, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))

    const ZERO = getFalsyPrimitive('number');
>ZERO : Symbol(ZERO, Decl(stringLiteralTypesOverloads01.ts, 26, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))

    const FALSE = getFalsyPrimitive("boolean");
>FALSE : Symbol(FALSE, Decl(stringLiteralTypesOverloads01.ts, 27, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
}

const string: "string" = "string"
>string : Symbol(string, Decl(stringLiteralTypesOverloads01.ts, 30, 5))

const number: "number" = "number"
>number : Symbol(number, Decl(stringLiteralTypesOverloads01.ts, 31, 5))

const boolean: "boolean" = "boolean"
>boolean : Symbol(boolean, Decl(stringLiteralTypesOverloads01.ts, 32, 5))

const stringOrNumber = string || number;
>stringOrNumber : Symbol(stringOrNumber, Decl(stringLiteralTypesOverloads01.ts, 34, 5))
>string : Symbol(string, Decl(stringLiteralTypesOverloads01.ts, 30, 5))
>number : Symbol(number, Decl(stringLiteralTypesOverloads01.ts, 31, 5))

const stringOrBoolean = string || boolean;
>stringOrBoolean : Symbol(stringOrBoolean, Decl(stringLiteralTypesOverloads01.ts, 35, 5))
>string : Symbol(string, Decl(stringLiteralTypesOverloads01.ts, 30, 5))
>boolean : Symbol(boolean, Decl(stringLiteralTypesOverloads01.ts, 32, 5))

const booleanOrNumber = number || boolean;
>booleanOrNumber : Symbol(booleanOrNumber, Decl(stringLiteralTypesOverloads01.ts, 36, 5))
>number : Symbol(number, Decl(stringLiteralTypesOverloads01.ts, 31, 5))
>boolean : Symbol(boolean, Decl(stringLiteralTypesOverloads01.ts, 32, 5))

const stringOrBooleanOrNumber = stringOrBoolean || number;
>stringOrBooleanOrNumber : Symbol(stringOrBooleanOrNumber, Decl(stringLiteralTypesOverloads01.ts, 37, 5))
>stringOrBoolean : Symbol(stringOrBoolean, Decl(stringLiteralTypesOverloads01.ts, 35, 5))
>number : Symbol(number, Decl(stringLiteralTypesOverloads01.ts, 31, 5))

namespace Consts2 {
>Consts2 : Symbol(Consts2, Decl(stringLiteralTypesOverloads01.ts, 37, 58))

    const EMPTY_STRING = getFalsyPrimitive(string);
>EMPTY_STRING : Symbol(EMPTY_STRING, Decl(stringLiteralTypesOverloads01.ts, 40, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>string : Symbol(string, Decl(stringLiteralTypesOverloads01.ts, 30, 5))

    const ZERO = getFalsyPrimitive(number);
>ZERO : Symbol(ZERO, Decl(stringLiteralTypesOverloads01.ts, 41, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>number : Symbol(number, Decl(stringLiteralTypesOverloads01.ts, 31, 5))

    const FALSE = getFalsyPrimitive(boolean);
>FALSE : Symbol(FALSE, Decl(stringLiteralTypesOverloads01.ts, 42, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>boolean : Symbol(boolean, Decl(stringLiteralTypesOverloads01.ts, 32, 5))

    const a = getFalsyPrimitive(stringOrNumber);
>a : Symbol(a, Decl(stringLiteralTypesOverloads01.ts, 44, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>stringOrNumber : Symbol(stringOrNumber, Decl(stringLiteralTypesOverloads01.ts, 34, 5))

    const b = getFalsyPrimitive(stringOrBoolean);
>b : Symbol(b, Decl(stringLiteralTypesOverloads01.ts, 45, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>stringOrBoolean : Symbol(stringOrBoolean, Decl(stringLiteralTypesOverloads01.ts, 35, 5))

    const c = getFalsyPrimitive(booleanOrNumber);
>c : Symbol(c, Decl(stringLiteralTypesOverloads01.ts, 46, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>booleanOrNumber : Symbol(booleanOrNumber, Decl(stringLiteralTypesOverloads01.ts, 36, 5))

    const d = getFalsyPrimitive(stringOrBooleanOrNumber);
>d : Symbol(d, Decl(stringLiteralTypesOverloads01.ts, 47, 9))
>getFalsyPrimitive : Symbol(getFalsyPrimitive, Decl(stringLiteralTypesOverloads01.ts, 0, 53), Decl(stringLiteralTypesOverloads01.ts, 2, 48), Decl(stringLiteralTypesOverloads01.ts, 3, 48), Decl(stringLiteralTypesOverloads01.ts, 4, 50), Decl(stringLiteralTypesOverloads01.ts, 5, 70), Decl(stringLiteralTypesOverloads01.ts, 6, 70), Decl(stringLiteralTypesOverloads01.ts, 7, 68), Decl(stringLiteralTypesOverloads01.ts, 8, 90))
>stringOrBooleanOrNumber : Symbol(stringOrBooleanOrNumber, Decl(stringLiteralTypesOverloads01.ts, 37, 5))
}



