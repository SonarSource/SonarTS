=== tests/cases/compiler/genericBaseClassLiteralProperty.ts ===
class BaseClass<T> {
>BaseClass : Symbol(BaseClass, Decl(genericBaseClassLiteralProperty.ts, 0, 0))
>T : Symbol(T, Decl(genericBaseClassLiteralProperty.ts, 0, 16))

    public _getValue1: { (): T; };
>_getValue1 : Symbol(BaseClass._getValue1, Decl(genericBaseClassLiteralProperty.ts, 0, 20))
>T : Symbol(T, Decl(genericBaseClassLiteralProperty.ts, 0, 16))

    public _getValue2: () => T;
>_getValue2 : Symbol(BaseClass._getValue2, Decl(genericBaseClassLiteralProperty.ts, 1, 34))
>T : Symbol(T, Decl(genericBaseClassLiteralProperty.ts, 0, 16))
}

class SubClass extends BaseClass<number> {
>SubClass : Symbol(SubClass, Decl(genericBaseClassLiteralProperty.ts, 3, 1))
>BaseClass : Symbol(BaseClass, Decl(genericBaseClassLiteralProperty.ts, 0, 0))

    public Error(): void {
>Error : Symbol(SubClass.Error, Decl(genericBaseClassLiteralProperty.ts, 5, 42))

        var x : number = this._getValue1();
>x : Symbol(x, Decl(genericBaseClassLiteralProperty.ts, 8, 11))
>this._getValue1 : Symbol(BaseClass._getValue1, Decl(genericBaseClassLiteralProperty.ts, 0, 20))
>this : Symbol(SubClass, Decl(genericBaseClassLiteralProperty.ts, 3, 1))
>_getValue1 : Symbol(BaseClass._getValue1, Decl(genericBaseClassLiteralProperty.ts, 0, 20))

        var y : number = this._getValue2();
>y : Symbol(y, Decl(genericBaseClassLiteralProperty.ts, 9, 11))
>this._getValue2 : Symbol(BaseClass._getValue2, Decl(genericBaseClassLiteralProperty.ts, 1, 34))
>this : Symbol(SubClass, Decl(genericBaseClassLiteralProperty.ts, 3, 1))
>_getValue2 : Symbol(BaseClass._getValue2, Decl(genericBaseClassLiteralProperty.ts, 1, 34))
    }
}
