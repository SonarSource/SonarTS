=== tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraintTransitively2.ts ===
// using a type parameter as a constraint for a type parameter is invalid
// these should be errors at the type parameter constraint declarations, and have no downstream errors

interface A { foo: number }
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 0, 0))
>foo : Symbol(A.foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 3, 13))

interface B extends A { bar: string; }
>B : Symbol(B, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 3, 27))
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 0, 0))
>bar : Symbol(B.bar, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 4, 23))

interface C extends B { baz: boolean; }
>C : Symbol(C, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 4, 38))
>B : Symbol(B, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 3, 27))
>baz : Symbol(C.baz, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 5, 23))

var a: A;
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 6, 3))
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 0, 0))

var b: B;
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 7, 3))
>B : Symbol(B, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 3, 27))

var c: C;
>c : Symbol(c, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 3))
>C : Symbol(C, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 4, 38))

function foo<T, U, V>(x: T, y: U, z: V): V { return z; }
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 9))
>T : Symbol(T, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 13))
>U : Symbol(U, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 15))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 18))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 22))
>T : Symbol(T, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 13))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 27))
>U : Symbol(U, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 15))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 33))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 18))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 18))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 10, 33))

//function foo<T, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }

foo(1, 2, '');
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 9))

foo({ x: 1 }, { x: 1, y: '' }, { x: 2, y: 2, z: true });
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 9))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 14, 5))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 14, 15))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 14, 21))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 14, 32))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 14, 38))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 14, 44))

foo(a, b, a);
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 9))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 6, 3))
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 7, 3))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 6, 3))

foo(a, { foo: 1, bar: '', hm: true }, b);
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 9))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 6, 3))
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 16, 8))
>bar : Symbol(bar, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 16, 16))
>hm : Symbol(hm, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 16, 25))
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 7, 3))

foo((x: number, y: string) => { }, (x, y: boolean) => { }, () => { });
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 9))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 17, 5))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 17, 15))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 17, 36))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 17, 38))

function foo2<T extends A, U extends A, V extends A>(x: T, y: U, z: V): V { return z; }
>foo2 : Symbol(foo2, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 17, 70))
>T : Symbol(T, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 14))
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 0, 0))
>U : Symbol(U, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 26))
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 0, 0))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 39))
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 0, 0))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 53))
>T : Symbol(T, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 14))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 58))
>U : Symbol(U, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 26))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 64))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 39))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 39))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 19, 64))

//function foo2<T extends A, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }
foo(b, a, c);
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 9))
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 7, 3))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 6, 3))
>c : Symbol(c, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 3))

foo(c, c, a);
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 9))
>c : Symbol(c, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 3))
>c : Symbol(c, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 8, 3))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively2.ts, 6, 3))

