=== tests/cases/compiler/typeInferenceFBoundedTypeParams.ts ===
// Example from #6037

function fold<a, r>(values: a[], result: r, fold: (result: r, value: a) => r): r {
>fold : Symbol(fold, Decl(typeInferenceFBoundedTypeParams.ts, 0, 0))
>a : Symbol(a, Decl(typeInferenceFBoundedTypeParams.ts, 2, 14))
>r : Symbol(r, Decl(typeInferenceFBoundedTypeParams.ts, 2, 16))
>values : Symbol(values, Decl(typeInferenceFBoundedTypeParams.ts, 2, 20))
>a : Symbol(a, Decl(typeInferenceFBoundedTypeParams.ts, 2, 14))
>result : Symbol(result, Decl(typeInferenceFBoundedTypeParams.ts, 2, 32))
>r : Symbol(r, Decl(typeInferenceFBoundedTypeParams.ts, 2, 16))
>fold : Symbol(fold, Decl(typeInferenceFBoundedTypeParams.ts, 2, 43))
>result : Symbol(result, Decl(typeInferenceFBoundedTypeParams.ts, 2, 51))
>r : Symbol(r, Decl(typeInferenceFBoundedTypeParams.ts, 2, 16))
>value : Symbol(value, Decl(typeInferenceFBoundedTypeParams.ts, 2, 61))
>a : Symbol(a, Decl(typeInferenceFBoundedTypeParams.ts, 2, 14))
>r : Symbol(r, Decl(typeInferenceFBoundedTypeParams.ts, 2, 16))
>r : Symbol(r, Decl(typeInferenceFBoundedTypeParams.ts, 2, 16))

    for (let value of values) {
>value : Symbol(value, Decl(typeInferenceFBoundedTypeParams.ts, 3, 12))
>values : Symbol(values, Decl(typeInferenceFBoundedTypeParams.ts, 2, 20))

        result = fold(result, value);
>result : Symbol(result, Decl(typeInferenceFBoundedTypeParams.ts, 2, 32))
>fold : Symbol(fold, Decl(typeInferenceFBoundedTypeParams.ts, 2, 43))
>result : Symbol(result, Decl(typeInferenceFBoundedTypeParams.ts, 2, 32))
>value : Symbol(value, Decl(typeInferenceFBoundedTypeParams.ts, 3, 12))
    }
    return result;
>result : Symbol(result, Decl(typeInferenceFBoundedTypeParams.ts, 2, 32))
}

function append<a, b extends a>(values: a[], value: b): a[] {
>append : Symbol(append, Decl(typeInferenceFBoundedTypeParams.ts, 7, 1))
>a : Symbol(a, Decl(typeInferenceFBoundedTypeParams.ts, 9, 16))
>b : Symbol(b, Decl(typeInferenceFBoundedTypeParams.ts, 9, 18))
>a : Symbol(a, Decl(typeInferenceFBoundedTypeParams.ts, 9, 16))
>values : Symbol(values, Decl(typeInferenceFBoundedTypeParams.ts, 9, 32))
>a : Symbol(a, Decl(typeInferenceFBoundedTypeParams.ts, 9, 16))
>value : Symbol(value, Decl(typeInferenceFBoundedTypeParams.ts, 9, 44))
>b : Symbol(b, Decl(typeInferenceFBoundedTypeParams.ts, 9, 18))
>a : Symbol(a, Decl(typeInferenceFBoundedTypeParams.ts, 9, 16))

    values.push(value);
>values.push : Symbol(Array.push, Decl(lib.d.ts, --, --))
>values : Symbol(values, Decl(typeInferenceFBoundedTypeParams.ts, 9, 32))
>push : Symbol(Array.push, Decl(lib.d.ts, --, --))
>value : Symbol(value, Decl(typeInferenceFBoundedTypeParams.ts, 9, 44))

    return values;
>values : Symbol(values, Decl(typeInferenceFBoundedTypeParams.ts, 9, 32))
}

fold(
>fold : Symbol(fold, Decl(typeInferenceFBoundedTypeParams.ts, 0, 0))

    [1, 2, 3],
    [] as [string, string][],
    (result, value) => append(
>result : Symbol(result, Decl(typeInferenceFBoundedTypeParams.ts, 17, 5))
>value : Symbol(value, Decl(typeInferenceFBoundedTypeParams.ts, 17, 12))
>append : Symbol(append, Decl(typeInferenceFBoundedTypeParams.ts, 7, 1))

        result,
>result : Symbol(result, Decl(typeInferenceFBoundedTypeParams.ts, 17, 5))

        ["", ""]
    )
);

