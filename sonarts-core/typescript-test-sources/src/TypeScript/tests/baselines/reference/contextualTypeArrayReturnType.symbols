=== tests/cases/compiler/contextualTypeArrayReturnType.ts ===
interface IBookStyle {
>IBookStyle : Symbol(IBookStyle, Decl(contextualTypeArrayReturnType.ts, 0, 0))

    initialLeftPageTransforms?: (width: number) => NamedTransform[];
>initialLeftPageTransforms : Symbol(IBookStyle.initialLeftPageTransforms, Decl(contextualTypeArrayReturnType.ts, 0, 22))
>width : Symbol(width, Decl(contextualTypeArrayReturnType.ts, 1, 33))
>NamedTransform : Symbol(NamedTransform, Decl(contextualTypeArrayReturnType.ts, 2, 1))
}

interface NamedTransform {
>NamedTransform : Symbol(NamedTransform, Decl(contextualTypeArrayReturnType.ts, 2, 1))

    [name: string]: Transform3D;
>name : Symbol(name, Decl(contextualTypeArrayReturnType.ts, 5, 5))
>Transform3D : Symbol(Transform3D, Decl(contextualTypeArrayReturnType.ts, 6, 1))
}

interface Transform3D {
>Transform3D : Symbol(Transform3D, Decl(contextualTypeArrayReturnType.ts, 6, 1))

    cachedCss: string;
>cachedCss : Symbol(Transform3D.cachedCss, Decl(contextualTypeArrayReturnType.ts, 8, 23))
}

var style: IBookStyle = {
>style : Symbol(style, Decl(contextualTypeArrayReturnType.ts, 12, 3))
>IBookStyle : Symbol(IBookStyle, Decl(contextualTypeArrayReturnType.ts, 0, 0))

    initialLeftPageTransforms: (width: number) => {
>initialLeftPageTransforms : Symbol(initialLeftPageTransforms, Decl(contextualTypeArrayReturnType.ts, 12, 25))
>width : Symbol(width, Decl(contextualTypeArrayReturnType.ts, 13, 32))

        return [
            {'ry': null }
        ];
    }
}

