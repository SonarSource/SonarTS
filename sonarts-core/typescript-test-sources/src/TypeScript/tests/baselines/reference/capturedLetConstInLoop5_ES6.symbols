=== tests/cases/compiler/capturedLetConstInLoop5_ES6.ts ===

declare function use(a: any);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>a : Symbol(a, Decl(capturedLetConstInLoop5_ES6.ts, 1, 21))

//====let
function foo0(x) {
>foo0 : Symbol(foo0, Decl(capturedLetConstInLoop5_ES6.ts, 1, 29))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 4, 14))

    for (let x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 5, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 6, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 5, 12))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 5, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 6, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 5, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 6, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 5, 12))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 6, 11))
}

function foo00(x) {
>foo00 : Symbol(foo00, Decl(capturedLetConstInLoop5_ES6.ts, 15, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 17, 15))

    for (let x in []) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 18, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 19, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 18, 12))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 18, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 19, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 18, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 19, 11))

        if (x == "1") {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 18, 12))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 19, 11))
}

function foo1(x) {
>foo1 : Symbol(foo1, Decl(capturedLetConstInLoop5_ES6.ts, 28, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 30, 14))

    for (let x = 0; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 31, 12))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 31, 12))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 31, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 32, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 31, 12))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 31, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 32, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 31, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 32, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 31, 12))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 32, 11))
}

function foo2(x) {
>foo2 : Symbol(foo2, Decl(capturedLetConstInLoop5_ES6.ts, 41, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 43, 14))

    while (1 === 1) {
        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 45, 11))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 46, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 45, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 45, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 46, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 45, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 46, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 45, 11))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 46, 11))
}

function foo3(x) {
>foo3 : Symbol(foo3, Decl(capturedLetConstInLoop5_ES6.ts, 55, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 57, 14))

    do {
        let x;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 59, 11))

        var v;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 60, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 59, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 60, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 59, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 60, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 59, 11))

            return;
        }
    } while (1 === 1)
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 60, 11))
}

function foo4(x) {
>foo4 : Symbol(foo4, Decl(capturedLetConstInLoop5_ES6.ts, 69, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 71, 14))

    for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 72, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 72, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 72, 12))

        var v = y;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 73, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 72, 12))

        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 74, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 74, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 73, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 74, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 73, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 74, 11))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 73, 11))
}

function foo5(x) {
>foo5 : Symbol(foo5, Decl(capturedLetConstInLoop5_ES6.ts, 83, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 85, 14))

    for (let x = 0, y = 1; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 86, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 86, 19))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 86, 12))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 86, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 87, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 86, 12))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 86, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 86, 19))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 87, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 86, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 86, 19))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 87, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 86, 12))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 87, 11))
}


function foo6(x) {
>foo6 : Symbol(foo6, Decl(capturedLetConstInLoop5_ES6.ts, 96, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 99, 14))

    while (1 === 1) {
        let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 101, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 101, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 102, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 101, 11))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 101, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 101, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 102, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 101, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 101, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 102, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 101, 11))

            return;
        }
    };
    
    use(v)
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 102, 11))
}

function foo7(x) {
>foo7 : Symbol(foo7, Decl(capturedLetConstInLoop5_ES6.ts, 111, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 113, 14))

    do {
        let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 115, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 115, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 116, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 115, 11))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 115, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 115, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 116, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 115, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 115, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 116, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 115, 11))

            return;
        }
    } while (1 === 1);
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 116, 11))
}


function foo8(x) {
>foo8 : Symbol(foo8, Decl(capturedLetConstInLoop5_ES6.ts, 125, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 128, 14))

    for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 129, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 129, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 129, 12))

        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 130, 11))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 131, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 130, 11))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 130, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 129, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 131, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 130, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 129, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 131, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 130, 11))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 131, 11))
}

//====const
function foo0_c(x) {
>foo0_c : Symbol(foo0_c, Decl(capturedLetConstInLoop5_ES6.ts, 140, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 143, 16))

    for (const x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 144, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 145, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 144, 14))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 144, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 145, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 144, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 145, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 144, 14))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 145, 11))
}

function foo00_c(x) {
>foo00_c : Symbol(foo00_c, Decl(capturedLetConstInLoop5_ES6.ts, 154, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 156, 17))

    for (const x in []) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 157, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 158, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 157, 14))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 157, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 158, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 157, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 158, 11))

        if (x == "1") {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 157, 14))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 158, 11))
}

function foo1_c(x) {
>foo1_c : Symbol(foo1_c, Decl(capturedLetConstInLoop5_ES6.ts, 167, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 169, 16))

    for (const x = 0; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 170, 14))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 170, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 171, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 170, 14))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 170, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 171, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 170, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 171, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 170, 14))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 171, 11))
}

function foo2_c(x) {
>foo2_c : Symbol(foo2_c, Decl(capturedLetConstInLoop5_ES6.ts, 180, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 182, 16))

    while (1 === 1) {
        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 184, 13))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 185, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 184, 13))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 184, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 185, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 184, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 185, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 184, 13))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 185, 11))
}

function foo3_c(x) {
>foo3_c : Symbol(foo3_c, Decl(capturedLetConstInLoop5_ES6.ts, 194, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 196, 16))

    do {
        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 198, 13))

        var v;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 199, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 198, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 199, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 198, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 199, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 198, 13))

            return;
        }
    } while (1 === 1)
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 199, 11))
}

function foo4_c(x) {
>foo4_c : Symbol(foo4_c, Decl(capturedLetConstInLoop5_ES6.ts, 208, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 210, 16))

    for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 211, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 211, 14))

        var v = y;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 212, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 211, 14))

        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 213, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 213, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 212, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 213, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 212, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 213, 11))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 212, 11))
}

function foo5_c(x) {
>foo5_c : Symbol(foo5_c, Decl(capturedLetConstInLoop5_ES6.ts, 222, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 224, 16))

    for (const x = 0, y = 1; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 225, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 225, 21))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 225, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 226, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 225, 14))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 225, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 225, 21))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 226, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 225, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 225, 21))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 226, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 225, 14))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 226, 11))
}


function foo6_c(x) {
>foo6_c : Symbol(foo6_c, Decl(capturedLetConstInLoop5_ES6.ts, 235, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 238, 16))

    while (1 === 1) {
        const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 240, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 240, 20))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 241, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 240, 13))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 240, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 240, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 241, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 240, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 240, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 241, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 240, 13))

            return;
        }
    }
    
    use(v)
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 241, 11))
}

function foo7_c(x) {
>foo7_c : Symbol(foo7_c, Decl(capturedLetConstInLoop5_ES6.ts, 250, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 252, 16))

    do {
        const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 254, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 254, 20))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 255, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 254, 13))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 254, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 254, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 255, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 254, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 254, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 255, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 254, 13))

            return;
        }
    } while (1 === 1)
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 255, 11))
}


function foo8_c(x) {
>foo8_c : Symbol(foo8_c, Decl(capturedLetConstInLoop5_ES6.ts, 264, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 267, 16))

    for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 268, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 268, 14))

        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 269, 13))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 270, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 269, 13))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 269, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 268, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 270, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 269, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5_ES6.ts, 268, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 270, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5_ES6.ts, 269, 13))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5_ES6.ts, 270, 11))
}
