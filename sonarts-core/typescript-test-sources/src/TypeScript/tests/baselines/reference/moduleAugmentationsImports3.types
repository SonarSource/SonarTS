=== tests/cases/compiler/main.ts ===
/// <reference path="d.d.ts"/>
import {A} from "./a";
>A : typeof A

import "D";
import "e";

let a: A;
>a : A
>A : A

let b = a.getB().x.toFixed();
>b : string
>a.getB().x.toFixed() : string
>a.getB().x.toFixed : (fractionDigits?: number) => string
>a.getB().x : number
>a.getB() : B
>a.getB : () => B
>a : A
>getB : () => B
>x : number
>toFixed : (fractionDigits?: number) => string

let c = a.getCls().y.toLowerCase();
>c : string
>a.getCls().y.toLowerCase() : string
>a.getCls().y.toLowerCase : () => string
>a.getCls().y : string
>a.getCls() : Cls
>a.getCls : () => Cls
>a : A
>getCls : () => Cls
>y : string
>toLowerCase : () => string

=== tests/cases/compiler/a.ts ===
export class A {}
>A : A

=== tests/cases/compiler/b.ts ===
export class B {x: number;}
>B : B
>x : number

=== tests/cases/compiler/c.d.ts ===
declare module "C" {
    class Cls {y: string; }
>Cls : Cls
>y : string
}

=== tests/cases/compiler/d.d.ts ===
declare module "D" {
    import {A} from "a";
>A : typeof A

    import {B} from "b";
>B : typeof B

    module "a" {
        interface A {
>A : A

            getB(): B;
>getB : () => B
>B : B
        }
    }
}

=== tests/cases/compiler/e.ts ===
/// <reference path="c.d.ts"/>
import {A} from "./a";
>A : typeof A

import {Cls} from "C";
>Cls : typeof Cls

A.prototype.getCls = function () { return undefined; }
>A.prototype.getCls = function () { return undefined; } : () => any
>A.prototype.getCls : () => Cls
>A.prototype : A
>A : typeof A
>prototype : A
>getCls : () => Cls
>function () { return undefined; } : () => any
>undefined : undefined

declare module "./a" {
    interface A {
>A : A

        getCls(): Cls;
>getCls : () => Cls
>Cls : Cls
    }
}

