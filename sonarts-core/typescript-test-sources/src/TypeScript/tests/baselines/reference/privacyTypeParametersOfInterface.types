=== tests/cases/compiler/privacyTypeParametersOfInterface.ts ===
class privateClass {
>privateClass : privateClass
}

export class publicClass {
>publicClass : publicClass
}

class privateClassT<T> {
>privateClassT : privateClassT<T>
>T : T
}

export class publicClassT<T> {
>publicClassT : publicClassT<T>
>T : T
}

// TypeParameter_0_of_exported_interface_1_has_or_is_using_private_type_2
export interface publicInterfaceWithPrivateTypeParameters<T extends privateClass> {
>publicInterfaceWithPrivateTypeParameters : publicInterfaceWithPrivateTypeParameters<T>
>T : T
>privateClass : privateClass

    myMethod(val: T): T; // Error
>myMethod : (val: T) => T
>val : T
>T : T
>T : T

    myMethod0(): publicClassT<T>; // error
>myMethod0 : () => publicClassT<T>
>publicClassT : publicClassT<T>
>T : T

    myMethod1(): privateClassT<privateClass>; // error
>myMethod1 : () => privateClassT<privateClass>
>privateClassT : privateClassT<T>
>privateClass : privateClass

    myMethod2(): privateClassT<publicClass>; // error
>myMethod2 : () => privateClassT<publicClass>
>privateClassT : privateClassT<T>
>publicClass : publicClass

    myMethod3(): publicClassT<privateClass>; //error
>myMethod3 : () => publicClassT<privateClass>
>publicClassT : publicClassT<T>
>privateClass : privateClass

    myMethod4(): publicClassT<publicClass>; // no error
>myMethod4 : () => publicClassT<publicClass>
>publicClassT : publicClassT<T>
>publicClass : publicClass
}

export interface publicInterfaceWithPublicTypeParameters<T extends publicClass> {
>publicInterfaceWithPublicTypeParameters : publicInterfaceWithPublicTypeParameters<T>
>T : T
>publicClass : publicClass

    myMethod(val: T): T; // No Error
>myMethod : (val: T) => T
>val : T
>T : T
>T : T

    myMethod0(): publicClassT<T>; // No error
>myMethod0 : () => publicClassT<T>
>publicClassT : publicClassT<T>
>T : T

    myMethod1(): privateClassT<privateClass>; // error
>myMethod1 : () => privateClassT<privateClass>
>privateClassT : privateClassT<T>
>privateClass : privateClass

    myMethod2(): privateClassT<publicClass>; // error
>myMethod2 : () => privateClassT<publicClass>
>privateClassT : privateClassT<T>
>publicClass : publicClass

    myMethod3(): publicClassT<privateClass>; //error
>myMethod3 : () => publicClassT<privateClass>
>publicClassT : publicClassT<T>
>privateClass : privateClass

    myMethod4(): publicClassT<publicClass>; // no error
>myMethod4 : () => publicClassT<publicClass>
>publicClassT : publicClassT<T>
>publicClass : publicClass
}

interface privateInterfaceWithPrivateTypeParameters<T extends privateClass> {
>privateInterfaceWithPrivateTypeParameters : privateInterfaceWithPrivateTypeParameters<T>
>T : T
>privateClass : privateClass

    myMethod(val: T): T; // No Error
>myMethod : (val: T) => T
>val : T
>T : T
>T : T

    myMethod0(): publicClassT<T>; // No error
>myMethod0 : () => publicClassT<T>
>publicClassT : publicClassT<T>
>T : T

    myMethod1(): privateClassT<privateClass>; // No error
>myMethod1 : () => privateClassT<privateClass>
>privateClassT : privateClassT<T>
>privateClass : privateClass

    myMethod2(): privateClassT<publicClass>; // No error
>myMethod2 : () => privateClassT<publicClass>
>privateClassT : privateClassT<T>
>publicClass : publicClass

    myMethod3(): publicClassT<privateClass>; //No error
>myMethod3 : () => publicClassT<privateClass>
>publicClassT : publicClassT<T>
>privateClass : privateClass

    myMethod4(): publicClassT<publicClass>; // no error
>myMethod4 : () => publicClassT<publicClass>
>publicClassT : publicClassT<T>
>publicClass : publicClass
}

interface privateInterfaceWithPublicTypeParameters<T extends publicClass> {
>privateInterfaceWithPublicTypeParameters : privateInterfaceWithPublicTypeParameters<T>
>T : T
>publicClass : publicClass

    myMethod(val: T): T; // No Error
>myMethod : (val: T) => T
>val : T
>T : T
>T : T

    myMethod0(): publicClassT<T>; // No error
>myMethod0 : () => publicClassT<T>
>publicClassT : publicClassT<T>
>T : T

    myMethod1(): privateClassT<privateClass>; // No error
>myMethod1 : () => privateClassT<privateClass>
>privateClassT : privateClassT<T>
>privateClass : privateClass

    myMethod2(): privateClassT<publicClass>; // No error
>myMethod2 : () => privateClassT<publicClass>
>privateClassT : privateClassT<T>
>publicClass : publicClass

    myMethod3(): publicClassT<privateClass>; //No error
>myMethod3 : () => publicClassT<privateClass>
>publicClassT : publicClassT<T>
>privateClass : privateClass

    myMethod4(): publicClassT<publicClass>; // no error
>myMethod4 : () => publicClassT<publicClass>
>publicClassT : publicClassT<T>
>publicClass : publicClass
}

export interface publicInterfaceWithPublicTypeParametersWithoutExtends<T> {
>publicInterfaceWithPublicTypeParametersWithoutExtends : publicInterfaceWithPublicTypeParametersWithoutExtends<T>
>T : T

    myMethod(val: T): T; // No Error
>myMethod : (val: T) => T
>val : T
>T : T
>T : T

    myMethod0(): publicClassT<T>; // No error
>myMethod0 : () => publicClassT<T>
>publicClassT : publicClassT<T>
>T : T
}

interface privateInterfaceWithPublicTypeParametersWithoutExtends<T> {
>privateInterfaceWithPublicTypeParametersWithoutExtends : privateInterfaceWithPublicTypeParametersWithoutExtends<T>
>T : T

    myMethod(val: T): T; // No Error
>myMethod : (val: T) => T
>val : T
>T : T
>T : T

    myMethod0(): publicClassT<T>; // No error
>myMethod0 : () => publicClassT<T>
>publicClassT : publicClassT<T>
>T : T
}
