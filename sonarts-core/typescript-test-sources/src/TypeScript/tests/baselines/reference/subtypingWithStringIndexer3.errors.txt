tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer3.ts(11,7): error TS2415: Class 'B' incorrectly extends base class 'A'.
  Index signatures are incompatible.
    Type 'Base' is not assignable to type 'Derived'.
      Property 'bar' is missing in type 'Base'.
tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer3.ts(24,23): error TS2344: Type 'Base' does not satisfy the constraint 'Derived'.
tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer3.ts(32,11): error TS2415: Class 'B3<T>' incorrectly extends base class 'A<T>'.
  Index signatures are incompatible.
    Type 'Base' is not assignable to type 'T'.
tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer3.ts(36,11): error TS2415: Class 'B4<T>' incorrectly extends base class 'A<T>'.
  Index signatures are incompatible.
    Type 'Derived' is not assignable to type 'T'.
tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer3.ts(40,11): error TS2415: Class 'B5<T>' incorrectly extends base class 'A<T>'.
  Index signatures are incompatible.
    Type 'Derived2' is not assignable to type 'T'.


==== tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer3.ts (5 errors) ====
    // Derived type indexer must be subtype of base type indexer
    
    interface Base { foo: string; }
    interface Derived extends Base { bar: string; }
    interface Derived2 extends Derived { baz: string; }
    
    class A {
        [x: string]: Derived;
    }
    
    class B extends A {
          ~
!!! error TS2415: Class 'B' incorrectly extends base class 'A'.
!!! error TS2415:   Index signatures are incompatible.
!!! error TS2415:     Type 'Base' is not assignable to type 'Derived'.
!!! error TS2415:       Property 'bar' is missing in type 'Base'.
        [x: string]: Base; // error
    }
    
    class B2 extends A {
        [x: string]: Derived2; // ok
    }
    
    module Generics {
        class A<T extends Derived> {
            [x: string]: T;
        }
    
        class B extends A<Base> {
                          ~~~~
!!! error TS2344: Type 'Base' does not satisfy the constraint 'Derived'.
            [x: string]: Derived; // error
        }
    
        class B2 extends A<Derived> {
            [x: string]: Derived2; // ok
        }
    
        class B3<T extends Derived> extends A<T> {
              ~~
!!! error TS2415: Class 'B3<T>' incorrectly extends base class 'A<T>'.
!!! error TS2415:   Index signatures are incompatible.
!!! error TS2415:     Type 'Base' is not assignable to type 'T'.
            [x: string]: Base; // error
        }
    
        class B4<T extends Derived> extends A<T> {
              ~~
!!! error TS2415: Class 'B4<T>' incorrectly extends base class 'A<T>'.
!!! error TS2415:   Index signatures are incompatible.
!!! error TS2415:     Type 'Derived' is not assignable to type 'T'.
            [x: string]: Derived; // error
        }
    
        class B5<T extends Derived2> extends A<T> {
              ~~
!!! error TS2415: Class 'B5<T>' incorrectly extends base class 'A<T>'.
!!! error TS2415:   Index signatures are incompatible.
!!! error TS2415:     Type 'Derived2' is not assignable to type 'T'.
            [x: string]: Derived2; // error
        }
    }