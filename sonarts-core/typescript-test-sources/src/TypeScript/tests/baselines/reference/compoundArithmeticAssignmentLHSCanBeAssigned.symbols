=== tests/cases/conformance/expressions/assignmentOperator/compoundArithmeticAssignmentLHSCanBeAssigned.ts ===
enum E { a, b, c }
>E : Symbol(E, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 0, 0))
>a : Symbol(E.a, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 0, 8))
>b : Symbol(E.b, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 0, 11))
>c : Symbol(E.c, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 0, 14))

var a: any;
>a : Symbol(a, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 2, 3))

var b: number;
>b : Symbol(b, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 3, 3))

var c: E;
>c : Symbol(c, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 4, 3))
>E : Symbol(E, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 0, 0))

var x1: any;
>x1 : Symbol(x1, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 6, 3))

x1 *= a;
>x1 : Symbol(x1, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 6, 3))
>a : Symbol(a, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 2, 3))

x1 *= b;
>x1 : Symbol(x1, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 6, 3))
>b : Symbol(b, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 3, 3))

x1 *= c;
>x1 : Symbol(x1, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 6, 3))
>c : Symbol(c, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 4, 3))

x1 *= null;
>x1 : Symbol(x1, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 6, 3))

x1 *= undefined;
>x1 : Symbol(x1, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 6, 3))
>undefined : Symbol(undefined)

var x2: number;
>x2 : Symbol(x2, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 13, 3))

x2 *= a;
>x2 : Symbol(x2, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 13, 3))
>a : Symbol(a, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 2, 3))

x2 *= b;
>x2 : Symbol(x2, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 13, 3))
>b : Symbol(b, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 3, 3))

x2 *= c;
>x2 : Symbol(x2, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 13, 3))
>c : Symbol(c, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 4, 3))

x2 *= null;
>x2 : Symbol(x2, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 13, 3))

x2 *= undefined;
>x2 : Symbol(x2, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 13, 3))
>undefined : Symbol(undefined)

var x3: E;
>x3 : Symbol(x3, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 20, 3))
>E : Symbol(E, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 0, 0))

x3 *= a;
>x3 : Symbol(x3, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 20, 3))
>a : Symbol(a, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 2, 3))

x3 *= b;
>x3 : Symbol(x3, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 20, 3))
>b : Symbol(b, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 3, 3))

x3 *= c;
>x3 : Symbol(x3, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 20, 3))
>c : Symbol(c, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 4, 3))

x3 *= null;
>x3 : Symbol(x3, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 20, 3))

x3 *= undefined;
>x3 : Symbol(x3, Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts, 20, 3))
>undefined : Symbol(undefined)

