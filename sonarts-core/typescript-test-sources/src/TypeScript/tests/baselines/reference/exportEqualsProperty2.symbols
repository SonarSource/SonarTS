=== tests/cases/compiler/b.ts ===
import B = require("./a");
>B : Symbol(B, Decl(b.ts, 0, 0))

const x: B = { c: B };
>x : Symbol(x, Decl(b.ts, 1, 5))
>B : Symbol(B, Decl(b.ts, 0, 0))
>c : Symbol(c, Decl(b.ts, 1, 14))
>B : Symbol(B, Decl(b.ts, 0, 0))

=== tests/cases/compiler/a.ts ===
// This test is just like exportDefaultProperty2, but with `export =`.

class C {
>C : Symbol(C, Decl(a.ts, 0, 0), Decl(a.ts, 4, 1))

    static B: number;
>B : Symbol(C.B, Decl(a.ts, 2, 9), Decl(a.ts, 5, 13))
}
namespace C {
>C : Symbol(C, Decl(a.ts, 0, 0), Decl(a.ts, 4, 1))

    export interface B { c: number }
>B : Symbol(B, Decl(a.ts, 2, 9), Decl(a.ts, 5, 13))
>c : Symbol(B.c, Decl(a.ts, 6, 24))
}

export = C.B;
>C.B : Symbol(C.B, Decl(a.ts, 2, 9), Decl(a.ts, 5, 13))
>C : Symbol(C, Decl(a.ts, 0, 0), Decl(a.ts, 4, 1))
>B : Symbol(C.B, Decl(a.ts, 2, 9), Decl(a.ts, 5, 13))

