=== tests/cases/conformance/types/primitives/boolean/extendBooleanInterface.ts ===
interface Boolean {
>Boolean : Symbol(Boolean, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(extendBooleanInterface.ts, 0, 0))

    doStuff(): string;
>doStuff : Symbol(Boolean.doStuff, Decl(extendBooleanInterface.ts, 0, 19))

    doOtherStuff<T>(x: T): T;
>doOtherStuff : Symbol(Boolean.doOtherStuff, Decl(extendBooleanInterface.ts, 1, 22))
>T : Symbol(T, Decl(extendBooleanInterface.ts, 2, 17))
>x : Symbol(x, Decl(extendBooleanInterface.ts, 2, 20))
>T : Symbol(T, Decl(extendBooleanInterface.ts, 2, 17))
>T : Symbol(T, Decl(extendBooleanInterface.ts, 2, 17))
}

var x = true;
>x : Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))

var a: string = x.doStuff();
>a : Symbol(a, Decl(extendBooleanInterface.ts, 6, 3))
>x.doStuff : Symbol(Boolean.doStuff, Decl(extendBooleanInterface.ts, 0, 19))
>x : Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))
>doStuff : Symbol(Boolean.doStuff, Decl(extendBooleanInterface.ts, 0, 19))

var b: string = x.doOtherStuff('hm');
>b : Symbol(b, Decl(extendBooleanInterface.ts, 7, 3))
>x.doOtherStuff : Symbol(Boolean.doOtherStuff, Decl(extendBooleanInterface.ts, 1, 22))
>x : Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))
>doOtherStuff : Symbol(Boolean.doOtherStuff, Decl(extendBooleanInterface.ts, 1, 22))

var c: string = x['doStuff']();
>c : Symbol(c, Decl(extendBooleanInterface.ts, 8, 3))
>x : Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))
>'doStuff' : Symbol(Boolean.doStuff, Decl(extendBooleanInterface.ts, 0, 19))

var d: string = x['doOtherStuff']('hm');
>d : Symbol(d, Decl(extendBooleanInterface.ts, 9, 3))
>x : Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))
>'doOtherStuff' : Symbol(Boolean.doOtherStuff, Decl(extendBooleanInterface.ts, 1, 22))

