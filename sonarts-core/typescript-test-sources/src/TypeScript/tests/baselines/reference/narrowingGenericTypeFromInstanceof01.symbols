=== tests/cases/conformance/types/typeRelationships/instanceOf/narrowingGenericTypeFromInstanceof01.ts ===
class A<T> {
>A : Symbol(A, Decl(narrowingGenericTypeFromInstanceof01.ts, 0, 0))
>T : Symbol(T, Decl(narrowingGenericTypeFromInstanceof01.ts, 0, 8))

    constructor(private a: string) { }
>a : Symbol(A.a, Decl(narrowingGenericTypeFromInstanceof01.ts, 1, 16))
}

class B<T> {
>B : Symbol(B, Decl(narrowingGenericTypeFromInstanceof01.ts, 2, 1))
>T : Symbol(T, Decl(narrowingGenericTypeFromInstanceof01.ts, 4, 8))
}

function acceptA<T>(a: A<T>) { }
>acceptA : Symbol(acceptA, Decl(narrowingGenericTypeFromInstanceof01.ts, 5, 1))
>T : Symbol(T, Decl(narrowingGenericTypeFromInstanceof01.ts, 7, 17))
>a : Symbol(a, Decl(narrowingGenericTypeFromInstanceof01.ts, 7, 20))
>A : Symbol(A, Decl(narrowingGenericTypeFromInstanceof01.ts, 0, 0))
>T : Symbol(T, Decl(narrowingGenericTypeFromInstanceof01.ts, 7, 17))

function acceptB<T>(b: B<T>) { }
>acceptB : Symbol(acceptB, Decl(narrowingGenericTypeFromInstanceof01.ts, 7, 32))
>T : Symbol(T, Decl(narrowingGenericTypeFromInstanceof01.ts, 8, 17))
>b : Symbol(b, Decl(narrowingGenericTypeFromInstanceof01.ts, 8, 20))
>B : Symbol(B, Decl(narrowingGenericTypeFromInstanceof01.ts, 2, 1))
>T : Symbol(T, Decl(narrowingGenericTypeFromInstanceof01.ts, 8, 17))

function test<T>(x: A<T> | B<T>) {
>test : Symbol(test, Decl(narrowingGenericTypeFromInstanceof01.ts, 8, 32))
>T : Symbol(T, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 14))
>x : Symbol(x, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 17))
>A : Symbol(A, Decl(narrowingGenericTypeFromInstanceof01.ts, 0, 0))
>T : Symbol(T, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 14))
>B : Symbol(B, Decl(narrowingGenericTypeFromInstanceof01.ts, 2, 1))
>T : Symbol(T, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 14))

    if (x instanceof B) {
>x : Symbol(x, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 17))
>B : Symbol(B, Decl(narrowingGenericTypeFromInstanceof01.ts, 2, 1))

        acceptA(x);
>acceptA : Symbol(acceptA, Decl(narrowingGenericTypeFromInstanceof01.ts, 5, 1))
>x : Symbol(x, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 17))
    }

    if (x instanceof A) {
>x : Symbol(x, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 17))
>A : Symbol(A, Decl(narrowingGenericTypeFromInstanceof01.ts, 0, 0))

        acceptA(x);
>acceptA : Symbol(acceptA, Decl(narrowingGenericTypeFromInstanceof01.ts, 5, 1))
>x : Symbol(x, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 17))
    }

    if (x instanceof B) {
>x : Symbol(x, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 17))
>B : Symbol(B, Decl(narrowingGenericTypeFromInstanceof01.ts, 2, 1))

        acceptB(x);
>acceptB : Symbol(acceptB, Decl(narrowingGenericTypeFromInstanceof01.ts, 7, 32))
>x : Symbol(x, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 17))
    }

    if (x instanceof B) {
>x : Symbol(x, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 17))
>B : Symbol(B, Decl(narrowingGenericTypeFromInstanceof01.ts, 2, 1))

        acceptB(x);
>acceptB : Symbol(acceptB, Decl(narrowingGenericTypeFromInstanceof01.ts, 7, 32))
>x : Symbol(x, Decl(narrowingGenericTypeFromInstanceof01.ts, 10, 17))
    }
}
