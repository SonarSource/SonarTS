=== tests/cases/compiler/capturedLetConstInLoop6.ts ===
// ====let
for (let x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 1, 8))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 1, 8))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 1, 8))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 1, 8))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 1, 8))

        continue;
    }
}

for (let x in []) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 12, 8))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 12, 8))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 12, 8))

    if (x == "1") {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 12, 8))

        break;
    }
    if (x == "2") {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 12, 8))

        continue;
    }
}


for (let x = 0; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 24, 8))
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 24, 8))
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 24, 8))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 24, 8))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 24, 8))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 24, 8))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 24, 8))

        continue;
    }
}

while (1 === 1) {
    let x;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 36, 7))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 36, 7))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 36, 7))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 36, 7))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 36, 7))

        continue;
    }
}

do {
    let x;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 48, 7))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 48, 7))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 48, 7))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 48, 7))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 48, 7))

        continue;
    }
} while (1 === 1)

for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 59, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 59, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 59, 8))

    let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 60, 7))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 60, 7))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 60, 7))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 60, 7))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 60, 7))

        continue;
    }
}

for (let x = 0, y = 1; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 71, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 71, 15))
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 71, 8))
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 71, 8))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 71, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 71, 15))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 71, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 71, 15))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 71, 8))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 71, 8))

        continue;
    }
}

while (1 === 1) {
    let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 83, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 83, 10))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 83, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 83, 10))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 83, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 83, 10))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 83, 7))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 83, 7))

        continue;
    }
}

do {
    let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 95, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 95, 10))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 95, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 95, 10))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 95, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 95, 10))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 95, 7))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 95, 7))

        continue;
    }
} while (1 === 1)

for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 106, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 106, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 106, 8))

    let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 107, 7))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 107, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 106, 8))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 107, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 106, 8))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 107, 7))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 107, 7))

        continue;
    }
}

// ====const

for (const x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 120, 10))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 120, 10))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 120, 10))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 120, 10))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 120, 10))

        continue;
    }
}

for (const x in []) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 131, 10))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 131, 10))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 131, 10))

    if (x == "1") {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 131, 10))

        break;
    }
    if (x == "2") {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 131, 10))

        continue;
    }
}


for (const x = 0; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 143, 10))
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 143, 10))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 143, 10))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 143, 10))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 143, 10))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 143, 10))

        continue;
    }
}

while (1 === 1) {
    const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 155, 9))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 155, 9))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 155, 9))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 155, 9))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 155, 9))

        continue;
    }
}

do {
    const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 167, 9))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 167, 9))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 167, 9))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 167, 9))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 167, 9))

        continue;
    }
} while (1 === 1)

for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 178, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 178, 10))

    const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 179, 9))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 179, 9))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 179, 9))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 179, 9))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 179, 9))

        continue;
    }
}

for (const x = 0, y = 1; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 190, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 190, 17))
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 190, 10))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 190, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 190, 17))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 190, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 190, 17))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 190, 10))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 190, 10))

        continue;
    }
}

while (1 === 1) {
    const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 202, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 202, 16))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 202, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 202, 16))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 202, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 202, 16))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 202, 9))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 202, 9))

        continue;
    }
}

do {
    const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 214, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 214, 16))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 214, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 214, 16))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 214, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 214, 16))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 214, 9))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 214, 9))

        continue;
    }
} while (1 === 1)

for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 225, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 225, 10))

    const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 226, 9))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 226, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 225, 10))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 226, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop6.ts, 225, 10))

    if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 226, 9))

        break;
    }
    if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop6.ts, 226, 9))

        continue;
    }
}


