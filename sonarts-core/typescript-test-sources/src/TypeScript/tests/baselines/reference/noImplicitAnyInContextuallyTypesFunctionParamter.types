=== tests/cases/compiler/noImplicitAnyInContextuallyTypesFunctionParamter.ts ===
var regexMatchList = ['', ''];
>regexMatchList : string[]
>['', ''] : string[]
>'' : ""
>'' : ""

regexMatchList.forEach(match => ''.replace(match, ''));
>regexMatchList.forEach(match => ''.replace(match, '')) : void
>regexMatchList.forEach : { (callbackfn: (this: void, value: string, index: number, array: string[]) => void): void; (callbackfn: (this: void, value: string, index: number, array: string[]) => void, thisArg: undefined): void; <Z>(callbackfn: (this: Z, value: string, index: number, array: string[]) => void, thisArg: Z): void; }
>regexMatchList : string[]
>forEach : { (callbackfn: (this: void, value: string, index: number, array: string[]) => void): void; (callbackfn: (this: void, value: string, index: number, array: string[]) => void, thisArg: undefined): void; <Z>(callbackfn: (this: Z, value: string, index: number, array: string[]) => void, thisArg: Z): void; }
>match => ''.replace(match, '') : (this: void, match: string) => string
>match : string
>''.replace(match, '') : string
>''.replace : { (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; }
>'' : ""
>replace : { (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; }
>match : string
>'' : ""

