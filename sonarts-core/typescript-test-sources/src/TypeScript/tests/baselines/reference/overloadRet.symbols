=== tests/cases/compiler/overloadRet.ts ===
interface I {
>I : Symbol(I, Decl(overloadRet.ts, 0, 0))

    f(s:string):number;  
>f : Symbol(I.f, Decl(overloadRet.ts, 0, 13), Decl(overloadRet.ts, 1, 23))
>s : Symbol(s, Decl(overloadRet.ts, 1, 6))

    f(n:number):string;
>f : Symbol(I.f, Decl(overloadRet.ts, 0, 13), Decl(overloadRet.ts, 1, 23))
>n : Symbol(n, Decl(overloadRet.ts, 2, 6))

    g(n:number):any; 
>g : Symbol(I.g, Decl(overloadRet.ts, 2, 23), Decl(overloadRet.ts, 3, 20))
>n : Symbol(n, Decl(overloadRet.ts, 3, 6))

    g(n:number,m:number):string;
>g : Symbol(I.g, Decl(overloadRet.ts, 2, 23), Decl(overloadRet.ts, 3, 20))
>n : Symbol(n, Decl(overloadRet.ts, 4, 6))
>m : Symbol(m, Decl(overloadRet.ts, 4, 15))

    h(n:number):I;  
>h : Symbol(I.h, Decl(overloadRet.ts, 4, 32), Decl(overloadRet.ts, 5, 18))
>n : Symbol(n, Decl(overloadRet.ts, 5, 6))
>I : Symbol(I, Decl(overloadRet.ts, 0, 0))

    h(b:boolean):number;
>h : Symbol(I.h, Decl(overloadRet.ts, 4, 32), Decl(overloadRet.ts, 5, 18))
>b : Symbol(b, Decl(overloadRet.ts, 6, 6))

    i(b:boolean):number;
>i : Symbol(I.i, Decl(overloadRet.ts, 6, 24), Decl(overloadRet.ts, 7, 24))
>b : Symbol(b, Decl(overloadRet.ts, 7, 6))

    i(b:boolean):any;
>i : Symbol(I.i, Decl(overloadRet.ts, 6, 24), Decl(overloadRet.ts, 7, 24))
>b : Symbol(b, Decl(overloadRet.ts, 8, 6))
}
