=== tests/cases/conformance/types/objectTypeLiteral/propertySignatures/propertyNameWithoutTypeAnnotation.ts ===
class C {
>C : Symbol(C, Decl(propertyNameWithoutTypeAnnotation.ts, 0, 0))

    foo;
>foo : Symbol(C.foo, Decl(propertyNameWithoutTypeAnnotation.ts, 0, 9))
}

interface I {
>I : Symbol(I, Decl(propertyNameWithoutTypeAnnotation.ts, 2, 1))

    foo;
>foo : Symbol(I.foo, Decl(propertyNameWithoutTypeAnnotation.ts, 4, 13))
}

var a: {
>a : Symbol(a, Decl(propertyNameWithoutTypeAnnotation.ts, 8, 3))

    foo;
>foo : Symbol(foo, Decl(propertyNameWithoutTypeAnnotation.ts, 8, 8))
}

var b = {
>b : Symbol(b, Decl(propertyNameWithoutTypeAnnotation.ts, 12, 3))

    foo: null
>foo : Symbol(foo, Decl(propertyNameWithoutTypeAnnotation.ts, 12, 9))
}

// These should all be of type 'any'
var r1 = (new C()).foo;
>r1 : Symbol(r1, Decl(propertyNameWithoutTypeAnnotation.ts, 17, 3))
>(new C()).foo : Symbol(C.foo, Decl(propertyNameWithoutTypeAnnotation.ts, 0, 9))
>C : Symbol(C, Decl(propertyNameWithoutTypeAnnotation.ts, 0, 0))
>foo : Symbol(C.foo, Decl(propertyNameWithoutTypeAnnotation.ts, 0, 9))

var r2 = (<I>null).foo;
>r2 : Symbol(r2, Decl(propertyNameWithoutTypeAnnotation.ts, 18, 3))
>(<I>null).foo : Symbol(I.foo, Decl(propertyNameWithoutTypeAnnotation.ts, 4, 13))
>I : Symbol(I, Decl(propertyNameWithoutTypeAnnotation.ts, 2, 1))
>foo : Symbol(I.foo, Decl(propertyNameWithoutTypeAnnotation.ts, 4, 13))

var r3 = a.foo;
>r3 : Symbol(r3, Decl(propertyNameWithoutTypeAnnotation.ts, 19, 3))
>a.foo : Symbol(foo, Decl(propertyNameWithoutTypeAnnotation.ts, 8, 8))
>a : Symbol(a, Decl(propertyNameWithoutTypeAnnotation.ts, 8, 3))
>foo : Symbol(foo, Decl(propertyNameWithoutTypeAnnotation.ts, 8, 8))

var r4 = b.foo;
>r4 : Symbol(r4, Decl(propertyNameWithoutTypeAnnotation.ts, 20, 3))
>b.foo : Symbol(foo, Decl(propertyNameWithoutTypeAnnotation.ts, 12, 9))
>b : Symbol(b, Decl(propertyNameWithoutTypeAnnotation.ts, 12, 3))
>foo : Symbol(foo, Decl(propertyNameWithoutTypeAnnotation.ts, 12, 9))

