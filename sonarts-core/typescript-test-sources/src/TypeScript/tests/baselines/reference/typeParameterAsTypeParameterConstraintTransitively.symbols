=== tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraintTransitively.ts ===
// using a type parameter as a constraint for a type parameter is valid
// no errors expected

interface A { foo: number }
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 0, 0))
>foo : Symbol(A.foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 3, 13))

interface B extends A { bar: string; }
>B : Symbol(B, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 3, 27))
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 0, 0))
>bar : Symbol(B.bar, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 4, 23))

interface C extends B { baz: boolean; }
>C : Symbol(C, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 4, 38))
>B : Symbol(B, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 3, 27))
>baz : Symbol(C.baz, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 5, 23))

var a: A;
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 6, 3))
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 0, 0))

var b: B;
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 7, 3))
>B : Symbol(B, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 3, 27))

var c: C;
>c : Symbol(c, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 3))
>C : Symbol(C, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 4, 38))

function foo<T, U, V>(x: T, y: U, z: V): V { return z; }
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 9))
>T : Symbol(T, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 13))
>U : Symbol(U, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 15))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 18))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 22))
>T : Symbol(T, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 13))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 27))
>U : Symbol(U, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 15))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 33))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 18))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 18))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 10, 33))

//function foo<T, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }

foo(1, 2, 3);
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 9))

foo({ x: 1 }, { x: 1, y: '' }, { x: 2, y: '', z: true });
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 9))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 14, 5))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 14, 15))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 14, 21))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 14, 32))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 14, 38))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 14, 45))

foo(a, b, c);
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 9))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 6, 3))
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 7, 3))
>c : Symbol(c, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 3))

foo(a, b, { foo: 1, bar: '', hm: true });
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 9))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 6, 3))
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 7, 3))
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 16, 11))
>bar : Symbol(bar, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 16, 19))
>hm : Symbol(hm, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 16, 28))

foo((x: number, y) => { }, (x) => { }, () => { });
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 9))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 17, 5))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 17, 15))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 17, 28))

function foo2<T extends A, U, V>(x: T, y: U, z: V): V { return z; }
>foo2 : Symbol(foo2, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 17, 50))
>T : Symbol(T, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 14))
>A : Symbol(A, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 0, 0))
>U : Symbol(U, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 26))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 29))
>x : Symbol(x, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 33))
>T : Symbol(T, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 14))
>y : Symbol(y, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 38))
>U : Symbol(U, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 26))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 44))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 29))
>V : Symbol(V, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 29))
>z : Symbol(z, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 19, 44))

//function foo2<T extends A, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }
foo(a, a, a);
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 9))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 6, 3))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 6, 3))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 6, 3))

foo(a, b, c);
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 9))
>a : Symbol(a, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 6, 3))
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 7, 3))
>c : Symbol(c, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 3))

foo(b, b, { foo: 1, bar: '', hm: '' });
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 8, 9))
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 7, 3))
>b : Symbol(b, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 7, 3))
>foo : Symbol(foo, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 23, 11))
>bar : Symbol(bar, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 23, 19))
>hm : Symbol(hm, Decl(typeParameterAsTypeParameterConstraintTransitively.ts, 23, 28))

