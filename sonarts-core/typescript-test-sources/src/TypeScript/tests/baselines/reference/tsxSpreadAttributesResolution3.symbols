=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : Symbol(React, Decl(file.tsx, 0, 0))

interface PoisonedProp {
>PoisonedProp : Symbol(PoisonedProp, Decl(file.tsx, 0, 32))

    x: string;
>x : Symbol(PoisonedProp.x, Decl(file.tsx, 2, 24))

    y: number;
>y : Symbol(PoisonedProp.y, Decl(file.tsx, 3, 14))
}

class Poisoned extends React.Component<PoisonedProp, {}> {
>Poisoned : Symbol(Poisoned, Decl(file.tsx, 5, 1))
>React.Component : Symbol(React.Component, Decl(react.d.ts, 158, 55))
>React : Symbol(React, Decl(file.tsx, 0, 0))
>Component : Symbol(React.Component, Decl(react.d.ts, 158, 55))
>PoisonedProp : Symbol(PoisonedProp, Decl(file.tsx, 0, 32))

    render() {
>render : Symbol(Poisoned.render, Decl(file.tsx, 7, 58))

        return <div>Hello</div>;
>div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2399, 45))
>div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2399, 45))
    }
}

const obj = {
>obj : Symbol(obj, Decl(file.tsx, 13, 5))

    x: "hello world",
>x : Symbol(x, Decl(file.tsx, 13, 13))

    y: 2
>y : Symbol(y, Decl(file.tsx, 14, 21))

};

// OK
let p = <Poisoned {...obj} />;
>p : Symbol(p, Decl(file.tsx, 19, 3))
>Poisoned : Symbol(Poisoned, Decl(file.tsx, 5, 1))
>obj : Symbol(obj, Decl(file.tsx, 13, 5))

let y = <Poisoned x="hi" y={2} />;
>y : Symbol(y, Decl(file.tsx, 20, 3))
>Poisoned : Symbol(Poisoned, Decl(file.tsx, 5, 1))
>x : Symbol(x, Decl(file.tsx, 20, 17))
>y : Symbol(y, Decl(file.tsx, 20, 24))

