=== tests/cases/compiler/inferentialTypingWithFunctionType2.ts ===
function identity<A>(a: A): A {
>identity : Symbol(identity, Decl(inferentialTypingWithFunctionType2.ts, 0, 0))
>A : Symbol(A, Decl(inferentialTypingWithFunctionType2.ts, 0, 18))
>a : Symbol(a, Decl(inferentialTypingWithFunctionType2.ts, 0, 21))
>A : Symbol(A, Decl(inferentialTypingWithFunctionType2.ts, 0, 18))
>A : Symbol(A, Decl(inferentialTypingWithFunctionType2.ts, 0, 18))

    return a;
>a : Symbol(a, Decl(inferentialTypingWithFunctionType2.ts, 0, 21))
}
var x = [1, 2, 3].map(identity)[0];
>x : Symbol(x, Decl(inferentialTypingWithFunctionType2.ts, 3, 3))
>[1, 2, 3].map : Symbol(Array.map, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>map : Symbol(Array.map, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>identity : Symbol(identity, Decl(inferentialTypingWithFunctionType2.ts, 0, 0))

