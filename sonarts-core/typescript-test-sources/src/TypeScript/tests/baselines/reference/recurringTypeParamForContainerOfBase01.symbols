=== tests/cases/conformance/types/typeParameters/recurringTypeParamForContainerOfBase01.ts ===
interface BoxOfFoo<T extends Foo<T>> {
>BoxOfFoo : Symbol(BoxOfFoo, Decl(recurringTypeParamForContainerOfBase01.ts, 0, 0))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 0, 19))
>Foo : Symbol(Foo, Decl(recurringTypeParamForContainerOfBase01.ts, 2, 1))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 0, 19))

    item: T
>item : Symbol(BoxOfFoo.item, Decl(recurringTypeParamForContainerOfBase01.ts, 0, 38))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 0, 19))
}

interface Foo<T extends Foo<T>> {
>Foo : Symbol(Foo, Decl(recurringTypeParamForContainerOfBase01.ts, 2, 1))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 4, 14))
>Foo : Symbol(Foo, Decl(recurringTypeParamForContainerOfBase01.ts, 2, 1))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 4, 14))

    self: T;
>self : Symbol(Foo.self, Decl(recurringTypeParamForContainerOfBase01.ts, 4, 33))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 4, 14))
}

interface Bar<T extends Bar<T>> extends Foo<T> {
>Bar : Symbol(Bar, Decl(recurringTypeParamForContainerOfBase01.ts, 6, 1))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 8, 14))
>Bar : Symbol(Bar, Decl(recurringTypeParamForContainerOfBase01.ts, 6, 1))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 8, 14))
>Foo : Symbol(Foo, Decl(recurringTypeParamForContainerOfBase01.ts, 2, 1))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 8, 14))

    other: BoxOfFoo<T>;
>other : Symbol(Bar.other, Decl(recurringTypeParamForContainerOfBase01.ts, 8, 48))
>BoxOfFoo : Symbol(BoxOfFoo, Decl(recurringTypeParamForContainerOfBase01.ts, 0, 0))
>T : Symbol(T, Decl(recurringTypeParamForContainerOfBase01.ts, 8, 14))
}
