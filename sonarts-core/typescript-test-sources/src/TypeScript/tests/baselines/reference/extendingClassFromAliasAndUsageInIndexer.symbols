=== tests/cases/compiler/extendingClassFromAliasAndUsageInIndexer_main.ts ===
import Backbone = require("./extendingClassFromAliasAndUsageInIndexer_backbone");
>Backbone : Symbol(Backbone, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 0, 0))

import moduleA = require("./extendingClassFromAliasAndUsageInIndexer_moduleA");
>moduleA : Symbol(moduleA, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 0, 81))

import moduleB = require("./extendingClassFromAliasAndUsageInIndexer_moduleB");
>moduleB : Symbol(moduleB, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 1, 79))

interface IHasVisualizationModel {
>IHasVisualizationModel : Symbol(IHasVisualizationModel, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 2, 79))

    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : Symbol(IHasVisualizationModel.VisualizationModel, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 3, 34))
>Backbone.Model : Symbol(Backbone.Model, Decl(extendingClassFromAliasAndUsageInIndexer_backbone.ts, 0, 0))
>Backbone : Symbol(Backbone, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 0, 0))
>Model : Symbol(Backbone.Model, Decl(extendingClassFromAliasAndUsageInIndexer_backbone.ts, 0, 0))
}
var moduleATyped: IHasVisualizationModel = moduleA;
>moduleATyped : Symbol(moduleATyped, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 6, 3))
>IHasVisualizationModel : Symbol(IHasVisualizationModel, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 2, 79))
>moduleA : Symbol(moduleA, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 0, 81))

var moduleMap: { [key: string]: IHasVisualizationModel } = {
>moduleMap : Symbol(moduleMap, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 7, 3))
>key : Symbol(key, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 7, 18))
>IHasVisualizationModel : Symbol(IHasVisualizationModel, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 2, 79))

    "moduleA": moduleA,
>moduleA : Symbol(moduleA, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 0, 81))

    "moduleB": moduleB
>moduleB : Symbol(moduleB, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 1, 79))

};
var moduleName: string;
>moduleName : Symbol(moduleName, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 11, 3))

var visModel = new moduleMap[moduleName].VisualizationModel();
>visModel : Symbol(visModel, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 12, 3))
>moduleMap[moduleName].VisualizationModel : Symbol(IHasVisualizationModel.VisualizationModel, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 3, 34))
>moduleMap : Symbol(moduleMap, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 7, 3))
>moduleName : Symbol(moduleName, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 11, 3))
>VisualizationModel : Symbol(IHasVisualizationModel.VisualizationModel, Decl(extendingClassFromAliasAndUsageInIndexer_main.ts, 3, 34))

=== tests/cases/compiler/extendingClassFromAliasAndUsageInIndexer_backbone.ts ===
export class Model {
>Model : Symbol(Model, Decl(extendingClassFromAliasAndUsageInIndexer_backbone.ts, 0, 0))

    public someData: string;
>someData : Symbol(Model.someData, Decl(extendingClassFromAliasAndUsageInIndexer_backbone.ts, 0, 20))
}

=== tests/cases/compiler/extendingClassFromAliasAndUsageInIndexer_moduleA.ts ===
import Backbone = require("./extendingClassFromAliasAndUsageInIndexer_backbone");
>Backbone : Symbol(Backbone, Decl(extendingClassFromAliasAndUsageInIndexer_moduleA.ts, 0, 0))

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : Symbol(VisualizationModel, Decl(extendingClassFromAliasAndUsageInIndexer_moduleA.ts, 0, 81))
>Backbone.Model : Symbol(Backbone.Model, Decl(extendingClassFromAliasAndUsageInIndexer_backbone.ts, 0, 0))
>Backbone : Symbol(Backbone, Decl(extendingClassFromAliasAndUsageInIndexer_moduleA.ts, 0, 0))
>Model : Symbol(Backbone.Model, Decl(extendingClassFromAliasAndUsageInIndexer_backbone.ts, 0, 0))

    // interesting stuff here
}

=== tests/cases/compiler/extendingClassFromAliasAndUsageInIndexer_moduleB.ts ===
import Backbone = require("./extendingClassFromAliasAndUsageInIndexer_backbone");
>Backbone : Symbol(Backbone, Decl(extendingClassFromAliasAndUsageInIndexer_moduleB.ts, 0, 0))

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : Symbol(VisualizationModel, Decl(extendingClassFromAliasAndUsageInIndexer_moduleB.ts, 0, 81))
>Backbone.Model : Symbol(Backbone.Model, Decl(extendingClassFromAliasAndUsageInIndexer_backbone.ts, 0, 0))
>Backbone : Symbol(Backbone, Decl(extendingClassFromAliasAndUsageInIndexer_moduleB.ts, 0, 0))
>Model : Symbol(Backbone.Model, Decl(extendingClassFromAliasAndUsageInIndexer_backbone.ts, 0, 0))

    // different interesting stuff here
}

