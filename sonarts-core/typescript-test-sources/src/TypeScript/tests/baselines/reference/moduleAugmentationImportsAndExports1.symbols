=== tests/cases/compiler/f1.ts ===
export class A {}
>A : Symbol(A, Decl(f1.ts, 0, 0), Decl(f3.ts, 4, 23))

=== tests/cases/compiler/f2.ts ===
export class B {
>B : Symbol(B, Decl(f2.ts, 0, 0))

    n: number;
>n : Symbol(B.n, Decl(f2.ts, 0, 16))
}

=== tests/cases/compiler/f3.ts ===
import {A} from "./f1";
>A : Symbol(A, Decl(f3.ts, 0, 8))

import {B} from "./f2";
>B : Symbol(B, Decl(f3.ts, 1, 8))

A.prototype.foo = function () { return undefined; }
>A.prototype.foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
>A.prototype : Symbol(A.prototype)
>A : Symbol(A, Decl(f3.ts, 0, 8))
>prototype : Symbol(A.prototype)
>foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
>undefined : Symbol(undefined)

declare module "./f1" {
    interface A {
>A : Symbol(A, Decl(f1.ts, 0, 0), Decl(f3.ts, 4, 23))

        foo(): B;
>foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
>B : Symbol(B, Decl(f3.ts, 1, 8))
    }
}

=== tests/cases/compiler/f4.ts ===
import {A} from "./f1";
>A : Symbol(A, Decl(f4.ts, 0, 8))

import "./f3";

let a: A;
>a : Symbol(a, Decl(f4.ts, 3, 3))
>A : Symbol(A, Decl(f4.ts, 0, 8))

let b = a.foo().n;
>b : Symbol(b, Decl(f4.ts, 4, 3))
>a.foo().n : Symbol(B.n, Decl(f2.ts, 0, 16))
>a.foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
>a : Symbol(a, Decl(f4.ts, 3, 3))
>foo : Symbol(A.foo, Decl(f3.ts, 5, 17))
>n : Symbol(B.n, Decl(f2.ts, 0, 16))

