=== tests/cases/conformance/types/thisType/fluentInterfaces.ts ===
interface A {
>A : Symbol(A, Decl(fluentInterfaces.ts, 0, 0))

    foo(): this;
>foo : Symbol(A.foo, Decl(fluentInterfaces.ts, 0, 13))
}
interface B extends A {
>B : Symbol(B, Decl(fluentInterfaces.ts, 2, 1))
>A : Symbol(A, Decl(fluentInterfaces.ts, 0, 0))

    bar(): this;
>bar : Symbol(B.bar, Decl(fluentInterfaces.ts, 3, 23))
}
interface C extends B {
>C : Symbol(C, Decl(fluentInterfaces.ts, 5, 1))
>B : Symbol(B, Decl(fluentInterfaces.ts, 2, 1))

    baz(): this;
>baz : Symbol(C.baz, Decl(fluentInterfaces.ts, 6, 23))
}
var c: C;
>c : Symbol(c, Decl(fluentInterfaces.ts, 9, 3))
>C : Symbol(C, Decl(fluentInterfaces.ts, 5, 1))

var z = c.foo().bar().baz();  // Fluent pattern
>z : Symbol(z, Decl(fluentInterfaces.ts, 10, 3))
>c.foo().bar().baz : Symbol(C.baz, Decl(fluentInterfaces.ts, 6, 23))
>c.foo().bar : Symbol(B.bar, Decl(fluentInterfaces.ts, 3, 23))
>c.foo : Symbol(A.foo, Decl(fluentInterfaces.ts, 0, 13))
>c : Symbol(c, Decl(fluentInterfaces.ts, 9, 3))
>foo : Symbol(A.foo, Decl(fluentInterfaces.ts, 0, 13))
>bar : Symbol(B.bar, Decl(fluentInterfaces.ts, 3, 23))
>baz : Symbol(C.baz, Decl(fluentInterfaces.ts, 6, 23))

