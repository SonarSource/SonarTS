=== tests/cases/conformance/types/typeRelationships/recursiveTypes/recursiveTypeInGenericConstraint.ts ===
class G<T> {
>G : G<T>
>T : T

    x: G<G<T>>; // infinitely expanding type reference
>x : G<G<T>>
>G : G<T>
>G : G<T>
>T : T
}

class Foo<T extends G<T>> { // error, constraint referencing itself
>Foo : Foo<T>
>T : T
>G : G<T>
>T : T

    bar: T;
>bar : T
>T : T
}

class D<T> {
>D : D<T>
>T : T

    x: G<G<T>>; 
>x : G<G<T>>
>G : G<T>
>G : G<T>
>T : T
}

var c1 = new Foo<D<string>>(); // ok, circularity in assignment compat check causes success
>c1 : Foo<D<string>>
>new Foo<D<string>>() : Foo<D<string>>
>Foo : typeof Foo
>D : D<T>

