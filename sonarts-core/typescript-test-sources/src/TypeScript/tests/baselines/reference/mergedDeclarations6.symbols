=== tests/cases/compiler/a.ts ===
export class A {
>A : Symbol(A, Decl(a.ts, 0, 0), Decl(b.ts, 2, 22))

    protected protected: any;
>protected : Symbol(A.protected, Decl(a.ts, 0, 16))

    protected setProtected(val: any) {
>setProtected : Symbol(A.setProtected, Decl(a.ts, 1, 29))
>val : Symbol(val, Decl(a.ts, 3, 27))

        this.protected = val;
>this.protected : Symbol(A.protected, Decl(a.ts, 0, 16))
>this : Symbol(A, Decl(a.ts, 0, 0), Decl(b.ts, 2, 22))
>protected : Symbol(A.protected, Decl(a.ts, 0, 16))
>val : Symbol(val, Decl(a.ts, 3, 27))
    }
}

=== tests/cases/compiler/b.ts ===
import {A} from './a';
>A : Symbol(A, Decl(b.ts, 0, 8))

declare module "./a" {
    interface A { }
>A : Symbol(A, Decl(a.ts, 0, 0), Decl(b.ts, 2, 22))
}

export class B extends A {
>B : Symbol(B, Decl(b.ts, 4, 1))
>A : Symbol(A, Decl(b.ts, 0, 8))

    protected setProtected() {
>setProtected : Symbol(B.setProtected, Decl(b.ts, 6, 26))

    }
}
