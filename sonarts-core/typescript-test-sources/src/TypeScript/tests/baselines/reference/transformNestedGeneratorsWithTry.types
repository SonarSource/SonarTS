=== tests/cases/compiler/main.ts ===
// https://github.com/Microsoft/TypeScript/issues/11177
import * as Bluebird from 'bluebird';
>Bluebird : PromiseConstructor

async function a(): Bluebird<void> {
>a : () => Promise<void>
>Bluebird : Promise<T>

  try {
    const b = async function b(): Bluebird<void> {
>b : () => Promise<void>
>async function b(): Bluebird<void> {      try {        await Bluebird.resolve(); // -- remove this and it compiles      } catch (error) { }    } : () => Promise<void>
>b : () => Promise<void>
>Bluebird : Promise<T>

      try {
        await Bluebird.resolve(); // -- remove this and it compiles
>await Bluebird.resolve() : void
>Bluebird.resolve() : Promise<void>
>Bluebird.resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }
>Bluebird : PromiseConstructor
>resolve : { <T>(value: T | PromiseLike<T>): Promise<T>; (): Promise<void>; }

      } catch (error) { }
>error : any

    };

    await b(); // -- or remove this and it compiles
>await b() : void
>b() : Promise<void>
>b : () => Promise<void>

  } catch (error) { }
>error : any
}

=== tests/cases/compiler/bluebird.d.ts ===
declare module "bluebird" {
    type Bluebird<T> = Promise<T>;
>Bluebird : Promise<T>
>T : T
>Promise : Promise<T>
>T : T

    const Bluebird: typeof Promise;
>Bluebird : PromiseConstructor
>Promise : PromiseConstructor

    export = Bluebird;
>Bluebird : Promise<T>
}
