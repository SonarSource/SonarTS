=== tests/cases/conformance/types/typeRelationships/recursiveTypes/recursiveTypeInGenericConstraint.ts ===
class G<T> {
>G : Symbol(G, Decl(recursiveTypeInGenericConstraint.ts, 0, 0))
>T : Symbol(T, Decl(recursiveTypeInGenericConstraint.ts, 0, 8))

    x: G<G<T>>; // infinitely expanding type reference
>x : Symbol(G.x, Decl(recursiveTypeInGenericConstraint.ts, 0, 12))
>G : Symbol(G, Decl(recursiveTypeInGenericConstraint.ts, 0, 0))
>G : Symbol(G, Decl(recursiveTypeInGenericConstraint.ts, 0, 0))
>T : Symbol(T, Decl(recursiveTypeInGenericConstraint.ts, 0, 8))
}

class Foo<T extends G<T>> { // error, constraint referencing itself
>Foo : Symbol(Foo, Decl(recursiveTypeInGenericConstraint.ts, 2, 1))
>T : Symbol(T, Decl(recursiveTypeInGenericConstraint.ts, 4, 10))
>G : Symbol(G, Decl(recursiveTypeInGenericConstraint.ts, 0, 0))
>T : Symbol(T, Decl(recursiveTypeInGenericConstraint.ts, 4, 10))

    bar: T;
>bar : Symbol(Foo.bar, Decl(recursiveTypeInGenericConstraint.ts, 4, 27))
>T : Symbol(T, Decl(recursiveTypeInGenericConstraint.ts, 4, 10))
}

class D<T> {
>D : Symbol(D, Decl(recursiveTypeInGenericConstraint.ts, 6, 1))
>T : Symbol(T, Decl(recursiveTypeInGenericConstraint.ts, 8, 8))

    x: G<G<T>>; 
>x : Symbol(D.x, Decl(recursiveTypeInGenericConstraint.ts, 8, 12))
>G : Symbol(G, Decl(recursiveTypeInGenericConstraint.ts, 0, 0))
>G : Symbol(G, Decl(recursiveTypeInGenericConstraint.ts, 0, 0))
>T : Symbol(T, Decl(recursiveTypeInGenericConstraint.ts, 8, 8))
}

var c1 = new Foo<D<string>>(); // ok, circularity in assignment compat check causes success
>c1 : Symbol(c1, Decl(recursiveTypeInGenericConstraint.ts, 12, 3))
>Foo : Symbol(Foo, Decl(recursiveTypeInGenericConstraint.ts, 2, 1))
>D : Symbol(D, Decl(recursiveTypeInGenericConstraint.ts, 6, 1))

