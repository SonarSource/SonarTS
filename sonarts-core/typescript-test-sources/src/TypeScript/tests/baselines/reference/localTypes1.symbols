=== tests/cases/conformance/types/localTypes/localTypes1.ts ===
function f1() {
>f1 : Symbol(f1, Decl(localTypes1.ts, 0, 0))

    enum E {
>E : Symbol(E, Decl(localTypes1.ts, 0, 15))

        A, B, C
>A : Symbol(E.A, Decl(localTypes1.ts, 1, 12))
>B : Symbol(E.B, Decl(localTypes1.ts, 2, 10))
>C : Symbol(E.C, Decl(localTypes1.ts, 2, 13))
    }
    class C {
>C : Symbol(C, Decl(localTypes1.ts, 3, 5))

        x: E;
>x : Symbol(C.x, Decl(localTypes1.ts, 4, 13))
>E : Symbol(E, Decl(localTypes1.ts, 0, 15))
    }
    interface I {
>I : Symbol(I, Decl(localTypes1.ts, 6, 5))

        x: E;
>x : Symbol(I.x, Decl(localTypes1.ts, 7, 17))
>E : Symbol(E, Decl(localTypes1.ts, 0, 15))
    }
    type A = I[];
>A : Symbol(A, Decl(localTypes1.ts, 9, 5))
>I : Symbol(I, Decl(localTypes1.ts, 6, 5))

    let a: A = [new C()];
>a : Symbol(a, Decl(localTypes1.ts, 11, 7))
>A : Symbol(A, Decl(localTypes1.ts, 9, 5))
>C : Symbol(C, Decl(localTypes1.ts, 3, 5))

    a[0].x = E.B;
>a[0].x : Symbol(I.x, Decl(localTypes1.ts, 7, 17))
>a : Symbol(a, Decl(localTypes1.ts, 11, 7))
>x : Symbol(I.x, Decl(localTypes1.ts, 7, 17))
>E.B : Symbol(E.B, Decl(localTypes1.ts, 2, 10))
>E : Symbol(E, Decl(localTypes1.ts, 0, 15))
>B : Symbol(E.B, Decl(localTypes1.ts, 2, 10))

    return a;
>a : Symbol(a, Decl(localTypes1.ts, 11, 7))
}

function f2() {
>f2 : Symbol(f2, Decl(localTypes1.ts, 14, 1))

    function g() {
>g : Symbol(g, Decl(localTypes1.ts, 16, 15))

        enum E {
>E : Symbol(E, Decl(localTypes1.ts, 17, 18))

            A, B, C
>A : Symbol(E.A, Decl(localTypes1.ts, 18, 16))
>B : Symbol(E.B, Decl(localTypes1.ts, 19, 14))
>C : Symbol(E.C, Decl(localTypes1.ts, 19, 17))
        }
        class C {
>C : Symbol(C, Decl(localTypes1.ts, 20, 9))

            x: E;
>x : Symbol(C.x, Decl(localTypes1.ts, 21, 17))
>E : Symbol(E, Decl(localTypes1.ts, 17, 18))
        }
        interface I {
>I : Symbol(I, Decl(localTypes1.ts, 23, 9))

            x: E;
>x : Symbol(I.x, Decl(localTypes1.ts, 24, 21))
>E : Symbol(E, Decl(localTypes1.ts, 17, 18))
        }
        type A = I[];
>A : Symbol(A, Decl(localTypes1.ts, 26, 9))
>I : Symbol(I, Decl(localTypes1.ts, 23, 9))

        let a: A = [new C()];
>a : Symbol(a, Decl(localTypes1.ts, 28, 11))
>A : Symbol(A, Decl(localTypes1.ts, 26, 9))
>C : Symbol(C, Decl(localTypes1.ts, 20, 9))

        a[0].x = E.B;
>a[0].x : Symbol(I.x, Decl(localTypes1.ts, 24, 21))
>a : Symbol(a, Decl(localTypes1.ts, 28, 11))
>x : Symbol(I.x, Decl(localTypes1.ts, 24, 21))
>E.B : Symbol(E.B, Decl(localTypes1.ts, 19, 14))
>E : Symbol(E, Decl(localTypes1.ts, 17, 18))
>B : Symbol(E.B, Decl(localTypes1.ts, 19, 14))

        return a;
>a : Symbol(a, Decl(localTypes1.ts, 28, 11))
    }
    return g();
>g : Symbol(g, Decl(localTypes1.ts, 16, 15))
}

function f3(b: boolean) {
>f3 : Symbol(f3, Decl(localTypes1.ts, 33, 1))
>b : Symbol(b, Decl(localTypes1.ts, 35, 12))

    if (true) {
        enum E {
>E : Symbol(E, Decl(localTypes1.ts, 36, 15))

            A, B, C
>A : Symbol(E.A, Decl(localTypes1.ts, 37, 16))
>B : Symbol(E.B, Decl(localTypes1.ts, 38, 14))
>C : Symbol(E.C, Decl(localTypes1.ts, 38, 17))
        }
        if (b) {
>b : Symbol(b, Decl(localTypes1.ts, 35, 12))

            class C {
>C : Symbol(C, Decl(localTypes1.ts, 40, 16))

                x: E;
>x : Symbol(C.x, Decl(localTypes1.ts, 41, 21))
>E : Symbol(E, Decl(localTypes1.ts, 36, 15))
            }
            interface I {
>I : Symbol(I, Decl(localTypes1.ts, 43, 13))

                x: E;
>x : Symbol(I.x, Decl(localTypes1.ts, 44, 25))
>E : Symbol(E, Decl(localTypes1.ts, 36, 15))
            }
            type A = I[];
>A : Symbol(A, Decl(localTypes1.ts, 46, 13))
>I : Symbol(I, Decl(localTypes1.ts, 43, 13))

            let a: A = [new C()];
>a : Symbol(a, Decl(localTypes1.ts, 48, 15))
>A : Symbol(A, Decl(localTypes1.ts, 46, 13))
>C : Symbol(C, Decl(localTypes1.ts, 40, 16))

            a[0].x = E.B;
>a[0].x : Symbol(I.x, Decl(localTypes1.ts, 44, 25))
>a : Symbol(a, Decl(localTypes1.ts, 48, 15))
>x : Symbol(I.x, Decl(localTypes1.ts, 44, 25))
>E.B : Symbol(E.B, Decl(localTypes1.ts, 38, 14))
>E : Symbol(E, Decl(localTypes1.ts, 36, 15))
>B : Symbol(E.B, Decl(localTypes1.ts, 38, 14))

            return a;
>a : Symbol(a, Decl(localTypes1.ts, 48, 15))
        }
        else {
            class A {
>A : Symbol(A, Decl(localTypes1.ts, 52, 14))

                x: E;
>x : Symbol(A.x, Decl(localTypes1.ts, 53, 21))
>E : Symbol(E, Decl(localTypes1.ts, 36, 15))
            }
            interface J {
>J : Symbol(J, Decl(localTypes1.ts, 55, 13))

                x: E;
>x : Symbol(J.x, Decl(localTypes1.ts, 56, 25))
>E : Symbol(E, Decl(localTypes1.ts, 36, 15))
            }
            type C = J[];
>C : Symbol(C, Decl(localTypes1.ts, 58, 13))
>J : Symbol(J, Decl(localTypes1.ts, 55, 13))

            let c: C = [new A()];
>c : Symbol(c, Decl(localTypes1.ts, 60, 15))
>C : Symbol(C, Decl(localTypes1.ts, 58, 13))
>A : Symbol(A, Decl(localTypes1.ts, 52, 14))

            c[0].x = E.B;
>c[0].x : Symbol(J.x, Decl(localTypes1.ts, 56, 25))
>c : Symbol(c, Decl(localTypes1.ts, 60, 15))
>x : Symbol(J.x, Decl(localTypes1.ts, 56, 25))
>E.B : Symbol(E.B, Decl(localTypes1.ts, 38, 14))
>E : Symbol(E, Decl(localTypes1.ts, 36, 15))
>B : Symbol(E.B, Decl(localTypes1.ts, 38, 14))

            return c;
>c : Symbol(c, Decl(localTypes1.ts, 60, 15))
        }
    }
}

function f5() {
>f5 : Symbol(f5, Decl(localTypes1.ts, 65, 1))

    var z1 = function () {
>z1 : Symbol(z1, Decl(localTypes1.ts, 68, 7))

        enum E {
>E : Symbol(E, Decl(localTypes1.ts, 68, 26))

            A, B, C
>A : Symbol(E.A, Decl(localTypes1.ts, 69, 16))
>B : Symbol(E.B, Decl(localTypes1.ts, 70, 14))
>C : Symbol(E.C, Decl(localTypes1.ts, 70, 17))
        }
        class C {
>C : Symbol(C, Decl(localTypes1.ts, 71, 9))

            x: E;
>x : Symbol(C.x, Decl(localTypes1.ts, 72, 17))
>E : Symbol(E, Decl(localTypes1.ts, 68, 26))
        }
        return new C();
>C : Symbol(C, Decl(localTypes1.ts, 71, 9))
    }
    var z2 = () => {
>z2 : Symbol(z2, Decl(localTypes1.ts, 77, 7))

        enum E {
>E : Symbol(E, Decl(localTypes1.ts, 77, 20))

            A, B, C
>A : Symbol(E.A, Decl(localTypes1.ts, 78, 16))
>B : Symbol(E.B, Decl(localTypes1.ts, 79, 14))
>C : Symbol(E.C, Decl(localTypes1.ts, 79, 17))
        }
        class C {
>C : Symbol(C, Decl(localTypes1.ts, 80, 9))

            x: E;
>x : Symbol(C.x, Decl(localTypes1.ts, 81, 17))
>E : Symbol(E, Decl(localTypes1.ts, 77, 20))
        }
        return new C();
>C : Symbol(C, Decl(localTypes1.ts, 80, 9))
    }
}

class A {
>A : Symbol(A, Decl(localTypes1.ts, 86, 1))

    constructor() {
        enum E {
>E : Symbol(E, Decl(localTypes1.ts, 89, 19))

            A, B, C
>A : Symbol(E.A, Decl(localTypes1.ts, 90, 16))
>B : Symbol(E.B, Decl(localTypes1.ts, 91, 14))
>C : Symbol(E.C, Decl(localTypes1.ts, 91, 17))
        }
        class C {
>C : Symbol(C, Decl(localTypes1.ts, 92, 9))

            x: E;
>x : Symbol(C.x, Decl(localTypes1.ts, 93, 17))
>E : Symbol(E, Decl(localTypes1.ts, 89, 19))
        }
    }
    m() {
>m : Symbol(A.m, Decl(localTypes1.ts, 96, 5))

        enum E {
>E : Symbol(E, Decl(localTypes1.ts, 97, 9))

            A, B, C
>A : Symbol(E.A, Decl(localTypes1.ts, 98, 16))
>B : Symbol(E.B, Decl(localTypes1.ts, 99, 14))
>C : Symbol(E.C, Decl(localTypes1.ts, 99, 17))
        }
        class C {
>C : Symbol(C, Decl(localTypes1.ts, 100, 9))

            x: E;
>x : Symbol(C.x, Decl(localTypes1.ts, 101, 17))
>E : Symbol(E, Decl(localTypes1.ts, 97, 9))
        }
        return new C();
>C : Symbol(C, Decl(localTypes1.ts, 100, 9))
    }
    get p() {
>p : Symbol(A.p, Decl(localTypes1.ts, 105, 5))

        enum E {
>E : Symbol(E, Decl(localTypes1.ts, 106, 13))

            A, B, C
>A : Symbol(E.A, Decl(localTypes1.ts, 107, 16))
>B : Symbol(E.B, Decl(localTypes1.ts, 108, 14))
>C : Symbol(E.C, Decl(localTypes1.ts, 108, 17))
        }
        class C {
>C : Symbol(C, Decl(localTypes1.ts, 109, 9))

            x: E;
>x : Symbol(C.x, Decl(localTypes1.ts, 110, 17))
>E : Symbol(E, Decl(localTypes1.ts, 106, 13))
        }
        return new C();
>C : Symbol(C, Decl(localTypes1.ts, 109, 9))
    }
}

function f6() {
>f6 : Symbol(f6, Decl(localTypes1.ts, 115, 1))

    class A {
>A : Symbol(A, Decl(localTypes1.ts, 117, 15))

        a: string;
>a : Symbol(A.a, Decl(localTypes1.ts, 118, 13))
    }
    function g() {
>g : Symbol(g, Decl(localTypes1.ts, 120, 5))

        class B extends A {
>B : Symbol(B, Decl(localTypes1.ts, 121, 18))
>A : Symbol(A, Decl(localTypes1.ts, 117, 15))

            b: string;
>b : Symbol(B.b, Decl(localTypes1.ts, 122, 27))
        }
        function h() {
>h : Symbol(h, Decl(localTypes1.ts, 124, 9))

            class C extends B {
>C : Symbol(C, Decl(localTypes1.ts, 125, 22))
>B : Symbol(B, Decl(localTypes1.ts, 121, 18))

                c: string;
>c : Symbol(C.c, Decl(localTypes1.ts, 126, 31))
            }
            var x = new C();
>x : Symbol(x, Decl(localTypes1.ts, 129, 15))
>C : Symbol(C, Decl(localTypes1.ts, 125, 22))

            x.a = "a";
>x.a : Symbol(A.a, Decl(localTypes1.ts, 118, 13))
>x : Symbol(x, Decl(localTypes1.ts, 129, 15))
>a : Symbol(A.a, Decl(localTypes1.ts, 118, 13))

            x.b = "b";
>x.b : Symbol(B.b, Decl(localTypes1.ts, 122, 27))
>x : Symbol(x, Decl(localTypes1.ts, 129, 15))
>b : Symbol(B.b, Decl(localTypes1.ts, 122, 27))

            x.c = "c";
>x.c : Symbol(C.c, Decl(localTypes1.ts, 126, 31))
>x : Symbol(x, Decl(localTypes1.ts, 129, 15))
>c : Symbol(C.c, Decl(localTypes1.ts, 126, 31))

            return x;
>x : Symbol(x, Decl(localTypes1.ts, 129, 15))
        }
        return h();
>h : Symbol(h, Decl(localTypes1.ts, 124, 9))
    }
    return g();
>g : Symbol(g, Decl(localTypes1.ts, 120, 5))
}

