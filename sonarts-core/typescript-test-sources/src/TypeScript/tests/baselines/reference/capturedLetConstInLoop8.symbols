=== tests/cases/compiler/capturedLetConstInLoop8.ts ===
function foo() {
>foo : Symbol(foo, Decl(capturedLetConstInLoop8.ts, 0, 0))

    l0:
    for (let z = 0; z < 1; ++z) {
>z : Symbol(z, Decl(capturedLetConstInLoop8.ts, 2, 12))
>z : Symbol(z, Decl(capturedLetConstInLoop8.ts, 2, 12))
>z : Symbol(z, Decl(capturedLetConstInLoop8.ts, 2, 12))

        l1:
        for (let x = 0; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

            ll1:
            for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 6, 20))
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 6, 20))
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 6, 20))

                (function() { return x + y });
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 6, 20))

                (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 6, 20))

                if (y == 1) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 6, 20))

                    break;
                }
                if (y == 1) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 6, 20))

                    break l1;
                }
                if (y == 1) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 6, 20))

                    break ll1;
                }
                if (y == 1) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 6, 20))

                    continue l0;
                }

                if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                    continue;
                }
                if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                    continue l1;
                }
                if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                    continue ll1;
                }
                if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                    return "123"
                }
                if (x == 3) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                    return;
                }
            }
            if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                break;
            }
            if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                break l1;
            }
            if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                continue;
            }
            if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                continue l1;
            }
            if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                continue l0;
            }
            if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                return "456";
            }
            if (x == 3) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 4, 16))

                return;
            }
        }
    }
}

function foo_c() {
>foo_c : Symbol(foo_c, Decl(capturedLetConstInLoop8.ts, 61, 1))

    l0:
    for (const z = 0; z < 1;) {
>z : Symbol(z, Decl(capturedLetConstInLoop8.ts, 65, 14))
>z : Symbol(z, Decl(capturedLetConstInLoop8.ts, 65, 14))

        l1:
        for (const x = 0; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

            ll1:
            for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 69, 22))
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 69, 22))

                (function() { return x + y });
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 69, 22))

                (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 69, 22))

                if (y == 1) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 69, 22))

                    break;
                }
                if (y == 1) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 69, 22))

                    break l1;
                }
                if (y == 1) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 69, 22))

                    break ll1;
                }
                if (y == 1) {
>y : Symbol(y, Decl(capturedLetConstInLoop8.ts, 69, 22))

                    continue l0;
                }

                if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                    continue;
                }
                if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                    continue l1;
                }
                if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                    continue ll1;
                }
                if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                    return "123"
                }
                if (x == 3) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                    return;
                }
            }
            if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                break;
            }
            if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                break l1;
            }
            if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                continue;
            }
            if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                continue l1;
            }
            if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                continue l0;
            }
            if (x == 2) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                return "456";
            }
            if (x == 3) {
>x : Symbol(x, Decl(capturedLetConstInLoop8.ts, 67, 18))

                return;
            }
        }
    }
}

