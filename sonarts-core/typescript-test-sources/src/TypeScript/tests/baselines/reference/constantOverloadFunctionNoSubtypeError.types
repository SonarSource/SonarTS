=== tests/cases/compiler/constantOverloadFunctionNoSubtypeError.ts ===
class Base { foo() { } }
>Base : Base
>foo : () => void

class Derived1 extends Base { bar() { } }
>Derived1 : Derived1
>Base : Base
>bar : () => void

class Derived2 extends Base { baz() { } }
>Derived2 : Derived2
>Base : Base
>baz : () => void

class Derived3 extends Base { biz() { } }
>Derived3 : Derived3
>Base : Base
>biz : () => void

function foo(tagName: 'canvas'): Derived3;
>foo : { (tagName: "canvas"): Derived3; (tagName: "div"): Derived2; (tagName: "span"): Derived1; (tagName: number): Base; }
>tagName : "canvas"
>Derived3 : Derived3

function foo(tagName:  'div'): Derived2;
>foo : { (tagName: "canvas"): Derived3; (tagName: "div"): Derived2; (tagName: "span"): Derived1; (tagName: number): Base; }
>tagName : "div"
>Derived2 : Derived2

function foo(tagName: 'span'): Derived1;
>foo : { (tagName: "canvas"): Derived3; (tagName: "div"): Derived2; (tagName: "span"): Derived1; (tagName: number): Base; }
>tagName : "span"
>Derived1 : Derived1

function foo(tagName: number): Base;
>foo : { (tagName: "canvas"): Derived3; (tagName: "div"): Derived2; (tagName: "span"): Derived1; (tagName: number): Base; }
>tagName : number
>Base : Base

function foo(tagName: any): Base {
>foo : { (tagName: "canvas"): Derived3; (tagName: "div"): Derived2; (tagName: "span"): Derived1; (tagName: number): Base; }
>tagName : any
>Base : Base

    return null;
>null : null
}

