=== tests/cases/compiler/compositeGenericFunction.ts ===
function f<T>(value: T) { return value; };
>f : Symbol(f, Decl(compositeGenericFunction.ts, 0, 0))
>T : Symbol(T, Decl(compositeGenericFunction.ts, 0, 11))
>value : Symbol(value, Decl(compositeGenericFunction.ts, 0, 14))
>T : Symbol(T, Decl(compositeGenericFunction.ts, 0, 11))
>value : Symbol(value, Decl(compositeGenericFunction.ts, 0, 14))

function h<R>(func: (x: number) => R): R { return null; }
>h : Symbol(h, Decl(compositeGenericFunction.ts, 0, 42))
>R : Symbol(R, Decl(compositeGenericFunction.ts, 2, 11))
>func : Symbol(func, Decl(compositeGenericFunction.ts, 2, 14))
>x : Symbol(x, Decl(compositeGenericFunction.ts, 2, 21))
>R : Symbol(R, Decl(compositeGenericFunction.ts, 2, 11))
>R : Symbol(R, Decl(compositeGenericFunction.ts, 2, 11))

var z: number = h<number>(f);
>z : Symbol(z, Decl(compositeGenericFunction.ts, 4, 3), Decl(compositeGenericFunction.ts, 5, 3))
>h : Symbol(h, Decl(compositeGenericFunction.ts, 0, 42))
>f : Symbol(f, Decl(compositeGenericFunction.ts, 0, 0))

var z: number = h(f);
>z : Symbol(z, Decl(compositeGenericFunction.ts, 4, 3), Decl(compositeGenericFunction.ts, 5, 3))
>h : Symbol(h, Decl(compositeGenericFunction.ts, 0, 42))
>f : Symbol(f, Decl(compositeGenericFunction.ts, 0, 0))

