=== tests/cases/compiler/nestedBlockScopedBindings3.ts ===
function a0() {
>a0 : Symbol(a0, Decl(nestedBlockScopedBindings3.ts, 0, 0))
    {
        for (let x = 0; x < 1; ) {
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 2, 16))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 2, 16))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 2, 16))
        }
    }
    {
        for (let x;;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 7, 16))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 7, 16))
        }
    }
}

function a1() {
>a1 : Symbol(a1, Decl(nestedBlockScopedBindings3.ts, 11, 1))

    for (let x; x < 1;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 14, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 14, 12))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 14, 12))
    }
    for (let x;;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 17, 12))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 17, 12))
    }
}

function a2() {
>a2 : Symbol(a2, Decl(nestedBlockScopedBindings3.ts, 20, 1))

    for (let x; x < 1;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 23, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 23, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 23, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 23, 12))
    }
    for (let x;;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 26, 12))

        x = x + 2;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 26, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 26, 12))
    }
}


function a3() {
>a3 : Symbol(a3, Decl(nestedBlockScopedBindings3.ts, 29, 1))

    for (let x; x < 1;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 33, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 33, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 33, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 33, 12))
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 38, 15))

            break;
    }
}

function a4() {
>a4 : Symbol(a4, Decl(nestedBlockScopedBindings3.ts, 41, 1))

    for (let x; x < 1;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 44, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 44, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 44, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 44, 12))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 44, 12))
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 50, 15))

            break;
    }
}


function a5() {
>a5 : Symbol(a5, Decl(nestedBlockScopedBindings3.ts, 53, 1))

    for (let x; x < 1;) {
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 57, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 57, 12))

        x = x + 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 57, 12))
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 57, 12))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 57, 12))
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 63, 15))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings3.ts, 63, 15))

            break;
    }
}
