=== tests/cases/compiler/enumOperations.ts ===
enum Enum { None = 0 }
>Enum : Symbol(Enum, Decl(enumOperations.ts, 0, 0))
>None : Symbol(Enum.None, Decl(enumOperations.ts, 0, 11))

var enumType: Enum = Enum.None;
>enumType : Symbol(enumType, Decl(enumOperations.ts, 1, 3))
>Enum : Symbol(Enum, Decl(enumOperations.ts, 0, 0))
>Enum.None : Symbol(Enum.None, Decl(enumOperations.ts, 0, 11))
>Enum : Symbol(Enum, Decl(enumOperations.ts, 0, 0))
>None : Symbol(Enum.None, Decl(enumOperations.ts, 0, 11))

var numberType: number = 0;
>numberType : Symbol(numberType, Decl(enumOperations.ts, 2, 3))

var anyType: any = 0;
>anyType : Symbol(anyType, Decl(enumOperations.ts, 3, 3))
 
enumType ^ numberType;
>enumType : Symbol(enumType, Decl(enumOperations.ts, 1, 3))
>numberType : Symbol(numberType, Decl(enumOperations.ts, 2, 3))

numberType ^ anyType;
>numberType : Symbol(numberType, Decl(enumOperations.ts, 2, 3))
>anyType : Symbol(anyType, Decl(enumOperations.ts, 3, 3))
 
enumType & anyType;
>enumType : Symbol(enumType, Decl(enumOperations.ts, 1, 3))
>anyType : Symbol(anyType, Decl(enumOperations.ts, 3, 3))

enumType | anyType;
>enumType : Symbol(enumType, Decl(enumOperations.ts, 1, 3))
>anyType : Symbol(anyType, Decl(enumOperations.ts, 3, 3))

enumType ^ anyType;
>enumType : Symbol(enumType, Decl(enumOperations.ts, 1, 3))
>anyType : Symbol(anyType, Decl(enumOperations.ts, 3, 3))

~anyType;
>anyType : Symbol(anyType, Decl(enumOperations.ts, 3, 3))

enumType <<anyType;
>enumType : Symbol(enumType, Decl(enumOperations.ts, 1, 3))
>anyType : Symbol(anyType, Decl(enumOperations.ts, 3, 3))

enumType >>anyType;
>enumType : Symbol(enumType, Decl(enumOperations.ts, 1, 3))
>anyType : Symbol(anyType, Decl(enumOperations.ts, 3, 3))

enumType >>>anyType;
>enumType : Symbol(enumType, Decl(enumOperations.ts, 1, 3))
>anyType : Symbol(anyType, Decl(enumOperations.ts, 3, 3))

