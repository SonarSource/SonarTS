=== tests/cases/compiler/fallbackToBindingPatternForTypeInference.ts ===
declare function trans<T>(f: (x: T) => string): number;
>trans : Symbol(trans, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 0))
>T : Symbol(T, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 23))
>f : Symbol(f, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 26))
>x : Symbol(x, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 30))
>T : Symbol(T, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 23))

trans(({a}) => a);
>trans : Symbol(trans, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 0))
>a : Symbol(a, Decl(fallbackToBindingPatternForTypeInference.ts, 1, 8))
>a : Symbol(a, Decl(fallbackToBindingPatternForTypeInference.ts, 1, 8))

trans(([b,c]) => 'foo');
>trans : Symbol(trans, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 0))
>b : Symbol(b, Decl(fallbackToBindingPatternForTypeInference.ts, 2, 8))
>c : Symbol(c, Decl(fallbackToBindingPatternForTypeInference.ts, 2, 10))

trans(({d: [e,f]}) => 'foo');
>trans : Symbol(trans, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 0))
>e : Symbol(e, Decl(fallbackToBindingPatternForTypeInference.ts, 3, 12))
>f : Symbol(f, Decl(fallbackToBindingPatternForTypeInference.ts, 3, 14))

trans(([{g},{h}]) => 'foo');
>trans : Symbol(trans, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 0))
>g : Symbol(g, Decl(fallbackToBindingPatternForTypeInference.ts, 4, 9))
>h : Symbol(h, Decl(fallbackToBindingPatternForTypeInference.ts, 4, 13))

trans(({a, b = 10}) => a);
>trans : Symbol(trans, Decl(fallbackToBindingPatternForTypeInference.ts, 0, 0))
>a : Symbol(a, Decl(fallbackToBindingPatternForTypeInference.ts, 5, 8))
>b : Symbol(b, Decl(fallbackToBindingPatternForTypeInference.ts, 5, 10))
>a : Symbol(a, Decl(fallbackToBindingPatternForTypeInference.ts, 5, 8))

