=== tests/cases/compiler/declarationEmitDestructuring1.ts ===
function foo([a, b, c]: [string, string, string]): void { }
>foo : Symbol(foo, Decl(declarationEmitDestructuring1.ts, 0, 0))
>a : Symbol(a, Decl(declarationEmitDestructuring1.ts, 0, 14))
>b : Symbol(b, Decl(declarationEmitDestructuring1.ts, 0, 16))
>c : Symbol(c, Decl(declarationEmitDestructuring1.ts, 0, 19))

function far([a, [b], [[c]]]: [number, boolean[], string[][]]): void { }
>far : Symbol(far, Decl(declarationEmitDestructuring1.ts, 0, 59))
>a : Symbol(a, Decl(declarationEmitDestructuring1.ts, 1, 14))
>b : Symbol(b, Decl(declarationEmitDestructuring1.ts, 1, 18))
>c : Symbol(c, Decl(declarationEmitDestructuring1.ts, 1, 24))

function bar({a1, b1, c1}: { a1: number, b1: boolean, c1: string }): void { }
>bar : Symbol(bar, Decl(declarationEmitDestructuring1.ts, 1, 72))
>a1 : Symbol(a1, Decl(declarationEmitDestructuring1.ts, 2, 14))
>b1 : Symbol(b1, Decl(declarationEmitDestructuring1.ts, 2, 17))
>c1 : Symbol(c1, Decl(declarationEmitDestructuring1.ts, 2, 21))
>a1 : Symbol(a1, Decl(declarationEmitDestructuring1.ts, 2, 28))
>b1 : Symbol(b1, Decl(declarationEmitDestructuring1.ts, 2, 40))
>c1 : Symbol(c1, Decl(declarationEmitDestructuring1.ts, 2, 53))

function baz({a2, b2: {b1, c1}}: { a2: number, b2: { b1: boolean, c1: string } }): void { } 
>baz : Symbol(baz, Decl(declarationEmitDestructuring1.ts, 2, 77))
>a2 : Symbol(a2, Decl(declarationEmitDestructuring1.ts, 3, 14))
>b2 : Symbol(b2, Decl(declarationEmitDestructuring1.ts, 3, 46))
>b1 : Symbol(b1, Decl(declarationEmitDestructuring1.ts, 3, 23))
>c1 : Symbol(c1, Decl(declarationEmitDestructuring1.ts, 3, 26))
>a2 : Symbol(a2, Decl(declarationEmitDestructuring1.ts, 3, 34))
>b2 : Symbol(b2, Decl(declarationEmitDestructuring1.ts, 3, 46))
>b1 : Symbol(b1, Decl(declarationEmitDestructuring1.ts, 3, 52))
>c1 : Symbol(c1, Decl(declarationEmitDestructuring1.ts, 3, 65))

