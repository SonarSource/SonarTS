=== tests/cases/conformance/types/typeRelationships/recursiveTypes/infiniteExpansionThroughTypeInference.ts ===
interface G<T> {
>G : G<T>
>T : T

    x: G<G<T>> // infinitely expanding type reference
>x : G<G<T>>
>G : G<T>
>G : G<T>
>T : T

    y: T
>y : T
>T : T
}

function ff<T>(g: G<T>): void {
>ff : <T>(g: G<T>) => void
>T : T
>g : G<T>
>G : G<T>
>T : T

    ff(g) // when infering T here we need to make sure to not descend into the structure of G<T> infinitely
>ff(g) : void
>ff : <T>(g: G<T>) => void
>g : G<T>
}


