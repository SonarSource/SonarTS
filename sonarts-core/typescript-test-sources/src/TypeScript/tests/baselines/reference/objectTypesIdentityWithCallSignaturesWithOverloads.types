=== tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignaturesWithOverloads.ts ===
// object types are identical structurally

class A {
>A : A

    foo(x: number): number;
>foo : { (x: number): number; (x: string): string; }
>x : number

    foo(x: string): string;
>foo : { (x: number): number; (x: string): string; }
>x : string

    foo(x: any): any { return null; }
>foo : { (x: number): number; (x: string): string; }
>x : any
>null : null
}

class B {
>B : B

    foo(x: number): number;
>foo : { (x: number): number; (x: string): string; }
>x : number

    foo(x: string): string;
>foo : { (x: number): number; (x: string): string; }
>x : string

    foo(x: any): any { return null; }
>foo : { (x: number): number; (x: string): string; }
>x : any
>null : null
}

class C<T> {
>C : C<T>
>T : T

    foo(x: number): number;
>foo : { (x: number): number; (x: string): string; (x: T): T; }
>x : number

    foo(x: string): string;
>foo : { (x: number): number; (x: string): string; (x: T): T; }
>x : string

    foo(x: T): T;
>foo : { (x: number): number; (x: string): string; (x: T): T; }
>x : T
>T : T
>T : T

    foo(x: any): any { return null; }
>foo : { (x: number): number; (x: string): string; (x: T): T; }
>x : any
>null : null
}

interface I {
>I : I

    foo(x: number): number;
>foo : { (x: number): number; (x: string): string; }
>x : number

    foo(x: string): string;    
>foo : { (x: number): number; (x: string): string; }
>x : string
}

interface I2<T> {
>I2 : I2<T>
>T : T

    foo(x: number): number;
>foo : { (x: number): number; (x: string): string; (x: T): T; }
>x : number

    foo(x: string): string;
>foo : { (x: number): number; (x: string): string; (x: T): T; }
>x : string

    foo(x: T): T;
>foo : { (x: number): number; (x: string): string; (x: T): T; }
>x : T
>T : T
>T : T
}

var a: {
>a : { foo(x: number): number; foo(x: string): string; }

    foo(x: number): number
>foo : { (x: number): number; (x: string): string; }
>x : number

    foo(x: string): string
>foo : { (x: number): number; (x: string): string; }
>x : string
}

var b = {
>b : { foo(x: any): any; }
>{    foo(x: any) { return <any>''; }} : { foo(x: any): any; }

    foo(x: any) { return <any>''; }
>foo : (x: any) => any
>x : any
><any>'' : any
>'' : ""

};

function foo1(x: A);
>foo1 : { (x: A): any; (x: A): any; }
>x : A
>A : A

function foo1(x: A); // error
>foo1 : { (x: A): any; (x: A): any; }
>x : A
>A : A

function foo1(x: any) { }
>foo1 : { (x: A): any; (x: A): any; }
>x : any

function foo1b(x: B);
>foo1b : { (x: B): any; (x: B): any; }
>x : B
>B : B

function foo1b(x: B); // error
>foo1b : { (x: B): any; (x: B): any; }
>x : B
>B : B

function foo1b(x: any) { }
>foo1b : { (x: B): any; (x: B): any; }
>x : any

function foo1c(x: C<string>);
>foo1c : { (x: C<string>): any; (x: C<string>): any; }
>x : C<string>
>C : C<T>

function foo1c(x: C<string>); // error
>foo1c : { (x: C<string>): any; (x: C<string>): any; }
>x : C<string>
>C : C<T>

function foo1c(x: any) { }
>foo1c : { (x: C<string>): any; (x: C<string>): any; }
>x : any

function foo2(x: I);
>foo2 : { (x: I): any; (x: I): any; }
>x : I
>I : I

function foo2(x: I); // error
>foo2 : { (x: I): any; (x: I): any; }
>x : I
>I : I

function foo2(x: any) { }
>foo2 : { (x: I): any; (x: I): any; }
>x : any

function foo3(x: typeof a);
>foo3 : { (x: { foo(x: number): number; foo(x: string): string; }): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : { foo(x: number): number; foo(x: string): string; }
>a : { foo(x: number): number; foo(x: string): string; }

function foo3(x: typeof a); // error
>foo3 : { (x: { foo(x: number): number; foo(x: string): string; }): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : { foo(x: number): number; foo(x: string): string; }
>a : { foo(x: number): number; foo(x: string): string; }

function foo3(x: any) { }
>foo3 : { (x: { foo(x: number): number; foo(x: string): string; }): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : any

function foo4(x: typeof b);
>foo4 : { (x: { foo(x: any): any; }): any; (x: { foo(x: any): any; }): any; }
>x : { foo(x: any): any; }
>b : { foo(x: any): any; }

function foo4(x: typeof b); // error
>foo4 : { (x: { foo(x: any): any; }): any; (x: { foo(x: any): any; }): any; }
>x : { foo(x: any): any; }
>b : { foo(x: any): any; }

function foo4(x: any) { }
>foo4 : { (x: { foo(x: any): any; }): any; (x: { foo(x: any): any; }): any; }
>x : any

function foo5(x: A);
>foo5 : { (x: A): any; (x: B): any; }
>x : A
>A : A

function foo5(x: B); // error
>foo5 : { (x: A): any; (x: B): any; }
>x : B
>B : B

function foo5(x: any) { }
>foo5 : { (x: A): any; (x: B): any; }
>x : any

function foo5b(x: A);
>foo5b : { (x: A): any; (x: C<string>): any; }
>x : A
>A : A

function foo5b(x: C<string>); // ok
>foo5b : { (x: A): any; (x: C<string>): any; }
>x : C<string>
>C : C<T>

function foo5b(x: any) { }
>foo5b : { (x: A): any; (x: C<string>): any; }
>x : any

function foo6(x: A);
>foo6 : { (x: A): any; (x: I): any; }
>x : A
>A : A

function foo6(x: I); // BUG 831930
>foo6 : { (x: A): any; (x: I): any; }
>x : I
>I : I

function foo6(x: any) { }
>foo6 : { (x: A): any; (x: I): any; }
>x : any

function foo7(x: A);
>foo7 : { (x: A): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : A
>A : A

function foo7(x: typeof a); // BUG 831930
>foo7 : { (x: A): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : { foo(x: number): number; foo(x: string): string; }
>a : { foo(x: number): number; foo(x: string): string; }

function foo7(x: any) { }
>foo7 : { (x: A): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : any

function foo8(x: B);
>foo8 : { (x: B): any; (x: I): any; }
>x : B
>B : B

function foo8(x: I); // BUG 831930
>foo8 : { (x: B): any; (x: I): any; }
>x : I
>I : I

function foo8(x: any) { }
>foo8 : { (x: B): any; (x: I): any; }
>x : any

function foo9(x: B);
>foo9 : { (x: B): any; (x: C<string>): any; }
>x : B
>B : B

function foo9(x: C<string>); // ok
>foo9 : { (x: B): any; (x: C<string>): any; }
>x : C<string>
>C : C<T>

function foo9(x: any) { }
>foo9 : { (x: B): any; (x: C<string>): any; }
>x : any

function foo10(x: B);
>foo10 : { (x: B): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : B
>B : B

function foo10(x: typeof a); // BUG 831930
>foo10 : { (x: B): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : { foo(x: number): number; foo(x: string): string; }
>a : { foo(x: number): number; foo(x: string): string; }

function foo10(x: any) { }
>foo10 : { (x: B): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : any

function foo11(x: B);
>foo11 : { (x: B): any; (x: { foo(x: any): any; }): any; }
>x : B
>B : B

function foo11(x: typeof b); // ok
>foo11 : { (x: B): any; (x: { foo(x: any): any; }): any; }
>x : { foo(x: any): any; }
>b : { foo(x: any): any; }

function foo11(x: any) { }
>foo11 : { (x: B): any; (x: { foo(x: any): any; }): any; }
>x : any

function foo12(x: I);
>foo12 : { (x: I): any; (x: C<string>): any; }
>x : I
>I : I

function foo12(x: C<string>); // ok
>foo12 : { (x: I): any; (x: C<string>): any; }
>x : C<string>
>C : C<T>

function foo12(x: any) { }
>foo12 : { (x: I): any; (x: C<string>): any; }
>x : any

function foo12b(x: I2<string>);
>foo12b : { (x: I2<string>): any; (x: C<string>): any; }
>x : I2<string>
>I2 : I2<T>

function foo12b(x: C<string>); // ok
>foo12b : { (x: I2<string>): any; (x: C<string>): any; }
>x : C<string>
>C : C<T>

function foo12b(x: any) { }
>foo12b : { (x: I2<string>): any; (x: C<string>): any; }
>x : any

function foo13(x: I);
>foo13 : { (x: I): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : I
>I : I

function foo13(x: typeof a);  // error
>foo13 : { (x: I): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : { foo(x: number): number; foo(x: string): string; }
>a : { foo(x: number): number; foo(x: string): string; }

function foo13(x: any) { }
>foo13 : { (x: I): any; (x: { foo(x: number): number; foo(x: string): string; }): any; }
>x : any

function foo14(x: I);
>foo14 : { (x: I): any; (x: { foo(x: any): any; }): any; }
>x : I
>I : I

function foo14(x: typeof b); // ok
>foo14 : { (x: I): any; (x: { foo(x: any): any; }): any; }
>x : { foo(x: any): any; }
>b : { foo(x: any): any; }

function foo14(x: any) { }
>foo14 : { (x: I): any; (x: { foo(x: any): any; }): any; }
>x : any

function foo15(x: I2<string>);
>foo15 : { (x: I2<string>): any; (x: C<number>): any; }
>x : I2<string>
>I2 : I2<T>

function foo15(x: C<number>); // ok
>foo15 : { (x: I2<string>): any; (x: C<number>): any; }
>x : C<number>
>C : C<T>

function foo15(x: any) { }
>foo15 : { (x: I2<string>): any; (x: C<number>): any; }
>x : any

