=== tests/cases/compiler/typeParameterCompatibilityAccrossDeclarations.ts ===
var a = {
>a : Symbol(a, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 0, 3))

   x: function <T>(y: T): T { return null; }
>x : Symbol(x, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 0, 9))
>T : Symbol(T, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 1, 16))
>y : Symbol(y, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 1, 19))
>T : Symbol(T, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 1, 16))
>T : Symbol(T, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 1, 16))
}
var a2 = {
>a2 : Symbol(a2, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 3, 3))

   x: function (y: any): any { return null; }
>x : Symbol(x, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 3, 10))
>y : Symbol(y, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 4, 16))
}
export interface I {
>I : Symbol(I, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 5, 1))

   x<T>(y: T): T;
>x : Symbol(I.x, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 6, 20))
>T : Symbol(T, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 7, 5))
>y : Symbol(y, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 7, 8))
>T : Symbol(T, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 7, 5))
>T : Symbol(T, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 7, 5))
}
export interface I2 {
>I2 : Symbol(I2, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 8, 1))

   x(y: any): any;
>x : Symbol(I2.x, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 9, 21))
>y : Symbol(y, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 10, 5))
}
 
var i: I;
>i : Symbol(i, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 13, 3))
>I : Symbol(I, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 5, 1))

var i2: I2;
>i2 : Symbol(i2, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 14, 3))
>I2 : Symbol(I2, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 8, 1))
 
a = i; // error
>a : Symbol(a, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 0, 3))
>i : Symbol(i, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 13, 3))

i = a; // error
>i : Symbol(i, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 13, 3))
>a : Symbol(a, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 0, 3))
 
a2 = i2; // no error
>a2 : Symbol(a2, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 3, 3))
>i2 : Symbol(i2, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 14, 3))

i2 = a2; // no error
>i2 : Symbol(i2, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 14, 3))
>a2 : Symbol(a2, Decl(typeParameterCompatibilityAccrossDeclarations.ts, 3, 3))

