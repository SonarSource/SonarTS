=== tests/cases/compiler/modularizeLibrary_NoErrorDuplicateLibOptions1.ts ===
// Using Es6 array
function f(x: number, y: number, z: number) {
>f : (x: number, y: number, z: number) => any[]
>x : number
>y : number
>z : number

    return Array.from(arguments);
>Array.from(arguments) : any[]
>Array.from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>Array : ArrayConstructor
>from : { <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(iterable: Iterable<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(iterable: Iterable<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(iterable: Iterable<T>): T[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U): U[]; <T, U>(arrayLike: ArrayLike<T>, mapfn: (this: void, v: T, k: number) => U, thisArg: undefined): U[]; <Z, T, U>(arrayLike: ArrayLike<T>, mapfn: (this: Z, v: T, k: number) => U, thisArg: Z): U[]; <T>(arrayLike: ArrayLike<T>): T[]; }
>arguments : IArguments
}

f(1, 2, 3);  // no error
>f(1, 2, 3) : any[]
>f : (x: number, y: number, z: number) => any[]
>1 : 1
>2 : 2
>3 : 3

// Using ES6 collection
var m = new Map<string, number>();
>m : Map<string, number>
>new Map<string, number>() : Map<string, number>
>Map : MapConstructor

m.clear();
>m.clear() : void
>m.clear : () => void
>m : Map<string, number>
>clear : () => void

// Using ES6 iterable
m.keys();
>m.keys() : IterableIterator<string>
>m.keys : () => IterableIterator<string>
>m : Map<string, number>
>keys : () => IterableIterator<string>

// Using ES6 function
function Baz() { }
>Baz : () => void

Baz.name;
>Baz.name : string
>Baz : () => void
>name : string

// Using ES6 generator
function* gen() {
>gen : () => IterableIterator<number>

    let i = 0;
>i : number
>0 : 0

    while (i < 10) {
>i < 10 : boolean
>i : number
>10 : 10

        yield i;
>yield i : any
>i : number

        i++;
>i++ : number
>i : number
    }
}

function* gen2() {
>gen2 : () => IterableIterator<number>

    let i = 0;
>i : number
>0 : 0

    while (i < 10) {
>i < 10 : boolean
>i : number
>10 : 10

        yield i;
>yield i : any
>i : number

        i++;
>i++ : number
>i : number
    }
}

// Using ES6 math
Math.sign(1);
>Math.sign(1) : number
>Math.sign : (x: number) => number
>Math : Math
>sign : (x: number) => number
>1 : 1

// Using ES6 object
var o = {
>o : { a: number; [Symbol.hasInstance](value: any): boolean; }
>{    a: 2,    [Symbol.hasInstance](value: any) {        return false;    }} : { a: number; [Symbol.hasInstance](value: any): boolean; }

    a: 2,
>a : number
>2 : 2

    [Symbol.hasInstance](value: any) {
>Symbol.hasInstance : symbol
>Symbol : SymbolConstructor
>hasInstance : symbol
>value : any

        return false;
>false : false
    }
};
o.hasOwnProperty(Symbol.hasInstance);
>o.hasOwnProperty(Symbol.hasInstance) : boolean
>o.hasOwnProperty : { (v: PropertyKey): boolean; (v: string): boolean; }
>o : { a: number; [Symbol.hasInstance](value: any): boolean; }
>hasOwnProperty : { (v: PropertyKey): boolean; (v: string): boolean; }
>Symbol.hasInstance : symbol
>Symbol : SymbolConstructor
>hasInstance : symbol

// Using ES6 promise
async function out() {
>out : () => Promise<{}>

    return new Promise(function (resolve, reject) {});
>new Promise(function (resolve, reject) {}) : Promise<{}>
>Promise : PromiseConstructor
>function (resolve, reject) {} : (resolve: (value?: {} | PromiseLike<{}>) => void, reject: (reason?: any) => void) => void
>resolve : (value?: {} | PromiseLike<{}>) => void
>reject : (reason?: any) => void
}

declare var console: any;
>console : any

out().then(() => {
>out().then(() => {    console.log("Yea!");}) : Promise<void>
>out().then : <TResult1 = {}, TResult2 = never>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>out() : Promise<{}>
>out : () => Promise<{}>
>then : <TResult1 = {}, TResult2 = never>(onfulfilled?: (value: {}) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>
>() => {    console.log("Yea!");} : () => void

    console.log("Yea!");
>console.log("Yea!") : any
>console.log : any
>console : any
>log : any
>"Yea!" : "Yea!"

});

// Using Es6 proxy
var t = {}
>t : {}
>{} : {}

var p = new Proxy(t, {});
>p : {}
>new Proxy(t, {}) : {}
>Proxy : ProxyConstructor
>t : {}
>{} : {}

// Using ES6 reflect
Reflect.isExtensible({});
>Reflect.isExtensible({}) : boolean
>Reflect.isExtensible : (target: object) => boolean
>Reflect : typeof Reflect
>isExtensible : (target: object) => boolean
>{} : {}

// Using Es6 regexp
var reg = new RegExp("/s");
>reg : RegExp
>new RegExp("/s") : RegExp
>RegExp : RegExpConstructor
>"/s" : "/s"

reg.flags;
>reg.flags : string
>reg : RegExp
>flags : string

// Using ES6 string
var str = "Hello world";
>str : string
>"Hello world" : "Hello world"

str.includes("hello", 0);
>str.includes("hello", 0) : boolean
>str.includes : (searchString: string, position?: number) => boolean
>str : string
>includes : (searchString: string, position?: number) => boolean
>"hello" : "hello"
>0 : 0

// Using ES6 symbol
var s = Symbol();
>s : symbol
>Symbol() : symbol
>Symbol : SymbolConstructor

// Using ES6 wellknown-symbol
const o1 = {
>o1 : { [Symbol.hasInstance](value: any): boolean; }
>{    [Symbol.hasInstance](value: any) {        return false;    }} : { [Symbol.hasInstance](value: any): boolean; }

    [Symbol.hasInstance](value: any) {
>Symbol.hasInstance : symbol
>Symbol : SymbolConstructor
>hasInstance : symbol
>value : any

        return false;
>false : false
    }
}
