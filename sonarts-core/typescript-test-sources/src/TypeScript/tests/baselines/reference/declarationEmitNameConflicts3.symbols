=== tests/cases/compiler/declarationEmitNameConflicts3.ts ===
module M {
>M : Symbol(M, Decl(declarationEmitNameConflicts3.ts, 0, 0), Decl(declarationEmitNameConflicts3.ts, 11, 1))

    export interface D { }
>D : Symbol(D, Decl(declarationEmitNameConflicts3.ts, 0, 10), Decl(declarationEmitNameConflicts3.ts, 1, 26))

    export module D {
>D : Symbol(D, Decl(declarationEmitNameConflicts3.ts, 0, 10), Decl(declarationEmitNameConflicts3.ts, 1, 26))

        export function f() { }
>f : Symbol(f, Decl(declarationEmitNameConflicts3.ts, 2, 21))
    }
    export module C {
>C : Symbol(C, Decl(declarationEmitNameConflicts3.ts, 4, 5))

        export function f() { }
>f : Symbol(f, Decl(declarationEmitNameConflicts3.ts, 5, 21))
    }
    export module E {
>E : Symbol(E, Decl(declarationEmitNameConflicts3.ts, 7, 5))

        export function f() { }
>f : Symbol(f, Decl(declarationEmitNameConflicts3.ts, 8, 21))
    }
}

module M.P {
>M : Symbol(M, Decl(declarationEmitNameConflicts3.ts, 0, 0), Decl(declarationEmitNameConflicts3.ts, 11, 1))
>P : Symbol(P, Decl(declarationEmitNameConflicts3.ts, 13, 9))

    export class C {
>C : Symbol(C, Decl(declarationEmitNameConflicts3.ts, 13, 12))

        static f() { }
>f : Symbol(C.f, Decl(declarationEmitNameConflicts3.ts, 14, 20))
    }
    export class E extends C { }
>E : Symbol(E, Decl(declarationEmitNameConflicts3.ts, 16, 5))
>C : Symbol(C, Decl(declarationEmitNameConflicts3.ts, 13, 12))

    export enum D {
>D : Symbol(D, Decl(declarationEmitNameConflicts3.ts, 17, 32))

        f
>f : Symbol(D.f, Decl(declarationEmitNameConflicts3.ts, 18, 19))
    }
    export var v: M.D; // ok
>v : Symbol(v, Decl(declarationEmitNameConflicts3.ts, 21, 14))
>M : Symbol(M, Decl(declarationEmitNameConflicts3.ts, 0, 0), Decl(declarationEmitNameConflicts3.ts, 11, 1))
>D : Symbol(D, Decl(declarationEmitNameConflicts3.ts, 0, 10), Decl(declarationEmitNameConflicts3.ts, 1, 26))

    export var w = M.D.f; // error, should be typeof M.D.f
>w : Symbol(w, Decl(declarationEmitNameConflicts3.ts, 22, 14))
>M.D.f : Symbol(M.D.f, Decl(declarationEmitNameConflicts3.ts, 2, 21))
>M.D : Symbol(D, Decl(declarationEmitNameConflicts3.ts, 0, 10), Decl(declarationEmitNameConflicts3.ts, 1, 26))
>M : Symbol(M, Decl(declarationEmitNameConflicts3.ts, 0, 0), Decl(declarationEmitNameConflicts3.ts, 11, 1))
>D : Symbol(D, Decl(declarationEmitNameConflicts3.ts, 0, 10), Decl(declarationEmitNameConflicts3.ts, 1, 26))
>f : Symbol(M.D.f, Decl(declarationEmitNameConflicts3.ts, 2, 21))

    export var x = M.C.f; // error, should be typeof M.C.f
>x : Symbol(x, Decl(declarationEmitNameConflicts3.ts, 23, 14), Decl(declarationEmitNameConflicts3.ts, 24, 14))
>M.C.f : Symbol(C.f, Decl(declarationEmitNameConflicts3.ts, 5, 21))
>M.C : Symbol(C, Decl(declarationEmitNameConflicts3.ts, 4, 5))
>M : Symbol(M, Decl(declarationEmitNameConflicts3.ts, 0, 0), Decl(declarationEmitNameConflicts3.ts, 11, 1))
>C : Symbol(C, Decl(declarationEmitNameConflicts3.ts, 4, 5))
>f : Symbol(C.f, Decl(declarationEmitNameConflicts3.ts, 5, 21))

    export var x = M.E.f; // error, should be typeof M.E.f
>x : Symbol(x, Decl(declarationEmitNameConflicts3.ts, 23, 14), Decl(declarationEmitNameConflicts3.ts, 24, 14))
>M.E.f : Symbol(E.f, Decl(declarationEmitNameConflicts3.ts, 8, 21))
>M.E : Symbol(E, Decl(declarationEmitNameConflicts3.ts, 7, 5))
>M : Symbol(M, Decl(declarationEmitNameConflicts3.ts, 0, 0), Decl(declarationEmitNameConflicts3.ts, 11, 1))
>E : Symbol(E, Decl(declarationEmitNameConflicts3.ts, 7, 5))
>f : Symbol(E.f, Decl(declarationEmitNameConflicts3.ts, 8, 21))
}
