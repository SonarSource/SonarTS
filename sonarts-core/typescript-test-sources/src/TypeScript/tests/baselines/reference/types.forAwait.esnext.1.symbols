=== tests/cases/conformance/types/forAwait/types.forAwait.esnext.1.ts ===
declare const asyncIterable: AsyncIterable<number>;
>asyncIterable : Symbol(asyncIterable, Decl(types.forAwait.esnext.1.ts, 0, 13))
>AsyncIterable : Symbol(AsyncIterable, Decl(lib.esnext.asynciterable.d.ts, --, --))

declare const iterable: Iterable<number>;
>iterable : Symbol(iterable, Decl(types.forAwait.esnext.1.ts, 1, 13))
>Iterable : Symbol(Iterable, Decl(lib.es2015.iterable.d.ts, --, --))

async function f1() {
>f1 : Symbol(f1, Decl(types.forAwait.esnext.1.ts, 1, 41))

    let y: number;
>y : Symbol(y, Decl(types.forAwait.esnext.1.ts, 3, 7))

    for await (const x of asyncIterable) {
>x : Symbol(x, Decl(types.forAwait.esnext.1.ts, 4, 20))
>asyncIterable : Symbol(asyncIterable, Decl(types.forAwait.esnext.1.ts, 0, 13))
    }
    for await (const x of iterable) {
>x : Symbol(x, Decl(types.forAwait.esnext.1.ts, 6, 20))
>iterable : Symbol(iterable, Decl(types.forAwait.esnext.1.ts, 1, 13))
    }
    for await (y of asyncIterable) {
>y : Symbol(y, Decl(types.forAwait.esnext.1.ts, 3, 7))
>asyncIterable : Symbol(asyncIterable, Decl(types.forAwait.esnext.1.ts, 0, 13))
    }
    for await (y of iterable) {
>y : Symbol(y, Decl(types.forAwait.esnext.1.ts, 3, 7))
>iterable : Symbol(iterable, Decl(types.forAwait.esnext.1.ts, 1, 13))
    }
}
async function * f2() {
>f2 : Symbol(f2, Decl(types.forAwait.esnext.1.ts, 12, 1))

    let y: number;
>y : Symbol(y, Decl(types.forAwait.esnext.1.ts, 14, 7))

    for await (const x of asyncIterable) {
>x : Symbol(x, Decl(types.forAwait.esnext.1.ts, 15, 20))
>asyncIterable : Symbol(asyncIterable, Decl(types.forAwait.esnext.1.ts, 0, 13))
    }
    for await (const x of iterable) {
>x : Symbol(x, Decl(types.forAwait.esnext.1.ts, 17, 20))
>iterable : Symbol(iterable, Decl(types.forAwait.esnext.1.ts, 1, 13))
    }
    for await (y of asyncIterable) {
>y : Symbol(y, Decl(types.forAwait.esnext.1.ts, 14, 7))
>asyncIterable : Symbol(asyncIterable, Decl(types.forAwait.esnext.1.ts, 0, 13))
    }
    for await (y of iterable) {
>y : Symbol(y, Decl(types.forAwait.esnext.1.ts, 14, 7))
>iterable : Symbol(iterable, Decl(types.forAwait.esnext.1.ts, 1, 13))
    }
}
