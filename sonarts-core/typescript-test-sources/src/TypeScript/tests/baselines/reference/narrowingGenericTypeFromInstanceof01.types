=== tests/cases/conformance/types/typeRelationships/instanceOf/narrowingGenericTypeFromInstanceof01.ts ===
class A<T> {
>A : A<T>
>T : T

    constructor(private a: string) { }
>a : string
}

class B<T> {
>B : B<T>
>T : T
}

function acceptA<T>(a: A<T>) { }
>acceptA : <T>(a: A<T>) => void
>T : T
>a : A<T>
>A : A<T>
>T : T

function acceptB<T>(b: B<T>) { }
>acceptB : <T>(b: B<T>) => void
>T : T
>b : B<T>
>B : B<T>
>T : T

function test<T>(x: A<T> | B<T>) {
>test : <T>(x: A<T> | B<T>) => void
>T : T
>x : A<T> | B<T>
>A : A<T>
>T : T
>B : B<T>
>T : T

    if (x instanceof B) {
>x instanceof B : boolean
>x : A<T> | B<T>
>B : typeof B

        acceptA(x);
>acceptA(x) : void
>acceptA : <T>(a: A<T>) => void
>x : A<T>
    }

    if (x instanceof A) {
>x instanceof A : boolean
>x : A<T> | B<T>
>A : typeof A

        acceptA(x);
>acceptA(x) : void
>acceptA : <T>(a: A<T>) => void
>x : A<any>
    }

    if (x instanceof B) {
>x instanceof B : boolean
>x : A<T> | B<T>
>B : typeof B

        acceptB(x);
>acceptB(x) : void
>acceptB : <T>(b: B<T>) => void
>x : A<T>
    }

    if (x instanceof B) {
>x instanceof B : boolean
>x : A<T> | B<T>
>B : typeof B

        acceptB(x);
>acceptB(x) : void
>acceptB : <T>(b: B<T>) => void
>x : A<T>
    }
}
