=== tests/cases/compiler/file1.d.ts ===
declare module "file1" {
    class foo {}
>foo : Symbol(foo, Decl(file1.d.ts, 0, 24), Decl(file1.d.ts, 1, 16), Decl(file2.ts, 1, 28))

    namespace foo {
>foo : Symbol(foo, Decl(file1.d.ts, 0, 24), Decl(file1.d.ts, 1, 16), Decl(file2.ts, 1, 28))

        class A {}
>A : Symbol(A, Decl(file1.d.ts, 2, 19), Decl(file2.ts, 4, 24))
    }
    export = foo;
>foo : Symbol(foo, Decl(file1.d.ts, 0, 24), Decl(file1.d.ts, 1, 16))
}


=== tests/cases/compiler/file2.ts ===
/// <reference path="file1.d.ts"/>
import x = require("file1"); 
>x : Symbol(x, Decl(file2.ts, 0, 0))

// OK - './file1' is a namespace
declare module "file1" {
    interface A { a: number }
>A : Symbol(A, Decl(file1.d.ts, 2, 19), Decl(file2.ts, 4, 24))
>a : Symbol(A.a, Decl(file2.ts, 5, 17))
}

=== tests/cases/compiler/file3.ts ===
import * as x from "file1";
>x : Symbol(x, Decl(file3.ts, 0, 6))

import "file2";
let a: x.A;
>a : Symbol(a, Decl(file3.ts, 2, 3))
>x : Symbol(x, Decl(file3.ts, 0, 6))
>A : Symbol(x.A, Decl(file1.d.ts, 2, 19), Decl(file2.ts, 4, 24))

let b = a.a;
>b : Symbol(b, Decl(file3.ts, 3, 3))
>a.a : Symbol(x.A.a, Decl(file2.ts, 5, 17))
>a : Symbol(a, Decl(file3.ts, 2, 3))
>a : Symbol(x.A.a, Decl(file2.ts, 5, 17))

