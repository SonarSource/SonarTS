=== tests/cases/conformance/expressions/commaOperator/commaOperatorsMultipleOperators.ts ===
var ANY: any;
>ANY : Symbol(ANY, Decl(commaOperatorsMultipleOperators.ts, 0, 3))

var BOOLEAN: boolean;
>BOOLEAN : Symbol(BOOLEAN, Decl(commaOperatorsMultipleOperators.ts, 1, 3))

var NUMBER: number;
>NUMBER : Symbol(NUMBER, Decl(commaOperatorsMultipleOperators.ts, 2, 3))

var STRING: string;
>STRING : Symbol(STRING, Decl(commaOperatorsMultipleOperators.ts, 3, 3))

var OBJECT: Object;
>OBJECT : Symbol(OBJECT, Decl(commaOperatorsMultipleOperators.ts, 4, 3))
>Object : Symbol(Object, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

//Expected: work well
ANY, BOOLEAN, NUMBER;
>ANY : Symbol(ANY, Decl(commaOperatorsMultipleOperators.ts, 0, 3))
>BOOLEAN : Symbol(BOOLEAN, Decl(commaOperatorsMultipleOperators.ts, 1, 3))
>NUMBER : Symbol(NUMBER, Decl(commaOperatorsMultipleOperators.ts, 2, 3))

BOOLEAN, NUMBER, STRING;
>BOOLEAN : Symbol(BOOLEAN, Decl(commaOperatorsMultipleOperators.ts, 1, 3))
>NUMBER : Symbol(NUMBER, Decl(commaOperatorsMultipleOperators.ts, 2, 3))
>STRING : Symbol(STRING, Decl(commaOperatorsMultipleOperators.ts, 3, 3))

NUMBER, STRING, OBJECT;
>NUMBER : Symbol(NUMBER, Decl(commaOperatorsMultipleOperators.ts, 2, 3))
>STRING : Symbol(STRING, Decl(commaOperatorsMultipleOperators.ts, 3, 3))
>OBJECT : Symbol(OBJECT, Decl(commaOperatorsMultipleOperators.ts, 4, 3))

STRING, OBJECT, ANY;
>STRING : Symbol(STRING, Decl(commaOperatorsMultipleOperators.ts, 3, 3))
>OBJECT : Symbol(OBJECT, Decl(commaOperatorsMultipleOperators.ts, 4, 3))
>ANY : Symbol(ANY, Decl(commaOperatorsMultipleOperators.ts, 0, 3))

OBJECT, ANY, BOOLEAN;
>OBJECT : Symbol(OBJECT, Decl(commaOperatorsMultipleOperators.ts, 4, 3))
>ANY : Symbol(ANY, Decl(commaOperatorsMultipleOperators.ts, 0, 3))
>BOOLEAN : Symbol(BOOLEAN, Decl(commaOperatorsMultipleOperators.ts, 1, 3))

//Results should have the same type as the third operand
var resultIsAny1 = (STRING, OBJECT, ANY);
>resultIsAny1 : Symbol(resultIsAny1, Decl(commaOperatorsMultipleOperators.ts, 14, 3))
>STRING : Symbol(STRING, Decl(commaOperatorsMultipleOperators.ts, 3, 3))
>OBJECT : Symbol(OBJECT, Decl(commaOperatorsMultipleOperators.ts, 4, 3))
>ANY : Symbol(ANY, Decl(commaOperatorsMultipleOperators.ts, 0, 3))

var resultIsBoolean1 = (OBJECT, ANY, BOOLEAN);
>resultIsBoolean1 : Symbol(resultIsBoolean1, Decl(commaOperatorsMultipleOperators.ts, 15, 3))
>OBJECT : Symbol(OBJECT, Decl(commaOperatorsMultipleOperators.ts, 4, 3))
>ANY : Symbol(ANY, Decl(commaOperatorsMultipleOperators.ts, 0, 3))
>BOOLEAN : Symbol(BOOLEAN, Decl(commaOperatorsMultipleOperators.ts, 1, 3))

var resultIsNumber1 = (ANY, BOOLEAN, NUMBER);
>resultIsNumber1 : Symbol(resultIsNumber1, Decl(commaOperatorsMultipleOperators.ts, 16, 3))
>ANY : Symbol(ANY, Decl(commaOperatorsMultipleOperators.ts, 0, 3))
>BOOLEAN : Symbol(BOOLEAN, Decl(commaOperatorsMultipleOperators.ts, 1, 3))
>NUMBER : Symbol(NUMBER, Decl(commaOperatorsMultipleOperators.ts, 2, 3))

var resultIsString1 = (BOOLEAN, NUMBER, STRING);
>resultIsString1 : Symbol(resultIsString1, Decl(commaOperatorsMultipleOperators.ts, 17, 3))
>BOOLEAN : Symbol(BOOLEAN, Decl(commaOperatorsMultipleOperators.ts, 1, 3))
>NUMBER : Symbol(NUMBER, Decl(commaOperatorsMultipleOperators.ts, 2, 3))
>STRING : Symbol(STRING, Decl(commaOperatorsMultipleOperators.ts, 3, 3))

var resultIsObject1 = (NUMBER, STRING, OBJECT);
>resultIsObject1 : Symbol(resultIsObject1, Decl(commaOperatorsMultipleOperators.ts, 18, 3))
>NUMBER : Symbol(NUMBER, Decl(commaOperatorsMultipleOperators.ts, 2, 3))
>STRING : Symbol(STRING, Decl(commaOperatorsMultipleOperators.ts, 3, 3))
>OBJECT : Symbol(OBJECT, Decl(commaOperatorsMultipleOperators.ts, 4, 3))

//Literal and expression
null, true, 1;
++NUMBER, STRING.charAt(0), new Object();
>NUMBER : Symbol(NUMBER, Decl(commaOperatorsMultipleOperators.ts, 2, 3))
>STRING.charAt : Symbol(String.charAt, Decl(lib.d.ts, --, --))
>STRING : Symbol(STRING, Decl(commaOperatorsMultipleOperators.ts, 3, 3))
>charAt : Symbol(String.charAt, Decl(lib.d.ts, --, --))
>Object : Symbol(Object, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

var resultIsNumber2 = (null, true, 1);
>resultIsNumber2 : Symbol(resultIsNumber2, Decl(commaOperatorsMultipleOperators.ts, 24, 3))

var resultIsObject2 = (++NUMBER, STRING.charAt(0), new Object());
>resultIsObject2 : Symbol(resultIsObject2, Decl(commaOperatorsMultipleOperators.ts, 25, 3))
>NUMBER : Symbol(NUMBER, Decl(commaOperatorsMultipleOperators.ts, 2, 3))
>STRING.charAt : Symbol(String.charAt, Decl(lib.d.ts, --, --))
>STRING : Symbol(STRING, Decl(commaOperatorsMultipleOperators.ts, 3, 3))
>charAt : Symbol(String.charAt, Decl(lib.d.ts, --, --))
>Object : Symbol(Object, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

