=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTypeParameterConstraint02.ts ===
function foo<T extends "foo">(f: (x: T) => T) {
>foo : Symbol(foo, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 0, 0))
>T : Symbol(T, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 0, 13))
>f : Symbol(f, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 0, 30))
>x : Symbol(x, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 0, 34))
>T : Symbol(T, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 0, 13))
>T : Symbol(T, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 0, 13))

    return f;
>f : Symbol(f, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 0, 30))
}

let f = foo((y: "foo" | "bar") => y === "foo" ? y : "foo");
>f : Symbol(f, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 4, 3))
>foo : Symbol(foo, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 0, 0))
>y : Symbol(y, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 4, 13))
>y : Symbol(y, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 4, 13))
>y : Symbol(y, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 4, 13))

let fResult = f("foo");
>fResult : Symbol(fResult, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 5, 3))
>f : Symbol(f, Decl(stringLiteralTypesAsTypeParameterConstraint02.ts, 4, 3))

