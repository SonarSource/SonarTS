=== tests/cases/conformance/classes/classDeclarations/classBody/classWithEmptyBody.ts ===
class C {
>C : Symbol(C, Decl(classWithEmptyBody.ts, 0, 0))
}

var c: C;
>c : Symbol(c, Decl(classWithEmptyBody.ts, 3, 3))
>C : Symbol(C, Decl(classWithEmptyBody.ts, 0, 0))

var o: {} = c;
>o : Symbol(o, Decl(classWithEmptyBody.ts, 4, 3), Decl(classWithEmptyBody.ts, 16, 3))
>c : Symbol(c, Decl(classWithEmptyBody.ts, 3, 3))

c = 1;
>c : Symbol(c, Decl(classWithEmptyBody.ts, 3, 3))

c = { foo: '' }
>c : Symbol(c, Decl(classWithEmptyBody.ts, 3, 3))
>foo : Symbol(foo, Decl(classWithEmptyBody.ts, 6, 5))

c = () => { }
>c : Symbol(c, Decl(classWithEmptyBody.ts, 3, 3))

class D {
>D : Symbol(D, Decl(classWithEmptyBody.ts, 7, 13))

    constructor() {
        return 1;
    }
}

var d: D;
>d : Symbol(d, Decl(classWithEmptyBody.ts, 15, 3))
>D : Symbol(D, Decl(classWithEmptyBody.ts, 7, 13))

var o: {} = d;
>o : Symbol(o, Decl(classWithEmptyBody.ts, 4, 3), Decl(classWithEmptyBody.ts, 16, 3))
>d : Symbol(d, Decl(classWithEmptyBody.ts, 15, 3))

d = 1;
>d : Symbol(d, Decl(classWithEmptyBody.ts, 15, 3))

d = { foo: '' }
>d : Symbol(d, Decl(classWithEmptyBody.ts, 15, 3))
>foo : Symbol(foo, Decl(classWithEmptyBody.ts, 18, 5))

d = () => { }
>d : Symbol(d, Decl(classWithEmptyBody.ts, 15, 3))

