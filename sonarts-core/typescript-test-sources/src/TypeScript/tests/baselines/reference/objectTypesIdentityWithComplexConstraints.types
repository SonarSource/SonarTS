=== tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithComplexConstraints.ts ===
interface A {
>A : A

      <T extends {
>T : T

            <S extends A>(x: T, y: S): void
>S : S
>A : A
>x : T
>T : T
>y : S
>S : S

      }>(x: T, y: T): void
>x : T
>T : T
>y : T
>T : T
}

interface B {
>B : B

      <U extends B>(x: U, y: U): void
>U : U
>B : B
>x : U
>U : U
>y : U
>U : U
}

// ok, not considered identical because the steps of contextual signature instantiation create fresh type parameters
function foo(x: A);
>foo : { (x: A): any; (x: B): any; }
>x : A
>A : A

function foo(x: B); // error after constraints above made illegal
>foo : { (x: A): any; (x: B): any; }
>x : B
>B : B

function foo(x: any) { }
>foo : { (x: A): any; (x: B): any; }
>x : any

