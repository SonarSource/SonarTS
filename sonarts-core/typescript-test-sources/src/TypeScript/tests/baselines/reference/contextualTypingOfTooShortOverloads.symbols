=== tests/cases/compiler/contextualTypingOfTooShortOverloads.ts ===
// small repro from #11875
var use: Overload;
>use : Symbol(use, Decl(contextualTypingOfTooShortOverloads.ts, 1, 3))
>Overload : Symbol(Overload, Decl(contextualTypingOfTooShortOverloads.ts, 2, 22))

use((req, res) => {});
>use : Symbol(use, Decl(contextualTypingOfTooShortOverloads.ts, 1, 3))
>req : Symbol(req, Decl(contextualTypingOfTooShortOverloads.ts, 2, 5))
>res : Symbol(res, Decl(contextualTypingOfTooShortOverloads.ts, 2, 9))

interface Overload {
>Overload : Symbol(Overload, Decl(contextualTypingOfTooShortOverloads.ts, 2, 22))

    (handler1: (req1: string) => void): void;
>handler1 : Symbol(handler1, Decl(contextualTypingOfTooShortOverloads.ts, 5, 5))
>req1 : Symbol(req1, Decl(contextualTypingOfTooShortOverloads.ts, 5, 16))

    (handler2: (req2: number, res2: number) => void): void;
>handler2 : Symbol(handler2, Decl(contextualTypingOfTooShortOverloads.ts, 6, 5))
>req2 : Symbol(req2, Decl(contextualTypingOfTooShortOverloads.ts, 6, 16))
>res2 : Symbol(res2, Decl(contextualTypingOfTooShortOverloads.ts, 6, 29))
}
// larger repro from #11875
let app: MyApp;
>app : Symbol(app, Decl(contextualTypingOfTooShortOverloads.ts, 9, 3))
>MyApp : Symbol(MyApp, Decl(contextualTypingOfTooShortOverloads.ts, 10, 51))

app.use((err: any, req, res, next) => { return; });
>app.use : Symbol(MyApp.use, Decl(contextualTypingOfTooShortOverloads.ts, 13, 17))
>app : Symbol(app, Decl(contextualTypingOfTooShortOverloads.ts, 9, 3))
>use : Symbol(MyApp.use, Decl(contextualTypingOfTooShortOverloads.ts, 13, 17))
>err : Symbol(err, Decl(contextualTypingOfTooShortOverloads.ts, 10, 9))
>req : Symbol(req, Decl(contextualTypingOfTooShortOverloads.ts, 10, 18))
>res : Symbol(res, Decl(contextualTypingOfTooShortOverloads.ts, 10, 23))
>next : Symbol(next, Decl(contextualTypingOfTooShortOverloads.ts, 10, 28))


interface MyApp {
>MyApp : Symbol(MyApp, Decl(contextualTypingOfTooShortOverloads.ts, 10, 51))

    use: IRouterHandler<this> & IRouterMatcher<this>;
>use : Symbol(MyApp.use, Decl(contextualTypingOfTooShortOverloads.ts, 13, 17))
>IRouterHandler : Symbol(IRouterHandler, Decl(contextualTypingOfTooShortOverloads.ts, 15, 1))
>IRouterMatcher : Symbol(IRouterMatcher, Decl(contextualTypingOfTooShortOverloads.ts, 20, 1))
}

interface IRouterHandler<T> {
>IRouterHandler : Symbol(IRouterHandler, Decl(contextualTypingOfTooShortOverloads.ts, 15, 1))
>T : Symbol(T, Decl(contextualTypingOfTooShortOverloads.ts, 17, 25))

    (...handlers: RequestHandler[]): T;
>handlers : Symbol(handlers, Decl(contextualTypingOfTooShortOverloads.ts, 18, 5))
>RequestHandler : Symbol(RequestHandler, Decl(contextualTypingOfTooShortOverloads.ts, 28, 108))
>T : Symbol(T, Decl(contextualTypingOfTooShortOverloads.ts, 17, 25))

    (...handlers: RequestHandlerParams[]): T;
>handlers : Symbol(handlers, Decl(contextualTypingOfTooShortOverloads.ts, 19, 5))
>RequestHandlerParams : Symbol(RequestHandlerParams, Decl(contextualTypingOfTooShortOverloads.ts, 27, 56))
>T : Symbol(T, Decl(contextualTypingOfTooShortOverloads.ts, 17, 25))
}

interface IRouterMatcher<T> {
>IRouterMatcher : Symbol(IRouterMatcher, Decl(contextualTypingOfTooShortOverloads.ts, 20, 1))
>T : Symbol(T, Decl(contextualTypingOfTooShortOverloads.ts, 22, 25))

    (path: PathParams, ...handlers: RequestHandler[]): T;
>path : Symbol(path, Decl(contextualTypingOfTooShortOverloads.ts, 23, 5))
>PathParams : Symbol(PathParams, Decl(contextualTypingOfTooShortOverloads.ts, 25, 1))
>handlers : Symbol(handlers, Decl(contextualTypingOfTooShortOverloads.ts, 23, 22))
>RequestHandler : Symbol(RequestHandler, Decl(contextualTypingOfTooShortOverloads.ts, 28, 108))
>T : Symbol(T, Decl(contextualTypingOfTooShortOverloads.ts, 22, 25))

    (path: PathParams, ...handlers: RequestHandlerParams[]): T;
>path : Symbol(path, Decl(contextualTypingOfTooShortOverloads.ts, 24, 5))
>PathParams : Symbol(PathParams, Decl(contextualTypingOfTooShortOverloads.ts, 25, 1))
>handlers : Symbol(handlers, Decl(contextualTypingOfTooShortOverloads.ts, 24, 22))
>RequestHandlerParams : Symbol(RequestHandlerParams, Decl(contextualTypingOfTooShortOverloads.ts, 27, 56))
>T : Symbol(T, Decl(contextualTypingOfTooShortOverloads.ts, 22, 25))
}

type PathParams = string | RegExp | (string | RegExp)[];
>PathParams : Symbol(PathParams, Decl(contextualTypingOfTooShortOverloads.ts, 25, 1))
>RegExp : Symbol(RegExp, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>RegExp : Symbol(RegExp, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

type RequestHandlerParams = RequestHandler | ErrorRequestHandler | (RequestHandler | ErrorRequestHandler)[];
>RequestHandlerParams : Symbol(RequestHandlerParams, Decl(contextualTypingOfTooShortOverloads.ts, 27, 56))
>RequestHandler : Symbol(RequestHandler, Decl(contextualTypingOfTooShortOverloads.ts, 28, 108))
>ErrorRequestHandler : Symbol(ErrorRequestHandler, Decl(contextualTypingOfTooShortOverloads.ts, 32, 1))
>RequestHandler : Symbol(RequestHandler, Decl(contextualTypingOfTooShortOverloads.ts, 28, 108))
>ErrorRequestHandler : Symbol(ErrorRequestHandler, Decl(contextualTypingOfTooShortOverloads.ts, 32, 1))

interface RequestHandler {
>RequestHandler : Symbol(RequestHandler, Decl(contextualTypingOfTooShortOverloads.ts, 28, 108))

    (req: Request, res: Response, next: NextFunction): any;
>req : Symbol(req, Decl(contextualTypingOfTooShortOverloads.ts, 31, 5))
>Request : Symbol(Request, Decl(contextualTypingOfTooShortOverloads.ts, 36, 1))
>res : Symbol(res, Decl(contextualTypingOfTooShortOverloads.ts, 31, 18))
>Response : Symbol(Response, Decl(contextualTypingOfTooShortOverloads.ts, 40, 1))
>next : Symbol(next, Decl(contextualTypingOfTooShortOverloads.ts, 31, 33))
>NextFunction : Symbol(NextFunction, Decl(contextualTypingOfTooShortOverloads.ts, 44, 1))
}

interface ErrorRequestHandler {
>ErrorRequestHandler : Symbol(ErrorRequestHandler, Decl(contextualTypingOfTooShortOverloads.ts, 32, 1))

    (err: any, req: Request, res: Response, next: NextFunction): any;
>err : Symbol(err, Decl(contextualTypingOfTooShortOverloads.ts, 35, 5))
>req : Symbol(req, Decl(contextualTypingOfTooShortOverloads.ts, 35, 14))
>Request : Symbol(Request, Decl(contextualTypingOfTooShortOverloads.ts, 36, 1))
>res : Symbol(res, Decl(contextualTypingOfTooShortOverloads.ts, 35, 28))
>Response : Symbol(Response, Decl(contextualTypingOfTooShortOverloads.ts, 40, 1))
>next : Symbol(next, Decl(contextualTypingOfTooShortOverloads.ts, 35, 43))
>NextFunction : Symbol(NextFunction, Decl(contextualTypingOfTooShortOverloads.ts, 44, 1))
}

interface Request {
>Request : Symbol(Request, Decl(contextualTypingOfTooShortOverloads.ts, 36, 1))

    method: string;
>method : Symbol(Request.method, Decl(contextualTypingOfTooShortOverloads.ts, 38, 19))
}

interface Response {
>Response : Symbol(Response, Decl(contextualTypingOfTooShortOverloads.ts, 40, 1))

    statusCode: number;
>statusCode : Symbol(Response.statusCode, Decl(contextualTypingOfTooShortOverloads.ts, 42, 20))
}

interface NextFunction {
>NextFunction : Symbol(NextFunction, Decl(contextualTypingOfTooShortOverloads.ts, 44, 1))

    (err?: any): void;
>err : Symbol(err, Decl(contextualTypingOfTooShortOverloads.ts, 47, 5))
}

