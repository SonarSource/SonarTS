=== tests/cases/compiler/generics2NoError.ts ===
interface A { a: string; }
>A : Symbol(A, Decl(generics2NoError.ts, 0, 0))
>a : Symbol(A.a, Decl(generics2NoError.ts, 0, 13))

interface B extends A { b: string; }
>B : Symbol(B, Decl(generics2NoError.ts, 0, 26))
>A : Symbol(A, Decl(generics2NoError.ts, 0, 0))
>b : Symbol(B.b, Decl(generics2NoError.ts, 1, 23))

interface C extends B { c: string; }
>C : Symbol(C, Decl(generics2NoError.ts, 1, 36))
>B : Symbol(B, Decl(generics2NoError.ts, 0, 26))
>c : Symbol(C.c, Decl(generics2NoError.ts, 2, 23))

interface G<T, U extends B> {
>G : Symbol(G, Decl(generics2NoError.ts, 2, 36))
>T : Symbol(T, Decl(generics2NoError.ts, 3, 12))
>U : Symbol(U, Decl(generics2NoError.ts, 3, 14))
>B : Symbol(B, Decl(generics2NoError.ts, 0, 26))

    x: T;
>x : Symbol(G.x, Decl(generics2NoError.ts, 3, 29))
>T : Symbol(T, Decl(generics2NoError.ts, 3, 12))

    y: U;
>y : Symbol(G.y, Decl(generics2NoError.ts, 4, 9))
>U : Symbol(U, Decl(generics2NoError.ts, 3, 14))
}


var v1: {
>v1 : Symbol(v1, Decl(generics2NoError.ts, 9, 3))

    x: { a: string; }
>x : Symbol(x, Decl(generics2NoError.ts, 9, 9))
>a : Symbol(a, Decl(generics2NoError.ts, 10, 8))

    y: { a: string; b: string; c: string };
>y : Symbol(y, Decl(generics2NoError.ts, 10, 21))
>a : Symbol(a, Decl(generics2NoError.ts, 11, 8))
>b : Symbol(b, Decl(generics2NoError.ts, 11, 19))
>c : Symbol(c, Decl(generics2NoError.ts, 11, 30))

}; // Ok


var v2: G<{ a: string }, C>;   // Ok, equivalent to G<A, C>
>v2 : Symbol(v2, Decl(generics2NoError.ts, 15, 3))
>G : Symbol(G, Decl(generics2NoError.ts, 2, 36))
>a : Symbol(a, Decl(generics2NoError.ts, 15, 11))
>C : Symbol(C, Decl(generics2NoError.ts, 1, 36))

var v4: G<G<A, B>, C>;         // Ok
>v4 : Symbol(v4, Decl(generics2NoError.ts, 16, 3))
>G : Symbol(G, Decl(generics2NoError.ts, 2, 36))
>G : Symbol(G, Decl(generics2NoError.ts, 2, 36))
>A : Symbol(A, Decl(generics2NoError.ts, 0, 0))
>B : Symbol(B, Decl(generics2NoError.ts, 0, 26))
>C : Symbol(C, Decl(generics2NoError.ts, 1, 36))

