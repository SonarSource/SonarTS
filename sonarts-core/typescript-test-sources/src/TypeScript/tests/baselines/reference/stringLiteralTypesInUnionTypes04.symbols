=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes04.ts ===
type T = "" | "foo";
>T : Symbol(T, Decl(stringLiteralTypesInUnionTypes04.ts, 0, 0))

let x: T = undefined;
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))
>T : Symbol(T, Decl(stringLiteralTypesInUnionTypes04.ts, 0, 0))
>undefined : Symbol(undefined)

let y: T = undefined;
>y : Symbol(y, Decl(stringLiteralTypesInUnionTypes04.ts, 3, 3))
>T : Symbol(T, Decl(stringLiteralTypesInUnionTypes04.ts, 0, 0))
>undefined : Symbol(undefined)

if (x === "") {
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))

    let a = x;
>a : Symbol(a, Decl(stringLiteralTypesInUnionTypes04.ts, 6, 7))
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))
}

if (x !== "") {
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))

    let b = x;
>b : Symbol(b, Decl(stringLiteralTypesInUnionTypes04.ts, 10, 7))
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))
}

if (x == "") {
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))

    let c = x;
>c : Symbol(c, Decl(stringLiteralTypesInUnionTypes04.ts, 14, 7))
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))
}

if (x != "") {
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))

    let d = x;
>d : Symbol(d, Decl(stringLiteralTypesInUnionTypes04.ts, 18, 7))
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))
}

if (x) {
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))

    let e = x;
>e : Symbol(e, Decl(stringLiteralTypesInUnionTypes04.ts, 22, 7))
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))
}

if (!x) {
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))

    let f = x;
>f : Symbol(f, Decl(stringLiteralTypesInUnionTypes04.ts, 26, 7))
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))
}

if (!!x) {
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))

    let g = x;
>g : Symbol(g, Decl(stringLiteralTypesInUnionTypes04.ts, 30, 7))
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))
}

if (!!!x) {
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))

    let h = x;
>h : Symbol(h, Decl(stringLiteralTypesInUnionTypes04.ts, 34, 7))
>x : Symbol(x, Decl(stringLiteralTypesInUnionTypes04.ts, 2, 3))
}
