=== tests/cases/conformance/es6/destructuring/destructuringInFunctionType.ts ===
interface a { a }
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 0, 0))
>a : Symbol(a.a, Decl(destructuringInFunctionType.ts, 0, 13))

interface b { b }
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 0, 17))
>b : Symbol(b.b, Decl(destructuringInFunctionType.ts, 1, 13))

interface c { c }
>c : Symbol(c, Decl(destructuringInFunctionType.ts, 1, 17))
>c : Symbol(c.c, Decl(destructuringInFunctionType.ts, 2, 13))

type T1 = ([a, b, c]);
>T1 : Symbol(T1, Decl(destructuringInFunctionType.ts, 2, 17))
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 0, 0))
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 0, 17))
>c : Symbol(c, Decl(destructuringInFunctionType.ts, 1, 17))

type F1 = ([a, b, c]) => void;
>F1 : Symbol(F1, Decl(destructuringInFunctionType.ts, 4, 22))
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 5, 12))
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 5, 14))
>c : Symbol(c, Decl(destructuringInFunctionType.ts, 5, 17))

type T2 = ({ a });
>T2 : Symbol(T2, Decl(destructuringInFunctionType.ts, 5, 30))
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 7, 12))

type F2 = ({ a }) => void;
>F2 : Symbol(F2, Decl(destructuringInFunctionType.ts, 7, 18))
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 8, 12))

type T3 = ([{ a: b }, { b: a }]);
>T3 : Symbol(T3, Decl(destructuringInFunctionType.ts, 8, 26))
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 10, 13))
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 0, 17))
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 10, 23))
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 0, 0))

type F3 = ([{ a: b }, { b: a }]) => void;
>F3 : Symbol(F3, Decl(destructuringInFunctionType.ts, 10, 33))
>a : Symbol(a)
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 11, 13))
>b : Symbol(b)
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 11, 23))

type T4 = ([{ a: [b, c] }]);
>T4 : Symbol(T4, Decl(destructuringInFunctionType.ts, 11, 41))
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 13, 13))
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 0, 17))
>c : Symbol(c, Decl(destructuringInFunctionType.ts, 1, 17))

type F4 = ([{ a: [b, c] }]) => void;
>F4 : Symbol(F4, Decl(destructuringInFunctionType.ts, 13, 28))
>a : Symbol(a)
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 14, 18))
>c : Symbol(c, Decl(destructuringInFunctionType.ts, 14, 20))

type C1 = new ([{ a: [b, c] }]) => void;
>C1 : Symbol(C1, Decl(destructuringInFunctionType.ts, 14, 36))
>a : Symbol(a)
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 16, 22))
>c : Symbol(c, Decl(destructuringInFunctionType.ts, 16, 24))

var v1 = ([a, b, c]) => "hello";
>v1 : Symbol(v1, Decl(destructuringInFunctionType.ts, 18, 3))
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 18, 11))
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 18, 13))
>c : Symbol(c, Decl(destructuringInFunctionType.ts, 18, 16))

var v2: ([a, b, c]) => string;
>v2 : Symbol(v2, Decl(destructuringInFunctionType.ts, 19, 3))
>a : Symbol(a, Decl(destructuringInFunctionType.ts, 19, 10))
>b : Symbol(b, Decl(destructuringInFunctionType.ts, 19, 12))
>c : Symbol(c, Decl(destructuringInFunctionType.ts, 19, 15))

