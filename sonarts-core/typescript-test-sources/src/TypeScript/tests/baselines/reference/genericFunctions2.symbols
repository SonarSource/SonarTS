=== tests/cases/compiler/genericFunctions2.ts ===
declare function map <T, U > (items: T[], f: (x: T) => U): U[];
>map : Symbol(map, Decl(genericFunctions2.ts, 0, 0))
>T : Symbol(T, Decl(genericFunctions2.ts, 0, 22))
>U : Symbol(U, Decl(genericFunctions2.ts, 0, 24))
>items : Symbol(items, Decl(genericFunctions2.ts, 0, 30))
>T : Symbol(T, Decl(genericFunctions2.ts, 0, 22))
>f : Symbol(f, Decl(genericFunctions2.ts, 0, 41))
>x : Symbol(x, Decl(genericFunctions2.ts, 0, 46))
>T : Symbol(T, Decl(genericFunctions2.ts, 0, 22))
>U : Symbol(U, Decl(genericFunctions2.ts, 0, 24))
>U : Symbol(U, Decl(genericFunctions2.ts, 0, 24))

var myItems: string[];
>myItems : Symbol(myItems, Decl(genericFunctions2.ts, 2, 3))

var lengths = map(myItems, x => x.length);
>lengths : Symbol(lengths, Decl(genericFunctions2.ts, 3, 3))
>map : Symbol(map, Decl(genericFunctions2.ts, 0, 0))
>myItems : Symbol(myItems, Decl(genericFunctions2.ts, 2, 3))
>x : Symbol(x, Decl(genericFunctions2.ts, 3, 26))
>x.length : Symbol(String.length, Decl(lib.d.ts, --, --))
>x : Symbol(x, Decl(genericFunctions2.ts, 3, 26))
>length : Symbol(String.length, Decl(lib.d.ts, --, --))


