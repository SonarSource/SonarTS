=== tests/cases/compiler/ref/a.ts ===
/// <reference path="./b.ts" />
export class A {
>A : Symbol(A, Decl(a.ts, 0, 0))

	member: typeof GlobalFoo;
>member : Symbol(A.member, Decl(a.ts, 1, 16))
>GlobalFoo : Symbol(GlobalFoo, Decl(b.ts, 4, 11))
}

=== tests/cases/compiler/ref/b.ts ===
/// <reference path="./c.d.ts" />
class Foo {
>Foo : Symbol(Foo, Decl(b.ts, 0, 0))

	member: Bar;
>member : Symbol(Foo.member, Decl(b.ts, 1, 11))
>Bar : Symbol(Bar, Decl(c.d.ts, 0, 0))
}
declare var GlobalFoo: Foo;
>GlobalFoo : Symbol(GlobalFoo, Decl(b.ts, 4, 11))
>Foo : Symbol(Foo, Decl(b.ts, 0, 0))

=== tests/cases/compiler/ref/c.d.ts ===
/// <reference path="./d.d.ts" />
declare class Bar {
>Bar : Symbol(Bar, Decl(c.d.ts, 0, 0))

	member: Baz;
>member : Symbol(Bar.member, Decl(c.d.ts, 1, 19))
>Baz : Symbol(Baz, Decl(d.d.ts, 0, 0))
}

=== tests/cases/compiler/ref/d.d.ts ===
declare class Baz {
>Baz : Symbol(Baz, Decl(d.d.ts, 0, 0))

	member: number;
>member : Symbol(Baz.member, Decl(d.d.ts, 0, 19))
}

=== tests/cases/compiler/b.ts ===
import {A} from "./ref/a";
>A : Symbol(A, Decl(b.ts, 0, 8))

export class B extends A { }
>B : Symbol(B, Decl(b.ts, 0, 26))
>A : Symbol(A, Decl(b.ts, 0, 8))

