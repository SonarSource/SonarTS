=== tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithComplexConstraints.ts ===
interface A {
>A : Symbol(A, Decl(objectTypesIdentityWithComplexConstraints.ts, 0, 0))

      <T extends {
>T : Symbol(T, Decl(objectTypesIdentityWithComplexConstraints.ts, 1, 7))

            <S extends A>(x: T, y: S): void
>S : Symbol(S, Decl(objectTypesIdentityWithComplexConstraints.ts, 2, 13))
>A : Symbol(A, Decl(objectTypesIdentityWithComplexConstraints.ts, 0, 0))
>x : Symbol(x, Decl(objectTypesIdentityWithComplexConstraints.ts, 2, 26))
>T : Symbol(T, Decl(objectTypesIdentityWithComplexConstraints.ts, 1, 7))
>y : Symbol(y, Decl(objectTypesIdentityWithComplexConstraints.ts, 2, 31))
>S : Symbol(S, Decl(objectTypesIdentityWithComplexConstraints.ts, 2, 13))

      }>(x: T, y: T): void
>x : Symbol(x, Decl(objectTypesIdentityWithComplexConstraints.ts, 3, 9))
>T : Symbol(T, Decl(objectTypesIdentityWithComplexConstraints.ts, 1, 7))
>y : Symbol(y, Decl(objectTypesIdentityWithComplexConstraints.ts, 3, 14))
>T : Symbol(T, Decl(objectTypesIdentityWithComplexConstraints.ts, 1, 7))
}

interface B {
>B : Symbol(B, Decl(objectTypesIdentityWithComplexConstraints.ts, 4, 1))

      <U extends B>(x: U, y: U): void
>U : Symbol(U, Decl(objectTypesIdentityWithComplexConstraints.ts, 7, 7))
>B : Symbol(B, Decl(objectTypesIdentityWithComplexConstraints.ts, 4, 1))
>x : Symbol(x, Decl(objectTypesIdentityWithComplexConstraints.ts, 7, 20))
>U : Symbol(U, Decl(objectTypesIdentityWithComplexConstraints.ts, 7, 7))
>y : Symbol(y, Decl(objectTypesIdentityWithComplexConstraints.ts, 7, 25))
>U : Symbol(U, Decl(objectTypesIdentityWithComplexConstraints.ts, 7, 7))
}

// ok, not considered identical because the steps of contextual signature instantiation create fresh type parameters
function foo(x: A);
>foo : Symbol(foo, Decl(objectTypesIdentityWithComplexConstraints.ts, 8, 1), Decl(objectTypesIdentityWithComplexConstraints.ts, 11, 19), Decl(objectTypesIdentityWithComplexConstraints.ts, 12, 19))
>x : Symbol(x, Decl(objectTypesIdentityWithComplexConstraints.ts, 11, 13))
>A : Symbol(A, Decl(objectTypesIdentityWithComplexConstraints.ts, 0, 0))

function foo(x: B); // error after constraints above made illegal
>foo : Symbol(foo, Decl(objectTypesIdentityWithComplexConstraints.ts, 8, 1), Decl(objectTypesIdentityWithComplexConstraints.ts, 11, 19), Decl(objectTypesIdentityWithComplexConstraints.ts, 12, 19))
>x : Symbol(x, Decl(objectTypesIdentityWithComplexConstraints.ts, 12, 13))
>B : Symbol(B, Decl(objectTypesIdentityWithComplexConstraints.ts, 4, 1))

function foo(x: any) { }
>foo : Symbol(foo, Decl(objectTypesIdentityWithComplexConstraints.ts, 8, 1), Decl(objectTypesIdentityWithComplexConstraints.ts, 11, 19), Decl(objectTypesIdentityWithComplexConstraints.ts, 12, 19))
>x : Symbol(x, Decl(objectTypesIdentityWithComplexConstraints.ts, 13, 13))

