=== tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints2.ts ===
// Two call or construct signatures are considered identical when they have the same number of type parameters and, considering those 
// parameters pairwise identical, have identical type parameter constraints, identical number of parameters with identical kind(required, 
// optional or rest) and types, and identical return types.

class A {
>A : A

    foo<T extends U, U extends Date>(x: T, y: U): string { return null; }
>foo : <T extends U, U extends Date>(x: T, y: U) => string
>T : T
>U : U
>U : U
>Date : Date
>x : T
>T : T
>y : U
>U : U
>null : null
}

class B<T extends U, U extends Array<number>> {
>B : B<T, U>
>T : T
>U : U
>U : U
>Array : T[]

    foo(x: T, y: U): string { return null; }
>foo : (x: T, y: U) => string
>x : T
>T : T
>y : U
>U : U
>null : null
}

class C<T extends U, U extends String> {
>C : C<T, U>
>T : T
>U : U
>U : U
>String : String

    foo(x: T, y: U): string { return null; }
>foo : (x: T, y: U) => string
>x : T
>T : T
>y : U
>U : U
>null : null
}

class D<T extends U, U extends Number> {
>D : D<T, U>
>T : T
>U : U
>U : U
>Number : Number

    foo(x: T, y: U): string { return null; }
>foo : (x: T, y: U) => string
>x : T
>T : T
>y : U
>U : U
>null : null
}

interface I<T extends U, U extends Number> {
>I : I<T, U>
>T : T
>U : U
>U : U
>Number : Number

    foo(x: T, y: U): string;
>foo : (x: T, y: U) => string
>x : T
>T : T
>y : U
>U : U
}

interface I2 {
>I2 : I2

    foo<T extends U, U extends Boolean>(x: T, y: U): string;
>foo : <T extends U, U extends Boolean>(x: T, y: U) => string
>T : T
>U : U
>U : U
>Boolean : Boolean
>x : T
>T : T
>y : U
>U : U
}

var a: { foo<T extends U, U extends Array<string>>(x: T, y: U): string }
>a : { foo<T extends U, U extends string[]>(x: T, y: U): string; }
>foo : <T extends U, U extends string[]>(x: T, y: U) => string
>T : T
>U : U
>U : U
>Array : T[]
>x : T
>T : T
>y : U
>U : U

var b = { foo<T extends U, U extends RegExp>(x: T, y: U) { return ''; } };
>b : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }
>{ foo<T extends U, U extends RegExp>(x: T, y: U) { return ''; } } : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }
>foo : <T extends U, U extends RegExp>(x: T, y: U) => string
>T : T
>U : U
>U : U
>RegExp : RegExp
>x : T
>T : T
>y : U
>U : U
>'' : ""

function foo1(x: A);
>foo1 : { (x: A): any; (x: A): any; }
>x : A
>A : A

function foo1(x: A); // error
>foo1 : { (x: A): any; (x: A): any; }
>x : A
>A : A

function foo1(x: any) { }
>foo1 : { (x: A): any; (x: A): any; }
>x : any

function foo1b(x: B<Array<number>, Array<number>>);
>foo1b : { (x: B<number[], number[]>): any; (x: B<number[], number[]>): any; }
>x : B<number[], number[]>
>B : B<T, U>
>Array : T[]
>Array : T[]

function foo1b(x: B<Array<number>, Array<number>>); // error
>foo1b : { (x: B<number[], number[]>): any; (x: B<number[], number[]>): any; }
>x : B<number[], number[]>
>B : B<T, U>
>Array : T[]
>Array : T[]

function foo1b(x: any) { }
>foo1b : { (x: B<number[], number[]>): any; (x: B<number[], number[]>): any; }
>x : any

function foo1c(x: C<String, String>);
>foo1c : { (x: C<String, String>): any; (x: C<String, String>): any; }
>x : C<String, String>
>C : C<T, U>
>String : String
>String : String

function foo1c(x: C<String, String>); // error
>foo1c : { (x: C<String, String>): any; (x: C<String, String>): any; }
>x : C<String, String>
>C : C<T, U>
>String : String
>String : String

function foo1c(x: any) { }
>foo1c : { (x: C<String, String>): any; (x: C<String, String>): any; }
>x : any

function foo2(x: I<Number, Number>);
>foo2 : { (x: I<Number, Number>): any; (x: I<Number, Number>): any; }
>x : I<Number, Number>
>I : I<T, U>
>Number : Number
>Number : Number

function foo2(x: I<Number, Number>); // error
>foo2 : { (x: I<Number, Number>): any; (x: I<Number, Number>): any; }
>x : I<Number, Number>
>I : I<T, U>
>Number : Number
>Number : Number

function foo2(x: any) { }
>foo2 : { (x: I<Number, Number>): any; (x: I<Number, Number>): any; }
>x : any

function foo3(x: typeof a);
>foo3 : { (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : { foo<T extends U, U extends string[]>(x: T, y: U): string; }
>a : { foo<T extends U, U extends string[]>(x: T, y: U): string; }

function foo3(x: typeof a); // error
>foo3 : { (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : { foo<T extends U, U extends string[]>(x: T, y: U): string; }
>a : { foo<T extends U, U extends string[]>(x: T, y: U): string; }

function foo3(x: any) { }
>foo3 : { (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : any

function foo4(x: typeof b);
>foo4 : { (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; }
>x : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }
>b : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }

function foo4(x: typeof b); // error
>foo4 : { (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; }
>x : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }
>b : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }

function foo4(x: any) { }
>foo4 : { (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; }
>x : any

function foo5(x: A);
>foo5 : { (x: A): any; (x: B<number[], number[]>): any; }
>x : A
>A : A

function foo5(x: B<Array<number>, Array<number>>); // ok
>foo5 : { (x: A): any; (x: B<number[], number[]>): any; }
>x : B<number[], number[]>
>B : B<T, U>
>Array : T[]
>Array : T[]

function foo5(x: any) { }
>foo5 : { (x: A): any; (x: B<number[], number[]>): any; }
>x : any

function foo5b(x: A);
>foo5b : { (x: A): any; (x: C<String, String>): any; }
>x : A
>A : A

function foo5b(x: C<String, String>); // ok
>foo5b : { (x: A): any; (x: C<String, String>): any; }
>x : C<String, String>
>C : C<T, U>
>String : String
>String : String

function foo5b(x: any) { }
>foo5b : { (x: A): any; (x: C<String, String>): any; }
>x : any

function foo5c(x: C<String, String>);
>foo5c : { (x: C<String, String>): any; (x: D<Number, Number>): any; }
>x : C<String, String>
>C : C<T, U>
>String : String
>String : String

function foo5c(x: D<Number, Number>); // ok
>foo5c : { (x: C<String, String>): any; (x: D<Number, Number>): any; }
>x : D<Number, Number>
>D : D<T, U>
>Number : Number
>Number : Number

function foo5c(x: any) { }
>foo5c : { (x: C<String, String>): any; (x: D<Number, Number>): any; }
>x : any

function foo6c(x: C<String, String>);
>foo6c : { (x: C<String, String>): any; (x: D<any, Number>): any; }
>x : C<String, String>
>C : C<T, U>
>String : String
>String : String

function foo6c(x: D<any, Number>); // error, "any" does not satisfy the constraint
>foo6c : { (x: C<String, String>): any; (x: D<any, Number>): any; }
>x : D<any, Number>
>D : D<T, U>
>Number : Number

function foo6c(x: any) { }
>foo6c : { (x: C<String, String>): any; (x: D<any, Number>): any; }
>x : any

function foo6(x: A);
>foo6 : { (x: A): any; (x: I<Number, Number>): any; }
>x : A
>A : A

function foo6(x: I<Number, Number>); // ok
>foo6 : { (x: A): any; (x: I<Number, Number>): any; }
>x : I<Number, Number>
>I : I<T, U>
>Number : Number
>Number : Number

function foo6(x: any) { }
>foo6 : { (x: A): any; (x: I<Number, Number>): any; }
>x : any

function foo7(x: A);
>foo7 : { (x: A): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : A
>A : A

function foo7(x: typeof a); // ok
>foo7 : { (x: A): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : { foo<T extends U, U extends string[]>(x: T, y: U): string; }
>a : { foo<T extends U, U extends string[]>(x: T, y: U): string; }

function foo7(x: any) { }
>foo7 : { (x: A): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : any

function foo8(x: B<Array<number>, Array<number>>);
>foo8 : { (x: B<number[], number[]>): any; (x: I<Number, Number>): any; }
>x : B<number[], number[]>
>B : B<T, U>
>Array : T[]
>Array : T[]

function foo8(x: I<Number, Number>); // ok
>foo8 : { (x: B<number[], number[]>): any; (x: I<Number, Number>): any; }
>x : I<Number, Number>
>I : I<T, U>
>Number : Number
>Number : Number

function foo8(x: any) { }
>foo8 : { (x: B<number[], number[]>): any; (x: I<Number, Number>): any; }
>x : any

function foo9(x: B<Array<number>, Array<number>>);
>foo9 : { (x: B<number[], number[]>): any; (x: C<String, String>): any; }
>x : B<number[], number[]>
>B : B<T, U>
>Array : T[]
>Array : T[]

function foo9(x: C<String, String>); // ok
>foo9 : { (x: B<number[], number[]>): any; (x: C<String, String>): any; }
>x : C<String, String>
>C : C<T, U>
>String : String
>String : String

function foo9(x: any) { }
>foo9 : { (x: B<number[], number[]>): any; (x: C<String, String>): any; }
>x : any

function foo10(x: B<Array<number>, Array<number>>);
>foo10 : { (x: B<number[], number[]>): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : B<number[], number[]>
>B : B<T, U>
>Array : T[]
>Array : T[]

function foo10(x: typeof a); // ok
>foo10 : { (x: B<number[], number[]>): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : { foo<T extends U, U extends string[]>(x: T, y: U): string; }
>a : { foo<T extends U, U extends string[]>(x: T, y: U): string; }

function foo10(x: any) { }
>foo10 : { (x: B<number[], number[]>): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : any

function foo11(x: B<Array<number>, Array<number>>);
>foo11 : { (x: B<number[], number[]>): any; (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; }
>x : B<number[], number[]>
>B : B<T, U>
>Array : T[]
>Array : T[]

function foo11(x: typeof b); // ok
>foo11 : { (x: B<number[], number[]>): any; (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; }
>x : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }
>b : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }

function foo11(x: any) { }
>foo11 : { (x: B<number[], number[]>): any; (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; }
>x : any

function foo12(x: I<Number, Number>);
>foo12 : { (x: I<Number, Number>): any; (x: C<String, String>): any; }
>x : I<Number, Number>
>I : I<T, U>
>Number : Number
>Number : Number

function foo12(x: C<String, String>); // ok
>foo12 : { (x: I<Number, Number>): any; (x: C<String, String>): any; }
>x : C<String, String>
>C : C<T, U>
>String : String
>String : String

function foo12(x: any) { }
>foo12 : { (x: I<Number, Number>): any; (x: C<String, String>): any; }
>x : any

function foo12b(x: I2);
>foo12b : { (x: I2): any; (x: C<String, String>): any; }
>x : I2
>I2 : I2

function foo12b(x: C<String, String>); // ok
>foo12b : { (x: I2): any; (x: C<String, String>): any; }
>x : C<String, String>
>C : C<T, U>
>String : String
>String : String

function foo12b(x: any) { }
>foo12b : { (x: I2): any; (x: C<String, String>): any; }
>x : any

function foo13(x: I<Number, Number>);
>foo13 : { (x: I<Number, Number>): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : I<Number, Number>
>I : I<T, U>
>Number : Number
>Number : Number

function foo13(x: typeof a); // ok
>foo13 : { (x: I<Number, Number>): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : { foo<T extends U, U extends string[]>(x: T, y: U): string; }
>a : { foo<T extends U, U extends string[]>(x: T, y: U): string; }

function foo13(x: any) { }
>foo13 : { (x: I<Number, Number>): any; (x: { foo<T extends U, U extends string[]>(x: T, y: U): string; }): any; }
>x : any

function foo14(x: I<Number, Number>);
>foo14 : { (x: I<Number, Number>): any; (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; }
>x : I<Number, Number>
>I : I<T, U>
>Number : Number
>Number : Number

function foo14(x: typeof b); // ok
>foo14 : { (x: I<Number, Number>): any; (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; }
>x : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }
>b : { foo<T extends U, U extends RegExp>(x: T, y: U): string; }

function foo14(x: any) { }
>foo14 : { (x: I<Number, Number>): any; (x: { foo<T extends U, U extends RegExp>(x: T, y: U): string; }): any; }
>x : any

function foo15(x: I2);
>foo15 : { (x: I2): any; (x: C<String, String>): any; }
>x : I2
>I2 : I2

function foo15(x: C<String, String>); // ok
>foo15 : { (x: I2): any; (x: C<String, String>): any; }
>x : C<String, String>
>C : C<T, U>
>String : String
>String : String

function foo15(x: any) { }
>foo15 : { (x: I2): any; (x: C<String, String>): any; }
>x : any

