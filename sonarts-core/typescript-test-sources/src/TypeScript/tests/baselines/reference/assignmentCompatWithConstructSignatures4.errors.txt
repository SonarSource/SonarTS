tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures4.ts(52,9): error TS2322: Type 'new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U' is not assignable to type 'new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived'.
  Types of parameters 'y' and 'y' are incompatible.
    Types of parameters 'arg2' and 'arg2' are incompatible.
      Type '{ foo: number; }' is not assignable to type 'Base'.
        Types of property 'foo' are incompatible.
          Type 'number' is not assignable to type 'string'.
tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures4.ts(53,9): error TS2322: Type 'new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived' is not assignable to type 'new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U'.
  Types of parameters 'y' and 'y' are incompatible.
    Types of parameters 'arg2' and 'arg2' are incompatible.
      Type 'Base' is not assignable to type '{ foo: number; }'.
        Types of property 'foo' are incompatible.
          Type 'string' is not assignable to type 'number'.
tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures4.ts(77,9): error TS2322: Type 'new <T>(x: (a: T) => T) => T[]' is not assignable to type '{ new (x: { new (a: number): number; new (a?: number): number; }): number[]; new (x: { new (a: boolean): boolean; new (a?: boolean): boolean; }): boolean[]; }'.
  Types of parameters 'x' and 'x' are incompatible.
    Type '{ new (a: number): number; new (a?: number): number; }' is not assignable to type '(a: any) => any'.
      Type '{ new (a: number): number; new (a?: number): number; }' provides no match for the signature '(a: any): any'.
tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures4.ts(78,9): error TS2322: Type '{ new (x: { new (a: number): number; new (a?: number): number; }): number[]; new (x: { new (a: boolean): boolean; new (a?: boolean): boolean; }): boolean[]; }' is not assignable to type 'new <T>(x: (a: T) => T) => T[]'.
  Types of parameters 'x' and 'x' are incompatible.
    Type '(a: any) => any' is not assignable to type '{ new (a: number): number; new (a?: number): number; }'.
      Type '(a: any) => any' provides no match for the signature 'new (a: number): number'.
tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures4.ts(81,9): error TS2322: Type 'new <T>(x: (a: T) => T) => any[]' is not assignable to type '{ new (x: { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }): any[]; new (x: { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }): any[]; }'.
  Types of parameters 'x' and 'x' are incompatible.
    Type '{ new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }' is not assignable to type '(a: any) => any'.
      Type '{ new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }' provides no match for the signature '(a: any): any'.
tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures4.ts(82,9): error TS2322: Type '{ new (x: { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }): any[]; new (x: { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }): any[]; }' is not assignable to type 'new <T>(x: (a: T) => T) => any[]'.
  Types of parameters 'x' and 'x' are incompatible.
    Type '(a: any) => any' is not assignable to type '{ new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }'.
      Type '(a: any) => any' provides no match for the signature 'new <T extends Derived>(a: T): T'.


==== tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures4.ts (6 errors) ====
    // checking assignment compatibility relations for function types.
    
    module Errors {
        class Base { foo: string; }
        class Derived extends Base { bar: string; }
        class Derived2 extends Derived { baz: string; }
        class OtherDerived extends Base { bing: string; }
    
        module WithNonGenericSignaturesInBaseType {
            // target type with non-generic call signatures
            var a2: new (x: number) => string[];
            var a7: new (x: (arg: Base) => Derived) => (r: Base) => Derived2;
            var a8: new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived;
            var a10: new (...x: Base[]) => Base;
            var a11: new (x: { foo: string }, y: { foo: string; bar: string }) => Base;
            var a12: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
            var a14: {
                    new (x: number): number[];
                    new (x: string): string[];
                };
            var a15: new (x: { a: string; b: number }) => number;
            var a16: {
                    new (x: {
                        new (a: number): number;
                        new (a?: number): number;
                    }): number[];
                    new (x: {
                        new (a: boolean): boolean;
                        new (a?: boolean): boolean;
                    }): boolean[];
                };
            var a17: {
                    new (x: {
                        new <T extends Derived>(a: T): T;
                        new <T extends Base>(a: T): T;
                    }): any[];
                    new (x: {
                        new <T extends Derived2>(a: T): T;
                        new <T extends Base>(a: T): T;
                    }): any[];
                };
    
            var b2: new <T, U>(x: T) => U[]; 
            a2 = b2; // ok
            b2 = a2; // ok
    
            var b7: new <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V;
            a7 = b7; // ok
            b7 = a7; // ok
    
            var b8: new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U; 
            a8 = b8; // error, type mismatch
            ~~
!!! error TS2322: Type 'new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U' is not assignable to type 'new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived'.
!!! error TS2322:   Types of parameters 'y' and 'y' are incompatible.
!!! error TS2322:     Types of parameters 'arg2' and 'arg2' are incompatible.
!!! error TS2322:       Type '{ foo: number; }' is not assignable to type 'Base'.
!!! error TS2322:         Types of property 'foo' are incompatible.
!!! error TS2322:           Type 'number' is not assignable to type 'string'.
            b8 = a8; // error
            ~~
!!! error TS2322: Type 'new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived' is not assignable to type 'new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U'.
!!! error TS2322:   Types of parameters 'y' and 'y' are incompatible.
!!! error TS2322:     Types of parameters 'arg2' and 'arg2' are incompatible.
!!! error TS2322:       Type 'Base' is not assignable to type '{ foo: number; }'.
!!! error TS2322:         Types of property 'foo' are incompatible.
!!! error TS2322:           Type 'string' is not assignable to type 'number'.
    
            
            var b10: new <T extends Derived>(...x: T[]) => T; 
            a10 = b10; // ok
            b10 = a10; // ok
    
            var b11: new <T extends Derived>(x: T, y: T) => T; 
            a11 = b11; // ok
            b11 = a11; // ok
    
            var b12: new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T; 
            a12 = b12; // ok
            b12 = a12; // ok
    
            var b15: new <T>(x: { a: T; b: T }) => T; 
            a15 = b15; // ok
            b15 = a15; // ok
    
            var b15a: new <T extends Base>(x: { a: T; b: T }) => number; 
            a15 = b15a; // ok
            b15a = a15; // ok
    
            var b16: new <T>(x: (a: T) => T) => T[];
            a16 = b16; // error
            ~~~
!!! error TS2322: Type 'new <T>(x: (a: T) => T) => T[]' is not assignable to type '{ new (x: { new (a: number): number; new (a?: number): number; }): number[]; new (x: { new (a: boolean): boolean; new (a?: boolean): boolean; }): boolean[]; }'.
!!! error TS2322:   Types of parameters 'x' and 'x' are incompatible.
!!! error TS2322:     Type '{ new (a: number): number; new (a?: number): number; }' is not assignable to type '(a: any) => any'.
!!! error TS2322:       Type '{ new (a: number): number; new (a?: number): number; }' provides no match for the signature '(a: any): any'.
            b16 = a16; // error
            ~~~
!!! error TS2322: Type '{ new (x: { new (a: number): number; new (a?: number): number; }): number[]; new (x: { new (a: boolean): boolean; new (a?: boolean): boolean; }): boolean[]; }' is not assignable to type 'new <T>(x: (a: T) => T) => T[]'.
!!! error TS2322:   Types of parameters 'x' and 'x' are incompatible.
!!! error TS2322:     Type '(a: any) => any' is not assignable to type '{ new (a: number): number; new (a?: number): number; }'.
!!! error TS2322:       Type '(a: any) => any' provides no match for the signature 'new (a: number): number'.
    
            var b17: new <T>(x: (a: T) => T) => any[];
            a17 = b17; // error
            ~~~
!!! error TS2322: Type 'new <T>(x: (a: T) => T) => any[]' is not assignable to type '{ new (x: { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }): any[]; new (x: { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }): any[]; }'.
!!! error TS2322:   Types of parameters 'x' and 'x' are incompatible.
!!! error TS2322:     Type '{ new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }' is not assignable to type '(a: any) => any'.
!!! error TS2322:       Type '{ new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }' provides no match for the signature '(a: any): any'.
            b17 = a17; // error
            ~~~
!!! error TS2322: Type '{ new (x: { new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }): any[]; new (x: { new <T extends Derived2>(a: T): T; new <T extends Base>(a: T): T; }): any[]; }' is not assignable to type 'new <T>(x: (a: T) => T) => any[]'.
!!! error TS2322:   Types of parameters 'x' and 'x' are incompatible.
!!! error TS2322:     Type '(a: any) => any' is not assignable to type '{ new <T extends Derived>(a: T): T; new <T extends Base>(a: T): T; }'.
!!! error TS2322:       Type '(a: any) => any' provides no match for the signature 'new <T extends Derived>(a: T): T'.
        }
    
        module WithGenericSignaturesInBaseType {
            // target type has generic call signature
            var a2: new <T>(x: T) => T[];
            var b2: new <T>(x: T) => string[];
            a2 = b2; // ok
            b2 = a2; // ok
    
            // target type has generic call signature
            var a3: new <T>(x: T) => string[];
            var b3: new <T>(x: T) => T[]; 
            a3 = b3; // ok
            b3 = a3; // ok
        }
    }