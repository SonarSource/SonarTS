=== tests/cases/compiler/capturedLetConstInLoop1.ts ===
//==== let
for (let x in {}) {
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 1, 8))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 1, 8))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 1, 8))
}

for (let x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 6, 8))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 6, 8))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 6, 8))
}

for (let x = 0; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 11, 8))
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 11, 8))
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 11, 8))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 11, 8))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 11, 8))
}

while (1 === 1) {
    let x;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 17, 7))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 17, 7))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 17, 7))
}

do {
    let x;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 23, 7))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 23, 7))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 23, 7))

} while (1 === 1)

for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 28, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 28, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 28, 8))

    let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 29, 7))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 29, 7))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 29, 7))
}

for (let x = 0, y = 1; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 34, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 34, 15))
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 34, 8))
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 34, 8))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 34, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 34, 15))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 34, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 34, 15))
}

while (1 === 1) {
    let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 40, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 40, 10))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 40, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 40, 10))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 40, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 40, 10))
}

do {
    let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 46, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 46, 10))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 46, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 46, 10))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 46, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 46, 10))

} while (1 === 1)

for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 51, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 51, 8))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 51, 8))

    let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 52, 7))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 52, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 51, 8))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 52, 7))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 51, 8))
}

//=========const
for (const x in {}) {
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 58, 10))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 58, 10))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 58, 10))
}

for (const x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 63, 10))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 63, 10))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 63, 10))
}

for (const x = 0; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 68, 10))
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 68, 10))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 68, 10))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 68, 10))
}

while (1 === 1) {
    const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 74, 9))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 74, 9))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 74, 9))
}

do {
    const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 80, 9))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 80, 9))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 80, 9))

} while (1 === 1)

for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 85, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 85, 10))

    const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 86, 9))

    (function() { return x});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 86, 9))

    (() => x);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 86, 9))
}

for (const x = 0, y = 1; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 91, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 91, 17))
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 91, 10))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 91, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 91, 17))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 91, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 91, 17))
}

while (1 === 1) {
    const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 97, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 97, 16))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 97, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 97, 16))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 97, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 97, 16))
}

do {
    const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 103, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 103, 16))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 103, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 103, 16))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 103, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 103, 16))

} while (1 === 1)

for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 108, 10))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 108, 10))

    const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 109, 9))

    (function() { return x + y});
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 109, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 108, 10))

    (() => x + y);
>x : Symbol(x, Decl(capturedLetConstInLoop1.ts, 109, 9))
>y : Symbol(y, Decl(capturedLetConstInLoop1.ts, 108, 10))
}
