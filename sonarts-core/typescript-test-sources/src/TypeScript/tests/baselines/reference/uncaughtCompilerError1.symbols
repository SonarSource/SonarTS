=== tests/cases/compiler/uncaughtCompilerError1.ts ===
declare var index, lineTokens, token, tokens;
>index : Symbol(index, Decl(uncaughtCompilerError1.ts, 0, 11))
>lineTokens : Symbol(lineTokens, Decl(uncaughtCompilerError1.ts, 0, 18))
>token : Symbol(token, Decl(uncaughtCompilerError1.ts, 0, 30))
>tokens : Symbol(tokens, Decl(uncaughtCompilerError1.ts, 0, 37))

function f() {
>f : Symbol(f, Decl(uncaughtCompilerError1.ts, 0, 45))

    if (lineTokens[index].trim() === '=' && index > 0 && token.type === '' && tokens[index - 1].type === 'attribute.name.html') {
>lineTokens : Symbol(lineTokens, Decl(uncaughtCompilerError1.ts, 0, 18))
>index : Symbol(index, Decl(uncaughtCompilerError1.ts, 0, 11))
>index : Symbol(index, Decl(uncaughtCompilerError1.ts, 0, 11))
>token : Symbol(token, Decl(uncaughtCompilerError1.ts, 0, 30))
>tokens : Symbol(tokens, Decl(uncaughtCompilerError1.ts, 0, 37))
>index : Symbol(index, Decl(uncaughtCompilerError1.ts, 0, 11))

        if (index === (tokens.length - 1)) {
>index : Symbol(index, Decl(uncaughtCompilerError1.ts, 0, 11))
>tokens : Symbol(tokens, Decl(uncaughtCompilerError1.ts, 0, 37))

            return { appendText: '\"\"', advanceCount: 1 };
>appendText : Symbol(appendText, Decl(uncaughtCompilerError1.ts, 5, 20))
>advanceCount : Symbol(advanceCount, Decl(uncaughtCompilerError1.ts, 5, 40))
        }
        else if (tokens[index + 1].type !== 'attribute.value.html' && tokens[index + 1].type !== '') {
>tokens : Symbol(tokens, Decl(uncaughtCompilerError1.ts, 0, 37))
>index : Symbol(index, Decl(uncaughtCompilerError1.ts, 0, 11))
>tokens : Symbol(tokens, Decl(uncaughtCompilerError1.ts, 0, 37))
>index : Symbol(index, Decl(uncaughtCompilerError1.ts, 0, 11))

            return { appendText: '\"\"', advanceCount: 1 };
>appendText : Symbol(appendText, Decl(uncaughtCompilerError1.ts, 8, 20))
>advanceCount : Symbol(advanceCount, Decl(uncaughtCompilerError1.ts, 8, 40))
        }
        return null;
    }
}

