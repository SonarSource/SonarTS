=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesThatDifferOnlyByReturnType3.ts ===
// Normally it is an error to have multiple overloads with identical signatures in a single type declaration.
// Here the multiple overloads come from multiple merged declarations.

interface I {
>I : Symbol(I, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 0, 0), Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 5, 1))

    (x: string): string;
>x : Symbol(x, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 4, 5))
}

interface I {
>I : Symbol(I, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 0, 0), Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 5, 1))

    (x: string): number;
>x : Symbol(x, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 8, 5))
}

interface I2<T> {
>I2 : Symbol(I2, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 9, 1), Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 13, 1))
>T : Symbol(T, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 11, 13), Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 15, 13))

    (x: string): string;
>x : Symbol(x, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 12, 5))
}

interface I2<T> {
>I2 : Symbol(I2, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 9, 1), Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 13, 1))
>T : Symbol(T, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 11, 13), Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 15, 13))

    (x: string): number;
>x : Symbol(x, Decl(callSignaturesThatDifferOnlyByReturnType3.ts, 16, 5))
}
