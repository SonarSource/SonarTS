tests/cases/conformance/jsx/file.tsx(19,16): error TS2322: Type '{ naaame: "world"; }' is not assignable to type 'IntrinsicAttributes & { name: string; }'.
  Type '{ naaame: "world"; }' is not assignable to type '{ name: string; }'.
    Property 'name' is missing in type '{ naaame: "world"; }'.
tests/cases/conformance/jsx/file.tsx(27,15): error TS2322: Type '{ name: 42; }' is not assignable to type 'IntrinsicAttributes & { name?: string; }'.
  Type '{ name: 42; }' is not assignable to type '{ name?: string; }'.
    Types of property 'name' are incompatible.
      Type '42' is not assignable to type 'string'.
tests/cases/conformance/jsx/file.tsx(29,15): error TS2339: Property 'naaaaaaame' does not exist on type 'IntrinsicAttributes & { name?: string; }'.
tests/cases/conformance/jsx/file.tsx(34,23): error TS2322: Type '{}' is not assignable to type 'IntrinsicAttributes & { "prop-name": string; }'.
  Type '{}' is not assignable to type '{ "prop-name": string; }'.
    Property '"prop-name"' is missing in type '{}'.
tests/cases/conformance/jsx/file.tsx(37,23): error TS2339: Property 'prop1' does not exist on type 'IntrinsicAttributes'.
tests/cases/conformance/jsx/file.tsx(38,24): error TS2339: Property 'ref' does not exist on type 'IntrinsicAttributes'.
tests/cases/conformance/jsx/file.tsx(41,16): error TS1005: ',' expected.


==== tests/cases/conformance/jsx/file.tsx (7 errors) ====
    function EmptyPropSFC() {
        return <div> Default Greeting </div>;
    }
    
    function Greet(x: {name: string}) {
    	return <div>Hello, {x}</div>;
    }
    function Meet({name = 'world'}) {
    	return <div>Hello, {name}</div>;
    }
    function MeetAndGreet(k: {"prop-name": string}) {
    	return <div>Hi Hi</div>;
    }
    
    // OK
    let a = <Greet name='world' />;
    let a1 = <Greet name='world' extra-prop />;
    // Error
    let b = <Greet naaame='world' />;
                   ~~~~~~~~~~~~~~
!!! error TS2322: Type '{ naaame: "world"; }' is not assignable to type 'IntrinsicAttributes & { name: string; }'.
!!! error TS2322:   Type '{ naaame: "world"; }' is not assignable to type '{ name: string; }'.
!!! error TS2322:     Property 'name' is missing in type '{ naaame: "world"; }'.
    
    // OK
    let c = <Meet />;
    let c1 = <Meet extra-prop/>;
    // OK
    let d = <Meet name='me' />;
    // Error
    let e = <Meet name={42} />;
                  ~~~~~~~~~
!!! error TS2322: Type '{ name: 42; }' is not assignable to type 'IntrinsicAttributes & { name?: string; }'.
!!! error TS2322:   Type '{ name: 42; }' is not assignable to type '{ name?: string; }'.
!!! error TS2322:     Types of property 'name' are incompatible.
!!! error TS2322:       Type '42' is not assignable to type 'string'.
    // Error
    let f = <Meet naaaaaaame='no' />;
                  ~~~~~~~~~~~~~~~
!!! error TS2339: Property 'naaaaaaame' does not exist on type 'IntrinsicAttributes & { name?: string; }'.
    
    // OK
    let g = <MeetAndGreet prop-name="Bob" />;
    // Error
    let h = <MeetAndGreet extra-prop-name="World" />;
                          ~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '{}' is not assignable to type 'IntrinsicAttributes & { "prop-name": string; }'.
!!! error TS2322:   Type '{}' is not assignable to type '{ "prop-name": string; }'.
!!! error TS2322:     Property '"prop-name"' is missing in type '{}'.
    
    // Error
    let i = <EmptyPropSFC prop1 />
                          ~~~~~
!!! error TS2339: Property 'prop1' does not exist on type 'IntrinsicAttributes'.
    let i1 = <EmptyPropSFC ref={x => x.greeting.substr(10)} />
                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2339: Property 'ref' does not exist on type 'IntrinsicAttributes'.
    
    let o = {
        prop1: true;
                   ~
!!! error TS1005: ',' expected.
    }
    
    // OK as access properties are allow when spread
    let i2 = <EmptyPropSFC {...o} />
    
    let o1: any;
    // OK
    let j = <EmptyPropSFC {...o1} />
    let j1 = <EmptyPropSFC />
    let j2 = <EmptyPropSFC data-prop />
    let j3 = <EmptyPropSFC {...{}} />
    let j4 = <EmptyPropSFC {...{ "data-info": "hi"}} />
    
    