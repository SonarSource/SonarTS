=== tests/cases/compiler/checkSuperCallBeforeThisAccessing3.ts ===
class Based { }
>Based : Symbol(Based, Decl(checkSuperCallBeforeThisAccessing3.ts, 0, 0))

class Derived extends Based {
>Derived : Symbol(Derived, Decl(checkSuperCallBeforeThisAccessing3.ts, 0, 15))
>Based : Symbol(Based, Decl(checkSuperCallBeforeThisAccessing3.ts, 0, 0))

    public x: number;
>x : Symbol(Derived.x, Decl(checkSuperCallBeforeThisAccessing3.ts, 1, 29))

    constructor() {
        class innver {
>innver : Symbol(innver, Decl(checkSuperCallBeforeThisAccessing3.ts, 3, 19))

            public y: boolean;
>y : Symbol(innver.y, Decl(checkSuperCallBeforeThisAccessing3.ts, 4, 22))

            constructor() {
                this.y = true;
>this.y : Symbol(innver.y, Decl(checkSuperCallBeforeThisAccessing3.ts, 4, 22))
>this : Symbol(innver, Decl(checkSuperCallBeforeThisAccessing3.ts, 3, 19))
>y : Symbol(innver.y, Decl(checkSuperCallBeforeThisAccessing3.ts, 4, 22))
            }
        }
        super();
>super : Symbol(Based, Decl(checkSuperCallBeforeThisAccessing3.ts, 0, 0))

        this.x = 10;
>this.x : Symbol(Derived.x, Decl(checkSuperCallBeforeThisAccessing3.ts, 1, 29))
>this : Symbol(Derived, Decl(checkSuperCallBeforeThisAccessing3.ts, 0, 15))
>x : Symbol(Derived.x, Decl(checkSuperCallBeforeThisAccessing3.ts, 1, 29))

        var that = this;
>that : Symbol(that, Decl(checkSuperCallBeforeThisAccessing3.ts, 12, 11))
>this : Symbol(Derived, Decl(checkSuperCallBeforeThisAccessing3.ts, 0, 15))
    }
}
