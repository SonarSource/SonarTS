=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/typeParameterUsedAsTypeParameterConstraint.ts ===
// Type parameters are in scope in their own and other type parameter lists

function foo<T, U extends T>(x: T, y: U): T {
>foo : Symbol(foo, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 0, 0))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 13))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 15))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 13))
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 29))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 13))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 34))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 15))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 13))

    x = y;
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 29))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 34))

    return y;
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 2, 34))
}

function foo2<U extends T, T>(x: T, y: U): T {
>foo2 : Symbol(foo2, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 5, 1))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 14))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 26))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 26))
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 30))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 26))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 35))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 14))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 26))

    x = y;
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 30))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 35))

    return y;
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 7, 35))
}

var f = function <T, U extends T>(x: T, y: U): T {
>f : Symbol(f, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 3))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 18))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 20))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 18))
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 34))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 18))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 39))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 20))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 18))

    x = y;
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 34))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 39))

    return y;
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 12, 39))
}

var f2 = function <U extends T, T>(x: T, y: U): T {
>f2 : Symbol(f2, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 3))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 19))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 31))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 31))
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 35))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 31))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 40))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 19))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 31))

    x = y;
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 35))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 40))

    return y;
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 17, 40))
}

var f3 = <T, U extends T>(x: T, y: U): T => {
>f3 : Symbol(f3, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 3))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 10))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 12))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 10))
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 26))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 10))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 31))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 12))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 10))

    x = y;
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 26))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 31))

    return y;
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 22, 31))
}

var f4 = <U extends T, T>(x: T, y: U): T => {
>f4 : Symbol(f4, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 3))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 10))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 22))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 22))
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 26))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 22))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 31))
>U : Symbol(U, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 10))
>T : Symbol(T, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 22))

    x = y;
>x : Symbol(x, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 26))
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 31))

    return y;
>y : Symbol(y, Decl(typeParameterUsedAsTypeParameterConstraint.ts, 27, 31))
}
