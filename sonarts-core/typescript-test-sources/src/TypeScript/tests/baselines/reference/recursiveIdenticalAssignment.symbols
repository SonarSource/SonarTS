=== tests/cases/compiler/recursiveIdenticalAssignment.ts ===
interface A<T> {
>A : Symbol(A, Decl(recursiveIdenticalAssignment.ts, 0, 0))
>T : Symbol(T, Decl(recursiveIdenticalAssignment.ts, 0, 12))

    x: A<T>
>x : Symbol(A.x, Decl(recursiveIdenticalAssignment.ts, 0, 16))
>A : Symbol(A, Decl(recursiveIdenticalAssignment.ts, 0, 0))
>T : Symbol(T, Decl(recursiveIdenticalAssignment.ts, 0, 12))
}

interface B<T extends B<B<T>>> { // error, constraint referencing itself
>B : Symbol(B, Decl(recursiveIdenticalAssignment.ts, 2, 1))
>T : Symbol(T, Decl(recursiveIdenticalAssignment.ts, 4, 12))
>B : Symbol(B, Decl(recursiveIdenticalAssignment.ts, 2, 1))
>B : Symbol(B, Decl(recursiveIdenticalAssignment.ts, 2, 1))
>T : Symbol(T, Decl(recursiveIdenticalAssignment.ts, 4, 12))

    x: B<T>
>x : Symbol(B.x, Decl(recursiveIdenticalAssignment.ts, 4, 32))
>B : Symbol(B, Decl(recursiveIdenticalAssignment.ts, 2, 1))
>T : Symbol(T, Decl(recursiveIdenticalAssignment.ts, 4, 12))
}

var a: A<A<any>>
>a : Symbol(a, Decl(recursiveIdenticalAssignment.ts, 8, 3))
>A : Symbol(A, Decl(recursiveIdenticalAssignment.ts, 0, 0))
>A : Symbol(A, Decl(recursiveIdenticalAssignment.ts, 0, 0))

var b: B<B<any>> = a // Error, any does not satisfy constraint B<B<T>>
>b : Symbol(b, Decl(recursiveIdenticalAssignment.ts, 9, 3))
>B : Symbol(B, Decl(recursiveIdenticalAssignment.ts, 2, 1))
>B : Symbol(B, Decl(recursiveIdenticalAssignment.ts, 2, 1))
>a : Symbol(a, Decl(recursiveIdenticalAssignment.ts, 8, 3))

