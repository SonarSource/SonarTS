=== tests/cases/compiler/nestedBlockScopedBindings2.ts ===
function a0() {
>a0 : Symbol(a0, Decl(nestedBlockScopedBindings2.ts, 0, 0))
    {
        let x = 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 2, 11))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 2, 11))
    }
    {
        let x = 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 6, 11))
    }
}

function a1() {
>a1 : Symbol(a1, Decl(nestedBlockScopedBindings2.ts, 8, 1))
    {
        let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 12, 11))
    }
    {
        let x = 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 15, 11))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 15, 11))
    }
}

function a2() {
>a2 : Symbol(a2, Decl(nestedBlockScopedBindings2.ts, 18, 1))
    {
        let x = 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 22, 11))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 22, 11))
    }
    {
        let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 26, 11))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 26, 11))
    }
}


function a3() {
>a3 : Symbol(a3, Decl(nestedBlockScopedBindings2.ts, 29, 1))
    {
        let x = 1;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 34, 11))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 34, 11))
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 39, 15))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 39, 15))

            break;
    }
}


function a4() {
>a4 : Symbol(a4, Decl(nestedBlockScopedBindings2.ts, 43, 1))
    {
        let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 48, 11))
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 52, 15))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 52, 15))

            break;
    }
}


function a5() {
>a5 : Symbol(a5, Decl(nestedBlockScopedBindings2.ts, 56, 1))
    {
        let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 61, 11))

        () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 61, 11))
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 66, 15))

            break;
    }
}

function a6() {
>a6 : Symbol(a6, Decl(nestedBlockScopedBindings2.ts, 69, 1))

    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 74, 15))

            break;
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 79, 15))

            break;
    }
}

function a7() {
>a7 : Symbol(a7, Decl(nestedBlockScopedBindings2.ts, 82, 1))

    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 87, 15))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 87, 15))

            break;
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 93, 15))

            break;
    }
}

function a8() {
>a8 : Symbol(a8, Decl(nestedBlockScopedBindings2.ts, 96, 1))

    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 101, 15))

            break;
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 106, 15))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 106, 15))

            break;
    }
}

function a9() {
>a9 : Symbol(a9, Decl(nestedBlockScopedBindings2.ts, 110, 1))

    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 115, 15))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 115, 15))

            break;
    }
    switch (1) {
        case 1:
            let x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 121, 15))

            () => x;
>x : Symbol(x, Decl(nestedBlockScopedBindings2.ts, 121, 15))

            break;
    }
}

