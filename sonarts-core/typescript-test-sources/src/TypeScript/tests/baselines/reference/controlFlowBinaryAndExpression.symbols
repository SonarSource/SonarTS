=== tests/cases/conformance/controlFlow/controlFlowBinaryAndExpression.ts ===
let x: string | number | boolean;
>x : Symbol(x, Decl(controlFlowBinaryAndExpression.ts, 0, 3))

let cond: boolean;
>cond : Symbol(cond, Decl(controlFlowBinaryAndExpression.ts, 1, 3))

(x = "") && (x = 0);
>x : Symbol(x, Decl(controlFlowBinaryAndExpression.ts, 0, 3))
>x : Symbol(x, Decl(controlFlowBinaryAndExpression.ts, 0, 3))

x; // string | number
>x : Symbol(x, Decl(controlFlowBinaryAndExpression.ts, 0, 3))

x = "";
>x : Symbol(x, Decl(controlFlowBinaryAndExpression.ts, 0, 3))

cond && (x = 0);
>cond : Symbol(cond, Decl(controlFlowBinaryAndExpression.ts, 1, 3))
>x : Symbol(x, Decl(controlFlowBinaryAndExpression.ts, 0, 3))

x; // string | number
>x : Symbol(x, Decl(controlFlowBinaryAndExpression.ts, 0, 3))

