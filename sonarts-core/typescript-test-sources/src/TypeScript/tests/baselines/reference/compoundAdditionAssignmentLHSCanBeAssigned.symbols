=== tests/cases/conformance/expressions/assignmentOperator/compoundAdditionAssignmentLHSCanBeAssigned.ts ===
enum E { a, b }
>E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
>a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
>b : Symbol(E.b, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 11))

var a: any;
>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 2, 3))

var b: void;
>b : Symbol(b, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 3, 3))

var x1: any;
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))

x1 += a;
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))
>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 2, 3))

x1 += b;
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))
>b : Symbol(b, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 3, 3))

x1 += true;
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))

x1 += 0;
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))

x1 += '';
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))

x1 += E.a;
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))
>E.a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
>E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
>a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))

x1 += {};
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))

x1 += null;
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))

x1 += undefined;
>x1 : Symbol(x1, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 5, 3))
>undefined : Symbol(undefined)

var x2: string;
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))

x2 += a;
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))
>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 2, 3))

x2 += b;
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))
>b : Symbol(b, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 3, 3))

x2 += true;
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))

x2 += 0;
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))

x2 += '';
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))

x2 += E.a;
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))
>E.a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
>E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
>a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))

x2 += {};
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))

x2 += null;
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))

x2 += undefined;
>x2 : Symbol(x2, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 16, 3))
>undefined : Symbol(undefined)

var x3: number;
>x3 : Symbol(x3, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 27, 3))

x3 += a;
>x3 : Symbol(x3, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 27, 3))
>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 2, 3))

x3 += 0;
>x3 : Symbol(x3, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 27, 3))

x3 += E.a;
>x3 : Symbol(x3, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 27, 3))
>E.a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
>E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
>a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))

x3 += null;
>x3 : Symbol(x3, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 27, 3))

x3 += undefined;
>x3 : Symbol(x3, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 27, 3))
>undefined : Symbol(undefined)

var x4: E;
>x4 : Symbol(x4, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 34, 3))
>E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))

x4 += a;
>x4 : Symbol(x4, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 34, 3))
>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 2, 3))

x4 += 0;
>x4 : Symbol(x4, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 34, 3))

x4 += E.a;
>x4 : Symbol(x4, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 34, 3))
>E.a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))
>E : Symbol(E, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 0))
>a : Symbol(E.a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 0, 8))

x4 += null;
>x4 : Symbol(x4, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 34, 3))

x4 += undefined;
>x4 : Symbol(x4, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 34, 3))
>undefined : Symbol(undefined)

var x5: boolean;
>x5 : Symbol(x5, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 41, 3))

x5 += a;
>x5 : Symbol(x5, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 41, 3))
>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 2, 3))

var x6: {};
>x6 : Symbol(x6, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 44, 3))

x6 += a;
>x6 : Symbol(x6, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 44, 3))
>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 2, 3))

x6 += '';
>x6 : Symbol(x6, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 44, 3))

var x7: void;
>x7 : Symbol(x7, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 48, 3))

x7 += a;
>x7 : Symbol(x7, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 48, 3))
>a : Symbol(a, Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts, 2, 3))

