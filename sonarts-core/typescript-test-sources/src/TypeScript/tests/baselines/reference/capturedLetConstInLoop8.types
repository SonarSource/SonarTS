=== tests/cases/compiler/capturedLetConstInLoop8.ts ===
function foo() {
>foo : () => string

    l0:
>l0 : any

    for (let z = 0; z < 1; ++z) {
>z : number
>0 : number
>z < 1 : boolean
>z : number
>1 : number
>++z : number
>z : number

        l1:
>l1 : any

        for (let x = 0; x < 1; ++x) {
>x : number
>0 : number
>x < 1 : boolean
>x : number
>1 : number
>++x : number
>x : number

            ll1:
>ll1 : any

            for (let y = 0; y < 1; ++y) {
>y : number
>0 : number
>y < 1 : boolean
>y : number
>1 : number
>++y : number
>y : number

                (function() { return x + y });
>(function() { return x + y }) : () => number
>function() { return x + y } : () => number
>x + y : number
>x : number
>y : number

                (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>x : number
>y : number

                if (y == 1) {
>y == 1 : boolean
>y : number
>1 : 1

                    break;
                }
                if (y == 1) {
>y == 1 : boolean
>y : number
>1 : 1

                    break l1;
>l1 : any
                }
                if (y == 1) {
>y == 1 : boolean
>y : number
>1 : 1

                    break ll1;
>ll1 : any
                }
                if (y == 1) {
>y == 1 : boolean
>y : number
>1 : 1

                    continue l0;
>l0 : any
                }

                if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                    continue;
                }
                if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                    continue l1;
>l1 : any
                }
                if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                    continue ll1;
>ll1 : any
                }
                if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                    return "123"
>"123" : string
                }
                if (x == 3) {
>x == 3 : boolean
>x : number
>3 : 3

                    return;
                }
            }
            if (x == 1) {
>x == 1 : boolean
>x : number
>1 : 1

                break;
            }
            if (x == 1) {
>x == 1 : boolean
>x : number
>1 : 1

                break l1;
>l1 : any
            }
            if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                continue;
            }
            if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                continue l1;
>l1 : any
            }
            if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                continue l0;
>l0 : any
            }
            if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                return "456";
>"456" : string
            }
            if (x == 3) {
>x == 3 : boolean
>x : number
>3 : 3

                return;
            }
        }
    }
}

function foo_c() {
>foo_c : () => string

    l0:
>l0 : any

    for (const z = 0; z < 1;) {
>z : number
>0 : number
>z < 1 : boolean
>z : number
>1 : number

        l1:
>l1 : any

        for (const x = 0; x < 1;) {
>x : number
>0 : number
>x < 1 : boolean
>x : number
>1 : number

            ll1:
>ll1 : any

            for (const y = 0; y < 1;) {
>y : number
>0 : number
>y < 1 : boolean
>y : number
>1 : number

                (function() { return x + y });
>(function() { return x + y }) : () => number
>function() { return x + y } : () => number
>x + y : number
>x : number
>y : number

                (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>x : number
>y : number

                if (y == 1) {
>y == 1 : boolean
>y : number
>1 : 1

                    break;
                }
                if (y == 1) {
>y == 1 : boolean
>y : number
>1 : 1

                    break l1;
>l1 : any
                }
                if (y == 1) {
>y == 1 : boolean
>y : number
>1 : 1

                    break ll1;
>ll1 : any
                }
                if (y == 1) {
>y == 1 : boolean
>y : number
>1 : 1

                    continue l0;
>l0 : any
                }

                if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                    continue;
                }
                if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                    continue l1;
>l1 : any
                }
                if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                    continue ll1;
>ll1 : any
                }
                if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                    return "123"
>"123" : string
                }
                if (x == 3) {
>x == 3 : boolean
>x : number
>3 : 3

                    return;
                }
            }
            if (x == 1) {
>x == 1 : boolean
>x : number
>1 : 1

                break;
            }
            if (x == 1) {
>x == 1 : boolean
>x : number
>1 : 1

                break l1;
>l1 : any
            }
            if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                continue;
            }
            if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                continue l1;
>l1 : any
            }
            if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                continue l0;
>l0 : any
            }
            if (x == 2) {
>x == 2 : boolean
>x : number
>2 : 2

                return "456";
>"456" : string
            }
            if (x == 3) {
>x == 3 : boolean
>x : number
>3 : 3

                return;
            }
        }
    }
}

