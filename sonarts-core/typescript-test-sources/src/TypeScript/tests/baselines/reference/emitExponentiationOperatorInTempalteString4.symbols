=== tests/cases/conformance/es7/exponentiationOperator/emitExponentiationOperatorInTempalteString4.ts ===
var t1 = 10;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

var t2 = 10;
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))

var s;
>s : Symbol(s, Decl(emitExponentiationOperatorInTempalteString4.ts, 2, 3))

// With TemplateTail
`${t1 ** -t2} world`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))

`${(-t1) ** t2 - t1} world`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`${(-++t1) ** t2 - t1} world`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`${(-t1++) ** t2 - t1} world`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`${(~t1) ** t2 ** --t1 } world`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`${typeof (t1 ** t2 ** t1) } world`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

// TempateHead & TemplateTail are empt
`${t1 ** -t2} hello world ${t1 ** -t2}`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))

`${(-t1) ** t2 - t1} hello world ${(-t1) ** t2 - t1}`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`${(-++t1) ** t2 - t1} hello world ${t1 ** (-++t1) **- t1}`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`${(-t1++) ** t2 - t1} hello world ${t2 ** (-t1++) **  - t1}`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`${(~t1) ** t2 ** --t1 } hello world ${(~t1) ** t2 ** --t1 }`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`${typeof (t1 ** t2 ** t1)} hello world ${typeof (t1 ** t2 ** t1)}`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

// With templateHead
`hello ${(-t1) ** t2 - t1}`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`hello ${(-++t1) ** t2 - t1}`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`hello ${(-t1++) ** t2 - t1}`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`hello ${(~t1) ** t2 ** --t1 }`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

`hello ${typeof (t1 ** t2 ** t1)}`;
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))
>t2 : Symbol(t2, Decl(emitExponentiationOperatorInTempalteString4.ts, 1, 3))
>t1 : Symbol(t1, Decl(emitExponentiationOperatorInTempalteString4.ts, 0, 3))

