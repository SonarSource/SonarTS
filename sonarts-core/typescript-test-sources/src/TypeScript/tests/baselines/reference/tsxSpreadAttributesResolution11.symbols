=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : Symbol(React, Decl(file.tsx, 0, 0))

const obj = {};
>obj : Symbol(obj, Decl(file.tsx, 2, 5))

const obj1: { x: 2 } = {
>obj1 : Symbol(obj1, Decl(file.tsx, 3, 5))
>x : Symbol(x, Decl(file.tsx, 3, 13))

    x: 2
>x : Symbol(x, Decl(file.tsx, 3, 24))
}
const obj3: {y: true, overwrite: string } = {
>obj3 : Symbol(obj3, Decl(file.tsx, 6, 5))
>y : Symbol(y, Decl(file.tsx, 6, 13))
>overwrite : Symbol(overwrite, Decl(file.tsx, 6, 21))

    y: true,
>y : Symbol(y, Decl(file.tsx, 6, 45))

    overwrite: "hi"
>overwrite : Symbol(overwrite, Decl(file.tsx, 7, 12))
}

interface Prop {
>Prop : Symbol(Prop, Decl(file.tsx, 9, 1))

    x: 2
>x : Symbol(Prop.x, Decl(file.tsx, 11, 16))

    y: true
>y : Symbol(Prop.y, Decl(file.tsx, 12, 8))

    overwrite: string
>overwrite : Symbol(Prop.overwrite, Decl(file.tsx, 13, 11))
}

class OverWriteAttr extends React.Component<Prop, {}> {
>OverWriteAttr : Symbol(OverWriteAttr, Decl(file.tsx, 15, 1))
>React.Component : Symbol(React.Component, Decl(react.d.ts, 158, 55))
>React : Symbol(React, Decl(file.tsx, 0, 0))
>Component : Symbol(React.Component, Decl(react.d.ts, 158, 55))
>Prop : Symbol(Prop, Decl(file.tsx, 9, 1))

    render() {
>render : Symbol(OverWriteAttr.render, Decl(file.tsx, 17, 55))

        return <div>Hello</div>;
>div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2399, 45))
>div : Symbol(JSX.IntrinsicElements.div, Decl(react.d.ts, 2399, 45))
    }
}

let anyobj: any;
>anyobj : Symbol(anyobj, Decl(file.tsx, 23, 3))

// OK
let x = <OverWriteAttr {...obj} y overwrite="hi" {...obj1} />
>x : Symbol(x, Decl(file.tsx, 25, 3))
>OverWriteAttr : Symbol(OverWriteAttr, Decl(file.tsx, 15, 1))
>obj : Symbol(obj, Decl(file.tsx, 2, 5))
>y : Symbol(y, Decl(file.tsx, 25, 31))
>overwrite : Symbol(overwrite, Decl(file.tsx, 25, 33))
>obj1 : Symbol(obj1, Decl(file.tsx, 3, 5))

let x1 = <OverWriteAttr {...obj1} {...obj3} />
>x1 : Symbol(x1, Decl(file.tsx, 26, 3))
>OverWriteAttr : Symbol(OverWriteAttr, Decl(file.tsx, 15, 1))
>obj1 : Symbol(obj1, Decl(file.tsx, 3, 5))
>obj3 : Symbol(obj3, Decl(file.tsx, 6, 5))

let x2 = <OverWriteAttr x={3} overwrite="hi" {...obj1} {...{y: true}} />
>x2 : Symbol(x2, Decl(file.tsx, 27, 3))
>OverWriteAttr : Symbol(OverWriteAttr, Decl(file.tsx, 15, 1))
>x : Symbol(x, Decl(file.tsx, 27, 23))
>overwrite : Symbol(overwrite, Decl(file.tsx, 27, 29))
>obj1 : Symbol(obj1, Decl(file.tsx, 3, 5))
>y : Symbol(y, Decl(file.tsx, 27, 60))

let x3 = <OverWriteAttr overwrite="hi" {...obj1} x={3} {...{y: true, x: 2, overwrite:"world"}} />
>x3 : Symbol(x3, Decl(file.tsx, 28, 3))
>OverWriteAttr : Symbol(OverWriteAttr, Decl(file.tsx, 15, 1))
>overwrite : Symbol(overwrite, Decl(file.tsx, 28, 23))
>obj1 : Symbol(obj1, Decl(file.tsx, 3, 5))
>x : Symbol(x, Decl(file.tsx, 28, 48))
>y : Symbol(y, Decl(file.tsx, 28, 60))
>x : Symbol(x, Decl(file.tsx, 28, 68))
>overwrite : Symbol(overwrite, Decl(file.tsx, 28, 74))

let x4 = <OverWriteAttr {...{x: 2}} {...{overwrite: "world"}} {...{y: true}} />
>x4 : Symbol(x4, Decl(file.tsx, 29, 3))
>OverWriteAttr : Symbol(OverWriteAttr, Decl(file.tsx, 15, 1))
>x : Symbol(x, Decl(file.tsx, 29, 29))
>overwrite : Symbol(overwrite, Decl(file.tsx, 29, 41))
>y : Symbol(y, Decl(file.tsx, 29, 67))

let x5 = <OverWriteAttr {...anyobj} />
>x5 : Symbol(x5, Decl(file.tsx, 30, 3))
>OverWriteAttr : Symbol(OverWriteAttr, Decl(file.tsx, 15, 1))
>anyobj : Symbol(anyobj, Decl(file.tsx, 23, 3))

