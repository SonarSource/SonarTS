=== tests/cases/compiler/es5-asyncFunctionDoStatements.ts ===
declare var x, y, z, a, b, c;
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
>z : Symbol(z, Decl(es5-asyncFunctionDoStatements.ts, 0, 17))
>a : Symbol(a, Decl(es5-asyncFunctionDoStatements.ts, 0, 20))
>b : Symbol(b, Decl(es5-asyncFunctionDoStatements.ts, 0, 23))
>c : Symbol(c, Decl(es5-asyncFunctionDoStatements.ts, 0, 26))

async function doStatement0() {
>doStatement0 : Symbol(doStatement0, Decl(es5-asyncFunctionDoStatements.ts, 0, 29))

    do { x; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement1() {
>doStatement1 : Symbol(doStatement1, Decl(es5-asyncFunctionDoStatements.ts, 4, 1))

    do { await x; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement2() {
>doStatement2 : Symbol(doStatement2, Decl(es5-asyncFunctionDoStatements.ts, 8, 1))

    do { x; } while (await y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement3() {
>doStatement3 : Symbol(doStatement3, Decl(es5-asyncFunctionDoStatements.ts, 12, 1))

    do { continue; } while (y);
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement4() {
>doStatement4 : Symbol(doStatement4, Decl(es5-asyncFunctionDoStatements.ts, 16, 1))

    do { await x; continue; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement5() {
>doStatement5 : Symbol(doStatement5, Decl(es5-asyncFunctionDoStatements.ts, 20, 1))

    do { if (1) continue; await x; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement6() {
>doStatement6 : Symbol(doStatement6, Decl(es5-asyncFunctionDoStatements.ts, 24, 1))

    do { continue; } while (await y);
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement7() {
>doStatement7 : Symbol(doStatement7, Decl(es5-asyncFunctionDoStatements.ts, 28, 1))

    A: do { continue A; } while (y);
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement8() {
>doStatement8 : Symbol(doStatement8, Decl(es5-asyncFunctionDoStatements.ts, 32, 1))

    B: do { await x; continue B; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement9() {
>doStatement9 : Symbol(doStatement9, Decl(es5-asyncFunctionDoStatements.ts, 36, 1))

    C: do { if (1) continue C; await x; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement10() {
>doStatement10 : Symbol(doStatement10, Decl(es5-asyncFunctionDoStatements.ts, 40, 1))

    D: do { continue D; } while (await y);
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement11() {
>doStatement11 : Symbol(doStatement11, Decl(es5-asyncFunctionDoStatements.ts, 44, 1))

    do { break; } while (y);
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement12() {
>doStatement12 : Symbol(doStatement12, Decl(es5-asyncFunctionDoStatements.ts, 48, 1))

    do { await x; break; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement13() {
>doStatement13 : Symbol(doStatement13, Decl(es5-asyncFunctionDoStatements.ts, 52, 1))

    do { if (1) break; await x; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement14() {
>doStatement14 : Symbol(doStatement14, Decl(es5-asyncFunctionDoStatements.ts, 56, 1))

    do { break; } while (await y);
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement15() {
>doStatement15 : Symbol(doStatement15, Decl(es5-asyncFunctionDoStatements.ts, 60, 1))

    E: do { break E; } while (y);
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement16() {
>doStatement16 : Symbol(doStatement16, Decl(es5-asyncFunctionDoStatements.ts, 64, 1))

    F: do { await x; break F; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement17() {
>doStatement17 : Symbol(doStatement17, Decl(es5-asyncFunctionDoStatements.ts, 68, 1))

    G: do { if (1) break G; await x; } while (y);
>x : Symbol(x, Decl(es5-asyncFunctionDoStatements.ts, 0, 11))
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}

async function doStatement18() {
>doStatement18 : Symbol(doStatement18, Decl(es5-asyncFunctionDoStatements.ts, 72, 1))

    H: do { break H; } while (await y);
>y : Symbol(y, Decl(es5-asyncFunctionDoStatements.ts, 0, 14))
}
