=== tests/cases/compiler/f1.ts ===
export class A {}
>A : A

=== tests/cases/compiler/f2.ts ===
export class B {
>B : B

    n: number;
>n : number
}

=== tests/cases/compiler/f3.ts ===
import {A} from "./f1";
>A : typeof A

import {B} from "./f2";
>B : typeof B

A.prototype.foo = function () { return undefined; }
>A.prototype.foo = function () { return undefined; } : () => any
>A.prototype.foo : () => B
>A.prototype : A
>A : typeof A
>prototype : A
>foo : () => B
>function () { return undefined; } : () => any
>undefined : undefined

export namespace N {
>N : any

    export interface Ifc { a: number; }
>Ifc : Ifc
>a : number

    export interface Cls { b: number; }
>Cls : Cls
>b : number
}
import I = N.Ifc;
>I : any
>N : any
>Ifc : I

import C = N.Cls;
>C : any
>N : any
>Cls : C

declare module "./f1" {
    interface A {
>A : A

        foo(): B;
>foo : () => B
>B : B

        bar(): I;
>bar : () => I
>I : I

        baz(): C;
>baz : () => C
>C : C
    }
}

=== tests/cases/compiler/f4.ts ===
import {A} from "./f1";
>A : typeof A

import "./f3";

let a: A;
>a : A
>A : A

let b = a.foo().n;
>b : number
>a.foo().n : number
>a.foo() : B
>a.foo : () => B
>a : A
>foo : () => B
>n : number

let c = a.bar().a;
>c : number
>a.bar().a : number
>a.bar() : N.Ifc
>a.bar : () => N.Ifc
>a : A
>bar : () => N.Ifc
>a : number

let d = a.baz().b;
>d : number
>a.baz().b : number
>a.baz() : N.Cls
>a.baz : () => N.Cls
>a : A
>baz : () => N.Cls
>b : number

