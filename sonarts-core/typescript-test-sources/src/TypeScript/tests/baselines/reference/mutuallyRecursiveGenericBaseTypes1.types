=== tests/cases/compiler/mutuallyRecursiveGenericBaseTypes1.ts ===
interface A<T> {
>A : A<T>
>T : T

    foo(): B<T>; // instead of B does see this
>foo : { (): B<T>; (): void; }
>B : B<T>
>T : T

    foo(): void; // instead of B does see this
>foo : { (): B<T>; (): void; }
 
    foo2(): B<number>;
>foo2 : () => B<number>
>B : B<T>
}
 
interface B<T> extends A<T> {
>B : B<T>
>T : T
>A : A<T>
>T : T

    bar(): void;
>bar : () => void
}
 
var b: B<number>;
>b : B<number>
>B : B<T>

b.foo(); // should not error
>b.foo() : B<number>
>b.foo : { (): B<number>; (): void; }
>b : B<number>
>foo : { (): B<number>; (): void; }

 

