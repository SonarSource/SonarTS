=== tests/cases/compiler/capturedLetConstInLoop5.ts ===
declare function use(a: any);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>a : Symbol(a, Decl(capturedLetConstInLoop5.ts, 0, 21))

//====let
function foo0(x) {
>foo0 : Symbol(foo0, Decl(capturedLetConstInLoop5.ts, 0, 29))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 3, 14))

    for (let x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 4, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 5, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 4, 12))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 4, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 5, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 4, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 5, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 4, 12))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 5, 11))
}

function foo00(x) {
>foo00 : Symbol(foo00, Decl(capturedLetConstInLoop5.ts, 14, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 16, 15))

    for (let x in []) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 17, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 18, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 17, 12))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 17, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 18, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 17, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 18, 11))

        if (x == "1") {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 17, 12))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 18, 11))
}

function foo1(x) {
>foo1 : Symbol(foo1, Decl(capturedLetConstInLoop5.ts, 27, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 29, 14))

    for (let x = 0; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 30, 12))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 30, 12))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 30, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 31, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 30, 12))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 30, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 31, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 30, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 31, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 30, 12))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 31, 11))
}

function foo2(x) {
>foo2 : Symbol(foo2, Decl(capturedLetConstInLoop5.ts, 40, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 42, 14))

    while (1 === 1) {
        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 44, 11))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 45, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 44, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 44, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 45, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 44, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 45, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 44, 11))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 45, 11))
}

function foo3(x) {
>foo3 : Symbol(foo3, Decl(capturedLetConstInLoop5.ts, 54, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 56, 14))

    do {
        let x;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 58, 11))

        var v;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 59, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 58, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 59, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 58, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 59, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 58, 11))

            return;
        }
    } while (1 === 1)
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 59, 11))
}

function foo4(x) {
>foo4 : Symbol(foo4, Decl(capturedLetConstInLoop5.ts, 68, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 70, 14))

    for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 71, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 71, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 71, 12))

        var v = y;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 72, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 71, 12))

        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 73, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 73, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 72, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 73, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 72, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 73, 11))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 72, 11))
}

function foo5(x) {
>foo5 : Symbol(foo5, Decl(capturedLetConstInLoop5.ts, 82, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 84, 14))

    for (let x = 0, y = 1; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 85, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 85, 19))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 85, 12))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 85, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 86, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 85, 12))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 85, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 85, 19))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 86, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 85, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 85, 19))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 86, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 85, 12))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 86, 11))
}


function foo6(x) {
>foo6 : Symbol(foo6, Decl(capturedLetConstInLoop5.ts, 95, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 98, 14))

    while (1 === 1) {
        let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 100, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 100, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 101, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 100, 11))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 100, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 100, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 101, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 100, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 100, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 101, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 100, 11))

            return;
        }
    };
    
    use(v)
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 101, 11))
}

function foo7(x) {
>foo7 : Symbol(foo7, Decl(capturedLetConstInLoop5.ts, 110, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 112, 14))

    do {
        let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 114, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 114, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 115, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 114, 11))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 114, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 114, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 115, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 114, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 114, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 115, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 114, 11))

            return;
        }
    } while (1 === 1);
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 115, 11))
}


function foo8(x) {
>foo8 : Symbol(foo8, Decl(capturedLetConstInLoop5.ts, 124, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 127, 14))

    for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 128, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 128, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 128, 12))

        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 129, 11))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 130, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 129, 11))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 129, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 128, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 130, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 129, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 128, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 130, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 129, 11))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 130, 11))
}

//====const
function foo0_c(x) {
>foo0_c : Symbol(foo0_c, Decl(capturedLetConstInLoop5.ts, 139, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 142, 16))

    for (const x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 143, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 144, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 143, 14))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 143, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 144, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 143, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 144, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 143, 14))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 144, 11))
}

function foo00_c(x) {
>foo00_c : Symbol(foo00_c, Decl(capturedLetConstInLoop5.ts, 153, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 155, 17))

    for (const x in []) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 156, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 157, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 156, 14))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 156, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 157, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 156, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 157, 11))

        if (x == "1") {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 156, 14))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 157, 11))
}

function foo1_c(x) {
>foo1_c : Symbol(foo1_c, Decl(capturedLetConstInLoop5.ts, 166, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 168, 16))

    for (const x = 0; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 169, 14))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 169, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 170, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 169, 14))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 169, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 170, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 169, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 170, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 169, 14))

            return;
        }
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 170, 11))
}

function foo2_c(x) {
>foo2_c : Symbol(foo2_c, Decl(capturedLetConstInLoop5.ts, 179, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 181, 16))

    while (1 === 1) {
        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 183, 13))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 184, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 183, 13))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 183, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 184, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 183, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 184, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 183, 13))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 184, 11))
}

function foo3_c(x) {
>foo3_c : Symbol(foo3_c, Decl(capturedLetConstInLoop5.ts, 193, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 195, 16))

    do {
        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 197, 13))

        var v;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 198, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 197, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 198, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 197, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 198, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 197, 13))

            return;
        }
    } while (1 === 1)
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 198, 11))
}

function foo4_c(x) {
>foo4_c : Symbol(foo4_c, Decl(capturedLetConstInLoop5.ts, 207, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 209, 16))

    for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 210, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 210, 14))

        var v = y;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 211, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 210, 14))

        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 212, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 212, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 211, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 212, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 211, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 212, 11))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 211, 11))
}

function foo5_c(x) {
>foo5_c : Symbol(foo5_c, Decl(capturedLetConstInLoop5.ts, 221, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 223, 16))

    for (const x = 0, y = 1; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 224, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 224, 21))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 224, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 225, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 224, 14))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 224, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 224, 21))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 225, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 224, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 224, 21))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 225, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 224, 14))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 225, 11))
}


function foo6_c(x) {
>foo6_c : Symbol(foo6_c, Decl(capturedLetConstInLoop5.ts, 234, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 237, 16))

    while (1 === 1) {
        const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 239, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 239, 20))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 240, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 239, 13))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 239, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 239, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 240, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 239, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 239, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 240, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 239, 13))

            return;
        }
    }
    
    use(v)
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 240, 11))
}

function foo7_c(x) {
>foo7_c : Symbol(foo7_c, Decl(capturedLetConstInLoop5.ts, 249, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 251, 16))

    do {
        const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 253, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 253, 20))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 254, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 253, 13))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 253, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 253, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 254, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 253, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 253, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 254, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 253, 13))

            return;
        }
    } while (1 === 1)
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 254, 11))
}


function foo8_c(x) {
>foo8_c : Symbol(foo8_c, Decl(capturedLetConstInLoop5.ts, 263, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 266, 16))

    for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 267, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 267, 14))

        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 268, 13))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 269, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 268, 13))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 268, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 267, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 269, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 268, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop5.ts, 267, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 269, 11))

        if (x == 1) {
>x : Symbol(x, Decl(capturedLetConstInLoop5.ts, 268, 13))

            return;
        }
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop5.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop5.ts, 269, 11))
}
