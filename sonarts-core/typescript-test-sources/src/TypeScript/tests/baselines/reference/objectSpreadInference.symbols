=== tests/cases/conformance/types/spread/objectSpreadInference.ts ===
interface Result<T,U,V> {
>Result : Symbol(Result, Decl(objectSpreadInference.ts, 0, 0))
>T : Symbol(T, Decl(objectSpreadInference.ts, 0, 17))
>U : Symbol(U, Decl(objectSpreadInference.ts, 0, 19))
>V : Symbol(V, Decl(objectSpreadInference.ts, 0, 21))

    t: T;
>t : Symbol(Result.t, Decl(objectSpreadInference.ts, 0, 25))
>T : Symbol(T, Decl(objectSpreadInference.ts, 0, 17))

    u: U;
>u : Symbol(Result.u, Decl(objectSpreadInference.ts, 1, 9))
>U : Symbol(U, Decl(objectSpreadInference.ts, 0, 19))

    v: V;
>v : Symbol(Result.v, Decl(objectSpreadInference.ts, 2, 9))
>V : Symbol(V, Decl(objectSpreadInference.ts, 0, 21))
}
declare function infer<T,U,V>(tuv: { ...T, ...U, a: V }): { t: T, u: U, v: V };
>infer : Symbol(infer, Decl(objectSpreadInference.ts, 4, 1))
>T : Symbol(T, Decl(objectSpreadInference.ts, 5, 23))
>U : Symbol(U, Decl(objectSpreadInference.ts, 5, 25))
>V : Symbol(V, Decl(objectSpreadInference.ts, 5, 27))
>tuv : Symbol(tuv, Decl(objectSpreadInference.ts, 5, 30))
>T : Symbol(T, Decl(objectSpreadInference.ts, 5, 23))
>U : Symbol(U, Decl(objectSpreadInference.ts, 5, 25))
>a : Symbol(a, Decl(objectSpreadInference.ts, 5, 48))
>V : Symbol(V, Decl(objectSpreadInference.ts, 5, 27))
>t : Symbol(t, Decl(objectSpreadInference.ts, 5, 59))
>T : Symbol(T, Decl(objectSpreadInference.ts, 5, 23))
>u : Symbol(u, Decl(objectSpreadInference.ts, 5, 65))
>U : Symbol(U, Decl(objectSpreadInference.ts, 5, 25))
>v : Symbol(v, Decl(objectSpreadInference.ts, 5, 71))
>V : Symbol(V, Decl(objectSpreadInference.ts, 5, 27))

declare function infer2<T,U,V>(utv: { ...U, a: V, ...T }): { t: T, u: U, v: V };
>infer2 : Symbol(infer2, Decl(objectSpreadInference.ts, 5, 79))
>T : Symbol(T, Decl(objectSpreadInference.ts, 6, 24))
>U : Symbol(U, Decl(objectSpreadInference.ts, 6, 26))
>V : Symbol(V, Decl(objectSpreadInference.ts, 6, 28))
>utv : Symbol(utv, Decl(objectSpreadInference.ts, 6, 31))
>U : Symbol(U, Decl(objectSpreadInference.ts, 6, 26))
>a : Symbol(a, Decl(objectSpreadInference.ts, 6, 43))
>V : Symbol(V, Decl(objectSpreadInference.ts, 6, 28))
>T : Symbol(T, Decl(objectSpreadInference.ts, 6, 24))
>t : Symbol(t, Decl(objectSpreadInference.ts, 6, 60))
>T : Symbol(T, Decl(objectSpreadInference.ts, 6, 24))
>u : Symbol(u, Decl(objectSpreadInference.ts, 6, 66))
>U : Symbol(U, Decl(objectSpreadInference.ts, 6, 26))
>v : Symbol(v, Decl(objectSpreadInference.ts, 6, 72))
>V : Symbol(V, Decl(objectSpreadInference.ts, 6, 28))

function generic<W, X, Y>(w: W, x: X, y: Y) {
>generic : Symbol(generic, Decl(objectSpreadInference.ts, 6, 80))
>W : Symbol(W, Decl(objectSpreadInference.ts, 7, 17))
>X : Symbol(X, Decl(objectSpreadInference.ts, 7, 19))
>Y : Symbol(Y, Decl(objectSpreadInference.ts, 7, 22))
>w : Symbol(w, Decl(objectSpreadInference.ts, 7, 26))
>W : Symbol(W, Decl(objectSpreadInference.ts, 7, 17))
>x : Symbol(x, Decl(objectSpreadInference.ts, 7, 31))
>X : Symbol(X, Decl(objectSpreadInference.ts, 7, 19))
>y : Symbol(y, Decl(objectSpreadInference.ts, 7, 37))
>Y : Symbol(Y, Decl(objectSpreadInference.ts, 7, 22))

    // should infer { t: {}, u: {}, v: {} } because there is no trailing type parameter
    return infer({ ...w, ...x, a: y, b: "different type" });
>infer : Symbol(infer, Decl(objectSpreadInference.ts, 4, 1))
>a : Symbol(a, Decl(objectSpreadInference.ts, 9, 30))
>y : Symbol(y, Decl(objectSpreadInference.ts, 7, 37))
>b : Symbol(b, Decl(objectSpreadInference.ts, 9, 36))
}
let b: { b: number };
>b : Symbol(b, Decl(objectSpreadInference.ts, 11, 3))
>b : Symbol(b, Decl(objectSpreadInference.ts, 11, 8))

let c: { c: number };
>c : Symbol(c, Decl(objectSpreadInference.ts, 12, 3))
>c : Symbol(c, Decl(objectSpreadInference.ts, 12, 8))

// can only infer { t: {}, u: {}, v: {} }
let i1 = infer({ ...b, ...c, a: 12 });
>i1 : Symbol(i1, Decl(objectSpreadInference.ts, 14, 3))
>infer : Symbol(infer, Decl(objectSpreadInference.ts, 4, 1))
>a : Symbol(a, Decl(objectSpreadInference.ts, 14, 28))

// can only infer { t: {}, u: {}, v: {} }
let i2 = infer2({ ...b, ...c, a: 12 });
>i2 : Symbol(i2, Decl(objectSpreadInference.ts, 16, 3))
>infer2 : Symbol(infer2, Decl(objectSpreadInference.ts, 5, 79))
>a : Symbol(a, Decl(objectSpreadInference.ts, 16, 29))

// can only infer { t: {}, u: {}, v: {} }
let i3 = generic(b, c, { a: 12 });
>i3 : Symbol(i3, Decl(objectSpreadInference.ts, 18, 3))
>generic : Symbol(generic, Decl(objectSpreadInference.ts, 6, 80))
>b : Symbol(b, Decl(objectSpreadInference.ts, 11, 3))
>c : Symbol(c, Decl(objectSpreadInference.ts, 12, 3))
>a : Symbol(a, Decl(objectSpreadInference.ts, 18, 24))

