=== tests/cases/conformance/es7/exponentiationOperator/emitCompoundExponentiationOperator2.ts ===
var comp: number;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= 1;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= 1;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= 1 + 2;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= 1 - 2;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= 1 * 2;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= 1 / 2;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= (1 + 2);
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= (1 - 2);
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= (1 * 2);
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= (1 / 2);
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= 1 + 2 ** 3;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= 1 - 2 ** 4;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= 1 * 2 ** 5;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= 1 / 2 ** 6;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= (1 + 2) ** 3;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= (1 - 2) ** 4;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= (1 * 2) ** 5;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

comp **= comp **= (1 / 2) ** 6;
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))
>comp : Symbol(comp, Decl(emitCompoundExponentiationOperator2.ts, 0, 3))

