=== tests/cases/compiler/concatError.ts ===
var n1: number[];
>n1 : Symbol(n1, Decl(concatError.ts, 0, 3))

/*
interface Array<T> {
    concat(...items: T[][]): T[]; // Note: This overload needs to be picked for arrays of arrays, even though both are applicable
    concat(...items: T[]): T[];
}
*/
var fa: number[];
>fa : Symbol(fa, Decl(concatError.ts, 7, 3))

fa = fa.concat([0]);
>fa : Symbol(fa, Decl(concatError.ts, 7, 3))
>fa.concat : Symbol(Array.concat, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>fa : Symbol(fa, Decl(concatError.ts, 7, 3))
>concat : Symbol(Array.concat, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

fa = fa.concat(0);
>fa : Symbol(fa, Decl(concatError.ts, 7, 3))
>fa.concat : Symbol(Array.concat, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>fa : Symbol(fa, Decl(concatError.ts, 7, 3))
>concat : Symbol(Array.concat, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))





/*




declare class C<T> {
	public m(p1: C<C<T>>): C<T>;
	//public p: T;
}

var c: C<number>;
var cc: C<C<number>>;

c = c.m(cc);
*/
