=== tests/cases/conformance/types/stringLiteral/stringLiteralTypeAssertion01.ts ===
type S = "a" | "b";
>S : Symbol(S, Decl(stringLiteralTypeAssertion01.ts, 0, 0))

type T = S[] | S;
>T : Symbol(T, Decl(stringLiteralTypeAssertion01.ts, 0, 19))
>S : Symbol(S, Decl(stringLiteralTypeAssertion01.ts, 0, 0))
>S : Symbol(S, Decl(stringLiteralTypeAssertion01.ts, 0, 0))

var s: S;
>s : Symbol(s, Decl(stringLiteralTypeAssertion01.ts, 3, 3))
>S : Symbol(S, Decl(stringLiteralTypeAssertion01.ts, 0, 0))

var t: T;
>t : Symbol(t, Decl(stringLiteralTypeAssertion01.ts, 4, 3))
>T : Symbol(T, Decl(stringLiteralTypeAssertion01.ts, 0, 19))

var str: string;
>str : Symbol(str, Decl(stringLiteralTypeAssertion01.ts, 5, 3))

////////////////

s = <S>t;
>s : Symbol(s, Decl(stringLiteralTypeAssertion01.ts, 3, 3))
>S : Symbol(S, Decl(stringLiteralTypeAssertion01.ts, 0, 0))
>t : Symbol(t, Decl(stringLiteralTypeAssertion01.ts, 4, 3))

s = t as S;
>s : Symbol(s, Decl(stringLiteralTypeAssertion01.ts, 3, 3))
>t : Symbol(t, Decl(stringLiteralTypeAssertion01.ts, 4, 3))
>S : Symbol(S, Decl(stringLiteralTypeAssertion01.ts, 0, 0))

s = <S>str;
>s : Symbol(s, Decl(stringLiteralTypeAssertion01.ts, 3, 3))
>S : Symbol(S, Decl(stringLiteralTypeAssertion01.ts, 0, 0))
>str : Symbol(str, Decl(stringLiteralTypeAssertion01.ts, 5, 3))

s = str as S;
>s : Symbol(s, Decl(stringLiteralTypeAssertion01.ts, 3, 3))
>str : Symbol(str, Decl(stringLiteralTypeAssertion01.ts, 5, 3))
>S : Symbol(S, Decl(stringLiteralTypeAssertion01.ts, 0, 0))

////////////////

t = <T>s;
>t : Symbol(t, Decl(stringLiteralTypeAssertion01.ts, 4, 3))
>T : Symbol(T, Decl(stringLiteralTypeAssertion01.ts, 0, 19))
>s : Symbol(s, Decl(stringLiteralTypeAssertion01.ts, 3, 3))

t = s as T;
>t : Symbol(t, Decl(stringLiteralTypeAssertion01.ts, 4, 3))
>s : Symbol(s, Decl(stringLiteralTypeAssertion01.ts, 3, 3))
>T : Symbol(T, Decl(stringLiteralTypeAssertion01.ts, 0, 19))

t = <T>str;
>t : Symbol(t, Decl(stringLiteralTypeAssertion01.ts, 4, 3))
>T : Symbol(T, Decl(stringLiteralTypeAssertion01.ts, 0, 19))
>str : Symbol(str, Decl(stringLiteralTypeAssertion01.ts, 5, 3))

t = str as T;
>t : Symbol(t, Decl(stringLiteralTypeAssertion01.ts, 4, 3))
>str : Symbol(str, Decl(stringLiteralTypeAssertion01.ts, 5, 3))
>T : Symbol(T, Decl(stringLiteralTypeAssertion01.ts, 0, 19))

////////////////

str = <string>s;
>str : Symbol(str, Decl(stringLiteralTypeAssertion01.ts, 5, 3))
>s : Symbol(s, Decl(stringLiteralTypeAssertion01.ts, 3, 3))

str = s as string;
>str : Symbol(str, Decl(stringLiteralTypeAssertion01.ts, 5, 3))
>s : Symbol(s, Decl(stringLiteralTypeAssertion01.ts, 3, 3))

str = <string>t;
>str : Symbol(str, Decl(stringLiteralTypeAssertion01.ts, 5, 3))
>t : Symbol(t, Decl(stringLiteralTypeAssertion01.ts, 4, 3))

str = t as string;
>str : Symbol(str, Decl(stringLiteralTypeAssertion01.ts, 5, 3))
>t : Symbol(t, Decl(stringLiteralTypeAssertion01.ts, 4, 3))

