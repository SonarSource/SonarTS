=== tests/cases/compiler/typePredicateInLoop.ts ===
// Repro from #12101

interface Type {
>Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))

  type: number;
>type : Symbol(Type.type, Decl(typePredicateInLoop.ts, 2, 16))
}

interface TypeExt extends Type {
>TypeExt : Symbol(TypeExt, Decl(typePredicateInLoop.ts, 4, 1))
>Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))

  arr: Type[];
>arr : Symbol(TypeExt.arr, Decl(typePredicateInLoop.ts, 6, 32))
>Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))
}

const guard = (arg: Type): arg is TypeExt => arg.type === 1;
>guard : Symbol(guard, Decl(typePredicateInLoop.ts, 10, 5))
>arg : Symbol(arg, Decl(typePredicateInLoop.ts, 10, 15))
>Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))
>arg : Symbol(arg, Decl(typePredicateInLoop.ts, 10, 15))
>TypeExt : Symbol(TypeExt, Decl(typePredicateInLoop.ts, 4, 1))
>arg.type : Symbol(Type.type, Decl(typePredicateInLoop.ts, 2, 16))
>arg : Symbol(arg, Decl(typePredicateInLoop.ts, 10, 15))
>type : Symbol(Type.type, Decl(typePredicateInLoop.ts, 2, 16))

const otherFunc = (arg1: Type, arg2: TypeExt): void => {};
>otherFunc : Symbol(otherFunc, Decl(typePredicateInLoop.ts, 11, 5))
>arg1 : Symbol(arg1, Decl(typePredicateInLoop.ts, 11, 19))
>Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))
>arg2 : Symbol(arg2, Decl(typePredicateInLoop.ts, 11, 30))
>TypeExt : Symbol(TypeExt, Decl(typePredicateInLoop.ts, 4, 1))

export function y(arg: Type): void {
>y : Symbol(y, Decl(typePredicateInLoop.ts, 11, 58))
>arg : Symbol(arg, Decl(typePredicateInLoop.ts, 13, 18))
>Type : Symbol(Type, Decl(typePredicateInLoop.ts, 0, 0))

  if (guard(arg)) {
>guard : Symbol(guard, Decl(typePredicateInLoop.ts, 10, 5))
>arg : Symbol(arg, Decl(typePredicateInLoop.ts, 13, 18))

    for (const ITEM of arg.arr) {
>ITEM : Symbol(ITEM, Decl(typePredicateInLoop.ts, 15, 14))
>arg.arr : Symbol(TypeExt.arr, Decl(typePredicateInLoop.ts, 6, 32))
>arg : Symbol(arg, Decl(typePredicateInLoop.ts, 13, 18))
>arr : Symbol(TypeExt.arr, Decl(typePredicateInLoop.ts, 6, 32))

      if (otherFunc(ITEM, arg)) {
>otherFunc : Symbol(otherFunc, Decl(typePredicateInLoop.ts, 11, 5))
>ITEM : Symbol(ITEM, Decl(typePredicateInLoop.ts, 15, 14))
>arg : Symbol(arg, Decl(typePredicateInLoop.ts, 13, 18))
      }
    }
  }
}
