=== tests/cases/conformance/jsx/file.tsx ===
import React = require('react');
>React : Symbol(React, Decl(file.tsx, 0, 0))

interface Address {
>Address : Symbol(Address, Decl(file.tsx, 0, 32))

  street: string;
>street : Symbol(Address.street, Decl(file.tsx, 2, 19))

  country: string;
>country : Symbol(Address.country, Decl(file.tsx, 3, 17))
}

interface CanadianAddress extends Address {
>CanadianAddress : Symbol(CanadianAddress, Decl(file.tsx, 5, 1))
>Address : Symbol(Address, Decl(file.tsx, 0, 32))

    postalCode: string;
>postalCode : Symbol(CanadianAddress.postalCode, Decl(file.tsx, 7, 43))
}

interface AmericanAddress extends Address {
>AmericanAddress : Symbol(AmericanAddress, Decl(file.tsx, 9, 1))
>Address : Symbol(Address, Decl(file.tsx, 0, 32))

    zipCode: string;
>zipCode : Symbol(AmericanAddress.zipCode, Decl(file.tsx, 11, 43))
}

type Properties = CanadianAddress | AmericanAddress;
>Properties : Symbol(Properties, Decl(file.tsx, 13, 1))
>CanadianAddress : Symbol(CanadianAddress, Decl(file.tsx, 5, 1))
>AmericanAddress : Symbol(AmericanAddress, Decl(file.tsx, 9, 1))

export class AddressComp extends React.Component<Properties, void> {
>AddressComp : Symbol(AddressComp, Decl(file.tsx, 15, 52))
>React.Component : Symbol(React.Component, Decl(react.d.ts, 158, 55))
>React : Symbol(React, Decl(file.tsx, 0, 0))
>Component : Symbol(React.Component, Decl(react.d.ts, 158, 55))
>Properties : Symbol(Properties, Decl(file.tsx, 13, 1))

  public render() {
>render : Symbol(AddressComp.render, Decl(file.tsx, 17, 68))

    return null;
  }
}

let a = <AddressComp postalCode='T1B 0L3' street="vancouver" country="CA" />
>a : Symbol(a, Decl(file.tsx, 23, 3))
>AddressComp : Symbol(AddressComp, Decl(file.tsx, 15, 52))
>postalCode : Symbol(postalCode, Decl(file.tsx, 23, 20))
>street : Symbol(street, Decl(file.tsx, 23, 41))
>country : Symbol(country, Decl(file.tsx, 23, 60))

