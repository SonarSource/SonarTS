=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability03.ts ===
function f(x: "foo"): number;
>f : Symbol(f, Decl(stringLiteralTypesOverloadAssignability03.ts, 0, 0), Decl(stringLiteralTypesOverloadAssignability03.ts, 0, 29))
>x : Symbol(x, Decl(stringLiteralTypesOverloadAssignability03.ts, 0, 11))

function f(x: string): number {
>f : Symbol(f, Decl(stringLiteralTypesOverloadAssignability03.ts, 0, 0), Decl(stringLiteralTypesOverloadAssignability03.ts, 0, 29))
>x : Symbol(x, Decl(stringLiteralTypesOverloadAssignability03.ts, 1, 11))

    return 0;
}

function g(x: "foo"): number;
>g : Symbol(g, Decl(stringLiteralTypesOverloadAssignability03.ts, 3, 1), Decl(stringLiteralTypesOverloadAssignability03.ts, 5, 29))
>x : Symbol(x, Decl(stringLiteralTypesOverloadAssignability03.ts, 5, 11))

function g(x: string): number {
>g : Symbol(g, Decl(stringLiteralTypesOverloadAssignability03.ts, 3, 1), Decl(stringLiteralTypesOverloadAssignability03.ts, 5, 29))
>x : Symbol(x, Decl(stringLiteralTypesOverloadAssignability03.ts, 6, 11))

    return 0;
}

let a = f;
>a : Symbol(a, Decl(stringLiteralTypesOverloadAssignability03.ts, 10, 3))
>f : Symbol(f, Decl(stringLiteralTypesOverloadAssignability03.ts, 0, 0), Decl(stringLiteralTypesOverloadAssignability03.ts, 0, 29))

let b = g;
>b : Symbol(b, Decl(stringLiteralTypesOverloadAssignability03.ts, 11, 3))
>g : Symbol(g, Decl(stringLiteralTypesOverloadAssignability03.ts, 3, 1), Decl(stringLiteralTypesOverloadAssignability03.ts, 5, 29))

a = b;
>a : Symbol(a, Decl(stringLiteralTypesOverloadAssignability03.ts, 10, 3))
>b : Symbol(b, Decl(stringLiteralTypesOverloadAssignability03.ts, 11, 3))

b = a;
>b : Symbol(b, Decl(stringLiteralTypesOverloadAssignability03.ts, 11, 3))
>a : Symbol(a, Decl(stringLiteralTypesOverloadAssignability03.ts, 10, 3))

