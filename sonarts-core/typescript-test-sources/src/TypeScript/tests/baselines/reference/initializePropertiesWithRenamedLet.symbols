=== tests/cases/compiler/initializePropertiesWithRenamedLet.ts ===
var x0;
>x0 : Symbol(x0, Decl(initializePropertiesWithRenamedLet.ts, 0, 3))

if (true) {
    let x0;
>x0 : Symbol(x0, Decl(initializePropertiesWithRenamedLet.ts, 2, 7))

    var obj1 = { x0: x0 };
>obj1 : Symbol(obj1, Decl(initializePropertiesWithRenamedLet.ts, 3, 7))
>x0 : Symbol(x0, Decl(initializePropertiesWithRenamedLet.ts, 3, 16))
>x0 : Symbol(x0, Decl(initializePropertiesWithRenamedLet.ts, 2, 7))

    var obj2 = { x0 };
>obj2 : Symbol(obj2, Decl(initializePropertiesWithRenamedLet.ts, 4, 7))
>x0 : Symbol(x0, Decl(initializePropertiesWithRenamedLet.ts, 4, 16))
}

var x, y, z;
>x : Symbol(x, Decl(initializePropertiesWithRenamedLet.ts, 7, 3))
>y : Symbol(y, Decl(initializePropertiesWithRenamedLet.ts, 7, 6))
>z : Symbol(z, Decl(initializePropertiesWithRenamedLet.ts, 7, 9))

if (true) {
    let { x: x } = { x: 0 };
>x : Symbol(x, Decl(initializePropertiesWithRenamedLet.ts, 9, 20))
>x : Symbol(x, Decl(initializePropertiesWithRenamedLet.ts, 9, 9))
>x : Symbol(x, Decl(initializePropertiesWithRenamedLet.ts, 9, 20))

    let { y } = { y: 0 };
>y : Symbol(y, Decl(initializePropertiesWithRenamedLet.ts, 10, 9))
>y : Symbol(y, Decl(initializePropertiesWithRenamedLet.ts, 10, 17))

    let z;
>z : Symbol(z, Decl(initializePropertiesWithRenamedLet.ts, 11, 7))

    ({ z: z } = { z: 0 });
>z : Symbol(z, Decl(initializePropertiesWithRenamedLet.ts, 12, 6))
>z : Symbol(z, Decl(initializePropertiesWithRenamedLet.ts, 11, 7))
>z : Symbol(z, Decl(initializePropertiesWithRenamedLet.ts, 12, 17))

    ({ z } = { z: 0 });
>z : Symbol(z, Decl(initializePropertiesWithRenamedLet.ts, 13, 6))
>z : Symbol(z, Decl(initializePropertiesWithRenamedLet.ts, 13, 14))
}
