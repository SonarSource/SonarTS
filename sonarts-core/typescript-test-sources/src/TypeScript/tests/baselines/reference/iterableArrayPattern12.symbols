=== tests/cases/conformance/es6/destructuring/iterableArrayPattern12.ts ===
class Bar { x }
>Bar : Symbol(Bar, Decl(iterableArrayPattern12.ts, 0, 0))
>x : Symbol(Bar.x, Decl(iterableArrayPattern12.ts, 0, 11))

class Foo extends Bar { y }
>Foo : Symbol(Foo, Decl(iterableArrayPattern12.ts, 0, 15))
>Bar : Symbol(Bar, Decl(iterableArrayPattern12.ts, 0, 0))
>y : Symbol(Foo.y, Decl(iterableArrayPattern12.ts, 1, 23))

class FooIterator {
>FooIterator : Symbol(FooIterator, Decl(iterableArrayPattern12.ts, 1, 27))

    next() {
>next : Symbol(FooIterator.next, Decl(iterableArrayPattern12.ts, 2, 19))

        return {
            value: new Foo,
>value : Symbol(value, Decl(iterableArrayPattern12.ts, 4, 16))
>Foo : Symbol(Foo, Decl(iterableArrayPattern12.ts, 0, 15))

            done: false
>done : Symbol(done, Decl(iterableArrayPattern12.ts, 5, 27))

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

        return this;
>this : Symbol(FooIterator, Decl(iterableArrayPattern12.ts, 1, 27))
    }
}

function fun([a, ...b] = new FooIterator) { }
>fun : Symbol(fun, Decl(iterableArrayPattern12.ts, 13, 1))
>a : Symbol(a, Decl(iterableArrayPattern12.ts, 15, 14))
>b : Symbol(b, Decl(iterableArrayPattern12.ts, 15, 16))
>FooIterator : Symbol(FooIterator, Decl(iterableArrayPattern12.ts, 1, 27))

fun(new FooIterator);
>fun : Symbol(fun, Decl(iterableArrayPattern12.ts, 13, 1))
>FooIterator : Symbol(FooIterator, Decl(iterableArrayPattern12.ts, 1, 27))

