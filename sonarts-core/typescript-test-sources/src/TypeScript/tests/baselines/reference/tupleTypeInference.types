=== tests/cases/compiler/tupleTypeInference.ts ===
declare var $q: IQService;
>$q : IQService
>IQService : IQService

interface IQService {
>IQService : IQService

    all<T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>;
>all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
>T1 : T1
>T2 : T2
>T3 : T3
>x : [IPromise<T1>, IPromise<T2>, IPromise<T3>]
>IPromise : IPromise<T>
>T1 : T1
>IPromise : IPromise<T>
>T2 : T2
>IPromise : IPromise<T>
>T3 : T3
>IPromise : IPromise<T>
>T1 : T1
>T2 : T2
>T3 : T3

    all<T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>;
>all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
>T1 : T1
>T2 : T2
>x : [IPromise<T1>, IPromise<T2>]
>IPromise : IPromise<T>
>T1 : T1
>IPromise : IPromise<T>
>T2 : T2
>IPromise : IPromise<T>
>T1 : T1
>T2 : T2

    all<T1>(x: [IPromise<T1>]): IPromise<[T1]>;
>all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
>T1 : T1
>x : [IPromise<T1>]
>IPromise : IPromise<T>
>T1 : T1
>IPromise : IPromise<T>
>T1 : T1

    when<T>(t?: T): IPromise<T>;
>when : <T>(t?: T) => IPromise<T>
>T : T
>t : T
>T : T
>IPromise : IPromise<T>
>T : T
}

interface IPromise<T> {
>IPromise : IPromise<T>
>T : T

    then<TResult>(callback: (t: T) => TResult): IPromise<TResult>;
>then : <TResult>(callback: (t: T) => TResult) => IPromise<TResult>
>TResult : TResult
>callback : (t: T) => TResult
>t : T
>T : T
>TResult : TResult
>IPromise : IPromise<T>
>TResult : TResult
}

// Implicit different types
var a = $q.all([$q.when<string>(), $q.when<number>()]);
>a : IPromise<[string, number]>
>$q.all([$q.when<string>(), $q.when<number>()]) : IPromise<[string, number]>
>$q.all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
>$q : IQService
>all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
>[$q.when<string>(), $q.when<number>()] : [IPromise<string>, IPromise<number>]
>$q.when<string>() : IPromise<string>
>$q.when : <T>(t?: T) => IPromise<T>
>$q : IQService
>when : <T>(t?: T) => IPromise<T>
>$q.when<number>() : IPromise<number>
>$q.when : <T>(t?: T) => IPromise<T>
>$q : IQService
>when : <T>(t?: T) => IPromise<T>

// Explicit different types
var b = $q.all<string, number>([$q.when<string>(), $q.when<number>()]);
>b : IPromise<[string, number]>
>$q.all<string, number>([$q.when<string>(), $q.when<number>()]) : IPromise<[string, number]>
>$q.all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
>$q : IQService
>all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
>[$q.when<string>(), $q.when<number>()] : [IPromise<string>, IPromise<number>]
>$q.when<string>() : IPromise<string>
>$q.when : <T>(t?: T) => IPromise<T>
>$q : IQService
>when : <T>(t?: T) => IPromise<T>
>$q.when<number>() : IPromise<number>
>$q.when : <T>(t?: T) => IPromise<T>
>$q : IQService
>when : <T>(t?: T) => IPromise<T>

// Implicit identical types
var c = $q.all([$q.when<string>(), $q.when<string>()]);
>c : IPromise<[string, string]>
>$q.all([$q.when<string>(), $q.when<string>()]) : IPromise<[string, string]>
>$q.all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
>$q : IQService
>all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
>[$q.when<string>(), $q.when<string>()] : [IPromise<string>, IPromise<string>]
>$q.when<string>() : IPromise<string>
>$q.when : <T>(t?: T) => IPromise<T>
>$q : IQService
>when : <T>(t?: T) => IPromise<T>
>$q.when<string>() : IPromise<string>
>$q.when : <T>(t?: T) => IPromise<T>
>$q : IQService
>when : <T>(t?: T) => IPromise<T>

