=== tests/cases/conformance/salsa/a.js ===
/** @type {String} */
var S;
>S : Symbol(S, Decl(a.js, 1, 3), Decl(b.ts, 0, 3))

/** @type {string} */
var s;
>s : Symbol(s, Decl(a.js, 4, 3), Decl(b.ts, 1, 3))

/** @type {Number} */
var N;
>N : Symbol(N, Decl(a.js, 7, 3), Decl(b.ts, 2, 3))

/** @type {number} */
var n;
>n : Symbol(n, Decl(a.js, 10, 3), Decl(b.ts, 3, 3))

/** @type {Boolean} */
var B;
>B : Symbol(B, Decl(a.js, 13, 3), Decl(b.ts, 4, 3))

/** @type {boolean} */
var b;
>b : Symbol(b, Decl(a.js, 16, 3), Decl(b.ts, 5, 3))

/** @type {Void} */
var V;
>V : Symbol(V, Decl(a.js, 19, 3), Decl(b.ts, 6, 3))

/** @type {void} */
var v;
>v : Symbol(v, Decl(a.js, 22, 3), Decl(b.ts, 7, 3))

/** @type {Undefined} */
var U;
>U : Symbol(U, Decl(a.js, 25, 3), Decl(b.ts, 8, 3))

/** @type {undefined} */
var u;
>u : Symbol(u, Decl(a.js, 28, 3), Decl(b.ts, 9, 3))

/** @type {Null} */
var Nl;
>Nl : Symbol(Nl, Decl(a.js, 31, 3), Decl(b.ts, 10, 3))

/** @type {null} */
var nl;
>nl : Symbol(nl, Decl(a.js, 34, 3), Decl(b.ts, 11, 3))

/** @type {Array} */
var A;
>A : Symbol(A, Decl(a.js, 37, 3), Decl(b.ts, 12, 3))

/** @type {array} */
var a;
>a : Symbol(a, Decl(a.js, 40, 3), Decl(b.ts, 13, 3))

/** @type {Promise} */
var P;
>P : Symbol(P, Decl(a.js, 43, 3), Decl(b.ts, 14, 3))

/** @type {promise} */
var p;
>p : Symbol(p, Decl(a.js, 46, 3), Decl(b.ts, 15, 3))

/** @type {?number} */
var nullable;
>nullable : Symbol(nullable, Decl(a.js, 49, 3), Decl(b.ts, 16, 3))

/** @type {Object} */
var Obj;
>Obj : Symbol(Obj, Decl(a.js, 52, 3), Decl(b.ts, 17, 3))



=== tests/cases/conformance/salsa/b.ts ===
var S: string;
>S : Symbol(S, Decl(a.js, 1, 3), Decl(b.ts, 0, 3))

var s: string;
>s : Symbol(s, Decl(a.js, 4, 3), Decl(b.ts, 1, 3))

var N: number;
>N : Symbol(N, Decl(a.js, 7, 3), Decl(b.ts, 2, 3))

var n: number
>n : Symbol(n, Decl(a.js, 10, 3), Decl(b.ts, 3, 3))

var B: boolean;
>B : Symbol(B, Decl(a.js, 13, 3), Decl(b.ts, 4, 3))

var b: boolean;
>b : Symbol(b, Decl(a.js, 16, 3), Decl(b.ts, 5, 3))

var V :void;
>V : Symbol(V, Decl(a.js, 19, 3), Decl(b.ts, 6, 3))

var v: void;
>v : Symbol(v, Decl(a.js, 22, 3), Decl(b.ts, 7, 3))

var U: undefined;
>U : Symbol(U, Decl(a.js, 25, 3), Decl(b.ts, 8, 3))

var u: undefined;
>u : Symbol(u, Decl(a.js, 28, 3), Decl(b.ts, 9, 3))

var Nl: null;
>Nl : Symbol(Nl, Decl(a.js, 31, 3), Decl(b.ts, 10, 3))

var nl: null;
>nl : Symbol(nl, Decl(a.js, 34, 3), Decl(b.ts, 11, 3))

var A: any[];
>A : Symbol(A, Decl(a.js, 37, 3), Decl(b.ts, 12, 3))

var a: any[];
>a : Symbol(a, Decl(a.js, 40, 3), Decl(b.ts, 13, 3))

var P: Promise<any>;
>P : Symbol(P, Decl(a.js, 43, 3), Decl(b.ts, 14, 3))
>Promise : Symbol(Promise, Decl(lib.d.ts, --, --))

var p: Promise<any>;
>p : Symbol(p, Decl(a.js, 46, 3), Decl(b.ts, 15, 3))
>Promise : Symbol(Promise, Decl(lib.d.ts, --, --))

var nullable: number | null;
>nullable : Symbol(nullable, Decl(a.js, 49, 3), Decl(b.ts, 16, 3))

var Obj: any;
>Obj : Symbol(Obj, Decl(a.js, 52, 3), Decl(b.ts, 17, 3))

