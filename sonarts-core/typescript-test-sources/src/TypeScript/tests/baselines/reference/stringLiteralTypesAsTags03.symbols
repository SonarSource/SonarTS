=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTags03.ts ===
type Kind = "A" | "B"
>Kind : Symbol(Kind, Decl(stringLiteralTypesAsTags03.ts, 0, 0))

interface Entity {
>Entity : Symbol(Entity, Decl(stringLiteralTypesAsTags03.ts, 0, 21))

    kind: Kind;
>kind : Symbol(Entity.kind, Decl(stringLiteralTypesAsTags03.ts, 2, 18))
>Kind : Symbol(Kind, Decl(stringLiteralTypesAsTags03.ts, 0, 0))
}

interface A extends Entity {
>A : Symbol(A, Decl(stringLiteralTypesAsTags03.ts, 4, 1))
>Entity : Symbol(Entity, Decl(stringLiteralTypesAsTags03.ts, 0, 21))

    kind: "A";
>kind : Symbol(A.kind, Decl(stringLiteralTypesAsTags03.ts, 6, 28))

    a: number;
>a : Symbol(A.a, Decl(stringLiteralTypesAsTags03.ts, 7, 14))
}

interface B extends Entity {
>B : Symbol(B, Decl(stringLiteralTypesAsTags03.ts, 9, 1))
>Entity : Symbol(Entity, Decl(stringLiteralTypesAsTags03.ts, 0, 21))

    kind: "B";
>kind : Symbol(B.kind, Decl(stringLiteralTypesAsTags03.ts, 11, 28))

    b: string;
>b : Symbol(B.b, Decl(stringLiteralTypesAsTags03.ts, 12, 14))
}

// Currently (2015-12-14), we write '"A" | "A"' and '"B" | "B"' to avoid
// interpreting respective overloads as "specialized" signatures.
// That way, we can avoid the need to look for a compatible overload
// signature and simply check compatibility with the implementation.
function hasKind(entity: Entity, kind: "A" | "A"): entity is A;
>hasKind : Symbol(hasKind, Decl(stringLiteralTypesAsTags03.ts, 14, 1), Decl(stringLiteralTypesAsTags03.ts, 20, 63), Decl(stringLiteralTypesAsTags03.ts, 21, 63))
>entity : Symbol(entity, Decl(stringLiteralTypesAsTags03.ts, 20, 17))
>Entity : Symbol(Entity, Decl(stringLiteralTypesAsTags03.ts, 0, 21))
>kind : Symbol(kind, Decl(stringLiteralTypesAsTags03.ts, 20, 32))
>entity : Symbol(entity, Decl(stringLiteralTypesAsTags03.ts, 20, 17))
>A : Symbol(A, Decl(stringLiteralTypesAsTags03.ts, 4, 1))

function hasKind(entity: Entity, kind: "B" | "B"): entity is B;
>hasKind : Symbol(hasKind, Decl(stringLiteralTypesAsTags03.ts, 14, 1), Decl(stringLiteralTypesAsTags03.ts, 20, 63), Decl(stringLiteralTypesAsTags03.ts, 21, 63))
>entity : Symbol(entity, Decl(stringLiteralTypesAsTags03.ts, 21, 17))
>Entity : Symbol(Entity, Decl(stringLiteralTypesAsTags03.ts, 0, 21))
>kind : Symbol(kind, Decl(stringLiteralTypesAsTags03.ts, 21, 32))
>entity : Symbol(entity, Decl(stringLiteralTypesAsTags03.ts, 21, 17))
>B : Symbol(B, Decl(stringLiteralTypesAsTags03.ts, 9, 1))

function hasKind(entity: Entity, kind: Kind): entity is Entity {
>hasKind : Symbol(hasKind, Decl(stringLiteralTypesAsTags03.ts, 14, 1), Decl(stringLiteralTypesAsTags03.ts, 20, 63), Decl(stringLiteralTypesAsTags03.ts, 21, 63))
>entity : Symbol(entity, Decl(stringLiteralTypesAsTags03.ts, 22, 17))
>Entity : Symbol(Entity, Decl(stringLiteralTypesAsTags03.ts, 0, 21))
>kind : Symbol(kind, Decl(stringLiteralTypesAsTags03.ts, 22, 32))
>Kind : Symbol(Kind, Decl(stringLiteralTypesAsTags03.ts, 0, 0))
>entity : Symbol(entity, Decl(stringLiteralTypesAsTags03.ts, 22, 17))
>Entity : Symbol(Entity, Decl(stringLiteralTypesAsTags03.ts, 0, 21))

    return entity.kind === kind;
>entity.kind : Symbol(Entity.kind, Decl(stringLiteralTypesAsTags03.ts, 2, 18))
>entity : Symbol(entity, Decl(stringLiteralTypesAsTags03.ts, 22, 17))
>kind : Symbol(Entity.kind, Decl(stringLiteralTypesAsTags03.ts, 2, 18))
>kind : Symbol(kind, Decl(stringLiteralTypesAsTags03.ts, 22, 32))
}

let x: A = {
>x : Symbol(x, Decl(stringLiteralTypesAsTags03.ts, 26, 3))
>A : Symbol(A, Decl(stringLiteralTypesAsTags03.ts, 4, 1))

    kind: "A",
>kind : Symbol(kind, Decl(stringLiteralTypesAsTags03.ts, 26, 12))

    a: 100,
>a : Symbol(a, Decl(stringLiteralTypesAsTags03.ts, 27, 14))
}

if (hasKind(x, "A")) {
>hasKind : Symbol(hasKind, Decl(stringLiteralTypesAsTags03.ts, 14, 1), Decl(stringLiteralTypesAsTags03.ts, 20, 63), Decl(stringLiteralTypesAsTags03.ts, 21, 63))
>x : Symbol(x, Decl(stringLiteralTypesAsTags03.ts, 26, 3))

    let a = x;
>a : Symbol(a, Decl(stringLiteralTypesAsTags03.ts, 32, 7))
>x : Symbol(x, Decl(stringLiteralTypesAsTags03.ts, 26, 3))
}
else {
    let b = x;
>b : Symbol(b, Decl(stringLiteralTypesAsTags03.ts, 35, 7))
>x : Symbol(x, Decl(stringLiteralTypesAsTags03.ts, 26, 3))
}

if (!hasKind(x, "B")) {
>hasKind : Symbol(hasKind, Decl(stringLiteralTypesAsTags03.ts, 14, 1), Decl(stringLiteralTypesAsTags03.ts, 20, 63), Decl(stringLiteralTypesAsTags03.ts, 21, 63))
>x : Symbol(x, Decl(stringLiteralTypesAsTags03.ts, 26, 3))

    let c = x;
>c : Symbol(c, Decl(stringLiteralTypesAsTags03.ts, 39, 7))
>x : Symbol(x, Decl(stringLiteralTypesAsTags03.ts, 26, 3))
}
else {
    let d = x;
>d : Symbol(d, Decl(stringLiteralTypesAsTags03.ts, 42, 7))
>x : Symbol(x, Decl(stringLiteralTypesAsTags03.ts, 26, 3))
}
