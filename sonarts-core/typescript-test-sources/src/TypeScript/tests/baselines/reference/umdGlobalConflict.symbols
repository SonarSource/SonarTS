=== tests/cases/compiler/v1/index.d.ts ===
export as namespace Alpha;
>Alpha : Symbol(Alpha, Decl(index.d.ts, 0, 0))

export var x: string;
>x : Symbol(x, Decl(index.d.ts, 1, 10))

=== tests/cases/compiler/v2/index.d.ts ===
export as namespace Alpha;
>Alpha : Symbol(Alpha, Decl(index.d.ts, 0, 0))

export var y: number;
>y : Symbol(y, Decl(index.d.ts, 1, 10))

=== tests/cases/compiler/consumer.ts ===
import * as v1 from './v1';
>v1 : Symbol(v1, Decl(consumer.ts, 0, 6))

import * as v2 from './v2';
>v2 : Symbol(v2, Decl(consumer.ts, 1, 6))

=== tests/cases/compiler/global.ts ===
// Should be OK, first in wins
const p: string = Alpha.x;
>p : Symbol(p, Decl(global.ts, 1, 5))
>Alpha.x : Symbol(Alpha.x, Decl(index.d.ts, 1, 10))
>Alpha : Symbol(Alpha, Decl(index.d.ts, 0, 0))
>x : Symbol(Alpha.x, Decl(index.d.ts, 1, 10))

