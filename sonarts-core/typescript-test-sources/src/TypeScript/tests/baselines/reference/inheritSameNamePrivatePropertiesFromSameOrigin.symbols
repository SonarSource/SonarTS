=== tests/cases/compiler/inheritSameNamePrivatePropertiesFromSameOrigin.ts ===
class B {
>B : Symbol(B, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 0, 0))

    private x: number;
>x : Symbol(B.x, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 0, 9))
}
class C extends B { }
>C : Symbol(C, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 2, 1))
>B : Symbol(B, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 0, 0))

class C2 extends B { }
>C2 : Symbol(C2, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 3, 21))
>B : Symbol(B, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 0, 0))

interface A extends C, C2 { // ok
>A : Symbol(A, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 5, 22))
>C : Symbol(C, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 2, 1))
>C2 : Symbol(C2, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 3, 21))

    y: string;
>y : Symbol(A.y, Decl(inheritSameNamePrivatePropertiesFromSameOrigin.ts, 7, 27))
}
