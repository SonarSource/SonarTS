=== tests/cases/compiler/cyclicTypeInstantiation.ts ===
function foo<T>() {
>foo : Symbol(foo, Decl(cyclicTypeInstantiation.ts, 0, 0))
>T : Symbol(T, Decl(cyclicTypeInstantiation.ts, 0, 13))

    var x: {
>x : Symbol(x, Decl(cyclicTypeInstantiation.ts, 1, 7))

        a: T;
>a : Symbol(a, Decl(cyclicTypeInstantiation.ts, 1, 12))
>T : Symbol(T, Decl(cyclicTypeInstantiation.ts, 0, 13))

        b: typeof x;
>b : Symbol(b, Decl(cyclicTypeInstantiation.ts, 2, 13))
>x : Symbol(x, Decl(cyclicTypeInstantiation.ts, 1, 7))

    };
    return x;
>x : Symbol(x, Decl(cyclicTypeInstantiation.ts, 1, 7))
}

function bar<T>() {
>bar : Symbol(bar, Decl(cyclicTypeInstantiation.ts, 6, 1))
>T : Symbol(T, Decl(cyclicTypeInstantiation.ts, 8, 13))

    var x: {
>x : Symbol(x, Decl(cyclicTypeInstantiation.ts, 9, 7))

        a: T;
>a : Symbol(a, Decl(cyclicTypeInstantiation.ts, 9, 12))
>T : Symbol(T, Decl(cyclicTypeInstantiation.ts, 8, 13))

        b: typeof x;
>b : Symbol(b, Decl(cyclicTypeInstantiation.ts, 10, 13))
>x : Symbol(x, Decl(cyclicTypeInstantiation.ts, 9, 7))

    };
    return x;
>x : Symbol(x, Decl(cyclicTypeInstantiation.ts, 9, 7))
}

var a = foo<string>();
>a : Symbol(a, Decl(cyclicTypeInstantiation.ts, 16, 3))
>foo : Symbol(foo, Decl(cyclicTypeInstantiation.ts, 0, 0))

var b = bar<string>();
>b : Symbol(b, Decl(cyclicTypeInstantiation.ts, 17, 3))
>bar : Symbol(bar, Decl(cyclicTypeInstantiation.ts, 6, 1))

// Relating types of a and b produces instantiations of the cyclic anonymous types in foo and bar
a = b;
>a : Symbol(a, Decl(cyclicTypeInstantiation.ts, 16, 3))
>b : Symbol(b, Decl(cyclicTypeInstantiation.ts, 17, 3))

