tests/cases/conformance/types/typeRelationships/apparentType/apparentTypeSubtyping.ts(9,7): error TS2415: Class 'Derived<U>' incorrectly extends base class 'Base<string>'.
  Types of property 'x' are incompatible.
    Type 'String' is not assignable to type 'string'.
      'string' is a primitive, but 'String' is a wrapper object. Prefer using 'string' when possible.


==== tests/cases/conformance/types/typeRelationships/apparentType/apparentTypeSubtyping.ts (1 errors) ====
    // subtype checks use the apparent type of the target type
    // S is a subtype of a type T, and T is a supertype of S, if one of the following is true, where S' denotes the apparent type (section 3.8.1) of S:
    
    class Base<U extends String> {
        x: U;
    }
    
    // is String (S) a subtype of U extends String (T)? Would only be true if we used the apparent type of U (T)
    class Derived<U> extends Base<string> { // error
          ~~~~~~~
!!! error TS2415: Class 'Derived<U>' incorrectly extends base class 'Base<string>'.
!!! error TS2415:   Types of property 'x' are incompatible.
!!! error TS2415:     Type 'String' is not assignable to type 'string'.
!!! error TS2415:       'string' is a primitive, but 'String' is a wrapper object. Prefer using 'string' when possible.
        x: String;
    }
    
    class Base2 {
        x: String;
        static s: String;
    }
    
    // is U extends String (S) a subtype of String (T)? Apparent type of U is String so it succeeds
    class Derived2<U extends String> extends Base2 { // error because of the prototype's not matching, not because of the instance side
        x: U;
    }