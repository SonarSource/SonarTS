=== tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterUsedAsConstraint.ts ===
class C<T, U extends T> { }
>C : C<T, U>
>T : T
>U : U
>T : T

class C2<T extends U, U> { }
>C2 : C2<T, U>
>T : T
>U : U
>U : U

class C3<T extends Date, U extends T> { }
>C3 : C3<T, U>
>T : T
>Date : Date
>U : U
>T : T

class C4<T extends U, U extends Date> { }
>C4 : C4<T, U>
>T : T
>U : U
>U : U
>Date : Date

class C5<T extends U, U extends V, V> { }
>C5 : C5<T, U, V>
>T : T
>U : U
>U : U
>V : V
>V : V

class C6<T, U extends T, V extends U> { }
>C6 : C6<T, U, V>
>T : T
>U : U
>T : T
>V : V
>U : U

interface I<T, U extends T> { }
>I : I<T, U>
>T : T
>U : U
>T : T

interface I2<T extends U, U> { }
>I2 : I2<T, U>
>T : T
>U : U
>U : U

interface I3<T extends Date, U extends T> { }
>I3 : I3<T, U>
>T : T
>Date : Date
>U : U
>T : T

interface I4<T extends U, U extends Date> { }
>I4 : I4<T, U>
>T : T
>U : U
>U : U
>Date : Date

interface I5<T extends U, U extends V, V> { }
>I5 : I5<T, U, V>
>T : T
>U : U
>U : U
>V : V
>V : V

interface I6<T, U extends T, V extends U> { }
>I6 : I6<T, U, V>
>T : T
>U : U
>T : T
>V : V
>U : U

function f<T, U extends T>() { }
>f : <T, U extends T>() => void
>T : T
>U : U
>T : T

function f2<T extends U, U>() { }
>f2 : <T extends U, U>() => void
>T : T
>U : U
>U : U

function f3<T extends Date, U extends T>() { }
>f3 : <T extends Date, U extends T>() => void
>T : T
>Date : Date
>U : U
>T : T

function f4<T extends U, U extends Date>() { }
>f4 : <T extends U, U extends Date>() => void
>T : T
>U : U
>U : U
>Date : Date

function f5<T extends U, U extends V, V>() { }
>f5 : <T extends U, U extends V, V>() => void
>T : T
>U : U
>U : U
>V : V
>V : V

function f6<T, U extends T, V extends U>() { }
>f6 : <T, U extends T, V extends U>() => void
>T : T
>U : U
>T : T
>V : V
>U : U

var e = <T, U extends T>() => { }
>e : <T, U extends T>() => void
><T, U extends T>() => { } : <T, U extends T>() => void
>T : T
>U : U
>T : T

var e2 = <T extends U, U>() => { }
>e2 : <T extends U, U>() => void
><T extends U, U>() => { } : <T extends U, U>() => void
>T : T
>U : U
>U : U

var e3 = <T extends Date, U extends T>() => { }
>e3 : <T extends Date, U extends T>() => void
><T extends Date, U extends T>() => { } : <T extends Date, U extends T>() => void
>T : T
>Date : Date
>U : U
>T : T

var e4 = <T extends U, U extends Date>() => { }
>e4 : <T extends U, U extends Date>() => void
><T extends U, U extends Date>() => { } : <T extends U, U extends Date>() => void
>T : T
>U : U
>U : U
>Date : Date

var e5 = <T extends U, U extends V, V>() => { }
>e5 : <T extends U, U extends V, V>() => void
><T extends U, U extends V, V>() => { } : <T extends U, U extends V, V>() => void
>T : T
>U : U
>U : U
>V : V
>V : V

var e6 = <T, U extends T, V extends U>() => { }
>e6 : <T, U extends T, V extends U>() => void
><T, U extends T, V extends U>() => { } : <T, U extends T, V extends U>() => void
>T : T
>U : U
>T : T
>V : V
>U : U

var a: { <T, U extends T>(): void }
>a : <T, U extends T>() => void
>T : T
>U : U
>T : T

var a2: { <T extends U, U>(): void }
>a2 : <T extends U, U>() => void
>T : T
>U : U
>U : U

var a3: { <T extends Date, U extends T>(): void }
>a3 : <T extends Date, U extends T>() => void
>T : T
>Date : Date
>U : U
>T : T

var a4: { <T extends U, U extends Date>(): void }
>a4 : <T extends U, U extends Date>() => void
>T : T
>U : U
>U : U
>Date : Date

var a5: { <T extends U, U extends V, V>(): void }
>a5 : <T extends U, U extends V, V>() => void
>T : T
>U : U
>U : U
>V : V
>V : V

var a6: { <T, U extends T, V extends U>(): void }
>a6 : <T, U extends T, V extends U>() => void
>T : T
>U : U
>T : T
>V : V
>U : U

