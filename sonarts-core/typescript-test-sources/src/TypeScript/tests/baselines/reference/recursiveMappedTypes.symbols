=== tests/cases/conformance/types/mapped/recursiveMappedTypes.ts ===

// Recursive mapped types simply appear empty

type Recurse = {
>Recurse : Symbol(Recurse, Decl(recursiveMappedTypes.ts, 0, 0))

    [K in keyof Recurse]: Recurse[K]
>K : Symbol(K, Decl(recursiveMappedTypes.ts, 4, 5))
>Recurse : Symbol(Recurse, Decl(recursiveMappedTypes.ts, 0, 0))
>Recurse : Symbol(Recurse, Decl(recursiveMappedTypes.ts, 0, 0))
>K : Symbol(K, Decl(recursiveMappedTypes.ts, 4, 5))
}

type Recurse1 = {
>Recurse1 : Symbol(Recurse1, Decl(recursiveMappedTypes.ts, 5, 1))

    [K in keyof Recurse2]: Recurse2[K]
>K : Symbol(K, Decl(recursiveMappedTypes.ts, 8, 5))
>Recurse2 : Symbol(Recurse2, Decl(recursiveMappedTypes.ts, 9, 1))
>Recurse2 : Symbol(Recurse2, Decl(recursiveMappedTypes.ts, 9, 1))
>K : Symbol(K, Decl(recursiveMappedTypes.ts, 8, 5))
}

type Recurse2 = {
>Recurse2 : Symbol(Recurse2, Decl(recursiveMappedTypes.ts, 9, 1))

    [K in keyof Recurse1]: Recurse1[K]
>K : Symbol(K, Decl(recursiveMappedTypes.ts, 12, 5))
>Recurse1 : Symbol(Recurse1, Decl(recursiveMappedTypes.ts, 5, 1))
>Recurse1 : Symbol(Recurse1, Decl(recursiveMappedTypes.ts, 5, 1))
>K : Symbol(K, Decl(recursiveMappedTypes.ts, 12, 5))
}
