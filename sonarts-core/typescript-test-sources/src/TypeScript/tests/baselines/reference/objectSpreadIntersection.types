=== tests/cases/conformance/types/spread/objectSpreadIntersection.ts ===
function iteratedUnionIntersection<T, U, V>(t: T, u: U, v: V): void {
>iteratedUnionIntersection : <T, U, V>(t: T, u: U, v: V) => void
>T : T
>U : U
>V : V
>t : T
>T : T
>u : U
>U : U
>v : V
>V : V

    let tu: T | U;
>tu : T | U
>T : T
>U : U

    let uv: U & V;
>uv : U & V
>U : U
>V : V

    let result = { ...tu, ...uv, id: 'foo' };
>result : { ...T; ...U & V; id: string; } | { ...U; ...U & V; id: string; }
>{ ...tu, ...uv, id: 'foo' } : { ...T; ...U & V; id: string; } | { ...U; ...U & V; id: string; }
>tu : any
>uv : any
>id : string
>'foo' : "foo"

    let assignable: { ...(T | U), ...(U & V), id: string } = result;
>assignable : { ...T; ...U & V; id: string; } | { ...U; ...U & V; id: string; }
>T : T
>U : U
>U : U
>V : V
>id : string
>result : { ...T; ...U & V; id: string; } | { ...U; ...U & V; id: string; }
}
// concrete types work
interface A1 { a: number }
>A1 : A1
>a : number

interface A2 { a: string }
>A2 : A2
>a : string

interface B1 { b: number }
>B1 : B1
>b : number

interface B2 { b: string }
>B2 : B2
>b : string

let a12: A1 & A2;
>a12 : A1 & A2
>A1 : A1
>A2 : A2

let b12: B1 & B2;
>b12 : B1 & B2
>B1 : B1
>B2 : B2

let result = { ...a12, ...b12 };
>result : { b: number & string; a: number & string; }
>{ ...a12, ...b12 } : { b: number & string; a: number & string; }
>a12 : any
>b12 : any

let sn: number & string = result.a;
>sn : number & string
>result.a : number & string
>result : { b: number & string; a: number & string; }
>a : number & string

sn = result.b;
>sn = result.b : number & string
>sn : number & string
>result.b : number & string
>result : { b: number & string; a: number & string; }
>b : number & string

let assignable: { ...(A1 & A2), ...(B1 & B2) } = result;
>assignable : { b: number & string; a: number & string; }
>A1 : A1
>A2 : A2
>B1 : B1
>B2 : B2
>result : { b: number & string; a: number & string; }

function tripleIntersection<T, U, V>(t: T, u: U, v: V): void {
>tripleIntersection : <T, U, V>(t: T, u: U, v: V) => void
>T : T
>U : U
>V : V
>t : T
>T : T
>u : U
>U : U
>v : V
>V : V

    let tuv: T & U & V;
>tuv : T & U & V
>T : T
>U : U
>V : V

    let result = { ...tuv, id: 'bar' };
>result : { ...T & U & V; id: string; }
>{ ...tuv, id: 'bar' } : { ...T & U & V; id: string; }
>tuv : any
>id : string
>'bar' : "bar"

    let assignable: { ...(T & U & V), id: string } = result;
>assignable : { ...T & U & V; id: string; }
>T : T
>U : U
>V : V
>id : string
>result : { ...T & U & V; id: string; }
}
function iteratedDoubleIntersection<T, U, V>(t: T, u: U, v: V): void {
>iteratedDoubleIntersection : <T, U, V>(t: T, u: U, v: V) => void
>T : T
>U : U
>V : V
>t : T
>T : T
>u : U
>U : U
>v : V
>V : V

    let tu: T & U;
>tu : T & U
>T : T
>U : U

    let uv: U & V;
>uv : U & V
>U : U
>V : V

    let result = { ...tu, ...uv, id: 'baz' };
>result : { ...T & U; ...U & V; id: string; }
>{ ...tu, ...uv, id: 'baz' } : { ...T & U; ...U & V; id: string; }
>tu : any
>uv : any
>id : string
>'baz' : "baz"

    let assignable: { ...(T & U), ...(U & V), id: string } = result;
>assignable : { ...T & U; ...U & V; id: string; }
>T : T
>U : U
>U : U
>V : V
>id : string
>result : { ...T & U; ...U & V; id: string; }
}
function iteratedIntersectionUnion<T, U, V>(t: T, u: U, v: V): void {
>iteratedIntersectionUnion : <T, U, V>(t: T, u: U, v: V) => void
>T : T
>U : U
>V : V
>t : T
>T : T
>u : U
>U : U
>v : V
>V : V

    let tu: T & U;
>tu : T & U
>T : T
>U : U

    let uv: U | V;
>uv : U | V
>U : U
>V : V

    let result = { ...tu, ...uv, id: 'qux' };
>result : { ...T & U; ...U; id: string; } | { ...T & U; ...V; id: string; }
>{ ...tu, ...uv, id: 'qux' } : { ...T & U; ...U; id: string; } | { ...T & U; ...V; id: string; }
>tu : any
>uv : any
>id : string
>'qux' : "qux"

    let assignable: { ...(T & U), ...(U | V), id: string } = result;
>assignable : { ...T & U; ...U; id: string; } | { ...T & U; ...V; id: string; }
>T : T
>U : U
>U : U
>V : V
>id : string
>result : { ...T & U; ...U; id: string; } | { ...T & U; ...V; id: string; }
}


