=== tests/cases/compiler/controlFlowInstanceof.ts ===
// Repros from #10167

function f1(s: Set<string> | Set<number>) {
>f1 : (s: Set<string> | Set<number>) => void
>s : Set<string> | Set<number>
>Set : Set<T>
>Set : Set<T>

    s = new Set<number>();
>s = new Set<number>() : Set<number>
>s : Set<string> | Set<number>
>new Set<number>() : Set<number>
>Set : SetConstructor

    s;  // Set<number>
>s : Set<number>

    if (s instanceof Set) {
>s instanceof Set : boolean
>s : Set<number>
>Set : SetConstructor

        s;  // Set<number>
>s : Set<number>
    }
    s;  // Set<number>
>s : Set<number>

    s.add(42);
>s.add(42) : Set<number>
>s.add : (value: number) => Set<number>
>s : Set<number>
>add : (value: number) => Set<number>
>42 : 42
}

function f2(s: Set<string> | Set<number>) {
>f2 : (s: Set<string> | Set<number>) => void
>s : Set<string> | Set<number>
>Set : Set<T>
>Set : Set<T>

    s = new Set<number>();
>s = new Set<number>() : Set<number>
>s : Set<string> | Set<number>
>new Set<number>() : Set<number>
>Set : SetConstructor

    s;  // Set<number>
>s : Set<number>

    if (s instanceof Promise) {
>s instanceof Promise : boolean
>s : Set<number>
>Promise : PromiseConstructor

        s;  // Set<number> & Promise<any>
>s : Set<number> & Promise<any>
    }
    s;  // Set<number>
>s : Set<number>

    s.add(42);
>s.add(42) : Set<number>
>s.add : (value: number) => Set<number>
>s : Set<number>
>add : (value: number) => Set<number>
>42 : 42
}

function f3(s: Set<string> | Set<number>) {
>f3 : (s: Set<string> | Set<number>) => void
>s : Set<string> | Set<number>
>Set : Set<T>
>Set : Set<T>

    s;  // Set<string> | Set<number>
>s : Set<string> | Set<number>

    if (s instanceof Set) {
>s instanceof Set : boolean
>s : Set<string> | Set<number>
>Set : SetConstructor

        s;  // Set<string> | Set<number>
>s : Set<string> | Set<number>
    }
    else {
        s;  // never
>s : never
    }
}

function f4(s: Set<string> | Set<number>) {
>f4 : (s: Set<string> | Set<number>) => void
>s : Set<string> | Set<number>
>Set : Set<T>
>Set : Set<T>

    s = new Set<number>();
>s = new Set<number>() : Set<number>
>s : Set<string> | Set<number>
>new Set<number>() : Set<number>
>Set : SetConstructor

    s;  // Set<number>
>s : Set<number>

    if (s instanceof Set) {
>s instanceof Set : boolean
>s : Set<number>
>Set : SetConstructor

        s;  // Set<number>
>s : Set<number>
    }
    else {
        s;  // never
>s : never
    }
}

// More tests

class A { a: string }
>A : A
>a : string

class B extends A { b: string }
>B : B
>A : A
>b : string

class C extends A { c: string }
>C : C
>A : A
>c : string

function foo(x: A | undefined) {
>foo : (x: A) => void
>x : A
>A : A

    x;  // A | undefined
>x : A

    if (x instanceof B || x instanceof C) {
>x instanceof B || x instanceof C : boolean
>x instanceof B : boolean
>x : A
>B : typeof B
>x instanceof C : boolean
>x : A
>C : typeof C

        x;  // B | C
>x : B | C
    }
    x;  // A | undefined
>x : A

    if (x instanceof B && x instanceof C) {
>x instanceof B && x instanceof C : boolean
>x instanceof B : boolean
>x : A
>B : typeof B
>x instanceof C : boolean
>x : B
>C : typeof C

        x;  // B & C
>x : B & C
    }
    x;  // A | undefined
>x : A

    if (!x) {
>!x : boolean
>x : A

        return;
    }
    x;  // A
>x : A

    if (x instanceof B) {
>x instanceof B : boolean
>x : A
>B : typeof B

        x;  // B
>x : B

        if (x instanceof C) {
>x instanceof C : boolean
>x : B
>C : typeof C

            x;  // B & C
>x : B & C
        }
        else {
            x;  // B
>x : B
        }
        x;  // B
>x : B
    }
    else {
        x;  // A
>x : A
    }
    x;  // A
>x : A
}

// X is neither assignable to Y nor a subtype of Y
// Y is assignable to X, but not a subtype of X

interface X {
>X : X

    x?: string;
>x : string
}

class Y {
>Y : Y

    y: string;
>y : string
}

function goo(x: X) {
>goo : (x: X) => void
>x : X
>X : X

    x;
>x : X

    if (x instanceof Y) {
>x instanceof Y : boolean
>x : X
>Y : typeof Y

        x.y;
>x.y : string
>x : Y
>y : string
    }
    x;
>x : X
}
