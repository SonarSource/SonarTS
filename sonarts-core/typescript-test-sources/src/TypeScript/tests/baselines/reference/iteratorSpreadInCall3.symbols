=== tests/cases/conformance/es6/spread/iteratorSpreadInCall3.ts ===
function foo(...s: symbol[]) { }
>foo : Symbol(foo, Decl(iteratorSpreadInCall3.ts, 0, 0))
>s : Symbol(s, Decl(iteratorSpreadInCall3.ts, 0, 13))

class SymbolIterator {
>SymbolIterator : Symbol(SymbolIterator, Decl(iteratorSpreadInCall3.ts, 0, 32))

    next() {
>next : Symbol(SymbolIterator.next, Decl(iteratorSpreadInCall3.ts, 1, 22))

        return {
            value: Symbol(),
>value : Symbol(value, Decl(iteratorSpreadInCall3.ts, 3, 16))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))

            done: false
>done : Symbol(done, Decl(iteratorSpreadInCall3.ts, 4, 28))

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))

        return this;
>this : Symbol(SymbolIterator, Decl(iteratorSpreadInCall3.ts, 0, 32))
    }
}

foo(...new SymbolIterator);
>foo : Symbol(foo, Decl(iteratorSpreadInCall3.ts, 0, 0))
>SymbolIterator : Symbol(SymbolIterator, Decl(iteratorSpreadInCall3.ts, 0, 32))

