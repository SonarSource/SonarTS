=== tests/cases/conformance/expressions/typeGuards/typeGuardOfFormFunctionEquality.ts ===
declare function isString1(a: number, b: Object): b is string;
>isString1 : Symbol(isString1, Decl(typeGuardOfFormFunctionEquality.ts, 0, 0))
>a : Symbol(a, Decl(typeGuardOfFormFunctionEquality.ts, 0, 27))
>b : Symbol(b, Decl(typeGuardOfFormFunctionEquality.ts, 0, 37))
>Object : Symbol(Object, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>b : Symbol(b, Decl(typeGuardOfFormFunctionEquality.ts, 0, 37))

declare function isString2(a: Object): a is string;
>isString2 : Symbol(isString2, Decl(typeGuardOfFormFunctionEquality.ts, 0, 62))
>a : Symbol(a, Decl(typeGuardOfFormFunctionEquality.ts, 2, 27))
>Object : Symbol(Object, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>a : Symbol(a, Decl(typeGuardOfFormFunctionEquality.ts, 2, 27))

switch (isString1(0, "")) {
>isString1 : Symbol(isString1, Decl(typeGuardOfFormFunctionEquality.ts, 0, 0))

    case isString2(""):
>isString2 : Symbol(isString2, Decl(typeGuardOfFormFunctionEquality.ts, 0, 62))

    default:
}

var x = isString1(0, "") === isString2("");
>x : Symbol(x, Decl(typeGuardOfFormFunctionEquality.ts, 9, 3))
>isString1 : Symbol(isString1, Decl(typeGuardOfFormFunctionEquality.ts, 0, 0))
>isString2 : Symbol(isString2, Decl(typeGuardOfFormFunctionEquality.ts, 0, 62))

function isString3(a: number, b: number, c: Object): c is string {
>isString3 : Symbol(isString3, Decl(typeGuardOfFormFunctionEquality.ts, 9, 43))
>a : Symbol(a, Decl(typeGuardOfFormFunctionEquality.ts, 11, 19))
>b : Symbol(b, Decl(typeGuardOfFormFunctionEquality.ts, 11, 29))
>c : Symbol(c, Decl(typeGuardOfFormFunctionEquality.ts, 11, 40))
>Object : Symbol(Object, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>c : Symbol(c, Decl(typeGuardOfFormFunctionEquality.ts, 11, 40))

    return isString1(0, c);
>isString1 : Symbol(isString1, Decl(typeGuardOfFormFunctionEquality.ts, 0, 0))
>c : Symbol(c, Decl(typeGuardOfFormFunctionEquality.ts, 11, 40))
}

