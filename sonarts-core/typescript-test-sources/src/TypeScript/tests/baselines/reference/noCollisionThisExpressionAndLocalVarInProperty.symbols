=== tests/cases/compiler/noCollisionThisExpressionAndLocalVarInProperty.ts ===
class class1 {
>class1 : Symbol(class1, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 0, 0))

    public prop1 = {
>prop1 : Symbol(class1.prop1, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 0, 14))

        doStuff: (callback) => () => {
>doStuff : Symbol(doStuff, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 1, 20))
>callback : Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 2, 18))

            var _this = 2;
>_this : Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 3, 15))

            return callback(_this);
>callback : Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 2, 18))
>_this : Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 3, 15))
        }
    }
}

class class2 {
>class2 : Symbol(class2, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 7, 1))

    constructor() {
        var _this = 2;
>_this : Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 11, 11))
    }
    public prop1 = {
>prop1 : Symbol(class2.prop1, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 12, 5))

        doStuff: (callback) => () => {
>doStuff : Symbol(doStuff, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 13, 20))
>callback : Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 14, 18))

            return callback(10);
>callback : Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 14, 18))
        }
    }
}
