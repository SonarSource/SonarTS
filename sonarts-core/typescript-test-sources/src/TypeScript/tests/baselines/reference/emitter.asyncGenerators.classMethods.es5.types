=== tests/cases/conformance/emitter/es5/asyncGenerators/C1.ts ===
class C1 {
>C1 : C1

    async * f() {
>f : () => AsyncIterableIterator<any>
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/C2.ts ===
class C2 {
>C2 : C2

    async * f() {
>f : () => AsyncIterableIterator<any>

        const x = yield;
>x : any
>yield : any
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/C3.ts ===
class C3 {
>C3 : C3

    async * f() {
>f : () => AsyncIterableIterator<1>

        const x = yield 1;
>x : any
>yield 1 : any
>1 : 1
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/C4.ts ===
class C4 {
>C4 : C4

    async * f() {
>f : () => AsyncIterableIterator<number>

        const x = yield* [1];
>x : any
>yield* [1] : any
>[1] : number[]
>1 : 1
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/C5.ts ===
class C5 {
>C5 : C5

    async * f() {
>f : () => AsyncIterableIterator<1>

        const x = yield* (async function*() { yield 1; })();
>x : any
>yield* (async function*() { yield 1; })() : any
>(async function*() { yield 1; })() : AsyncIterableIterator<1>
>(async function*() { yield 1; }) : () => AsyncIterableIterator<1>
>async function*() { yield 1; } : () => AsyncIterableIterator<1>
>yield 1 : any
>1 : 1
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/C6.ts ===
class C6 {
>C6 : C6

    async * f() {
>f : () => AsyncIterableIterator<any>

        const x = await 1;
>x : 1
>await 1 : 1
>1 : 1
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/C7.ts ===
class C7 {
>C7 : C7

    async * f() {
>f : () => AsyncIterableIterator<1>

        return 1;
>1 : 1
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/C8.ts ===
class C8 {
>C8 : C8

    g() {
>g : () => void
    }
    async * f() {
>f : () => AsyncIterableIterator<any>

        this.g();
>this.g() : void
>this.g : () => void
>this : this
>g : () => void
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/C9.ts ===
class B9 {
>B9 : B9

    g() {}
>g : () => void
}
class C9 extends B9 {
>C9 : C9
>B9 : B9

    async * f() {
>f : () => AsyncIterableIterator<any>

        super.g();
>super.g() : void
>super.g : () => void
>super : B9
>g : () => void
    }
}

