=== tests/cases/compiler/inferentialTypingWithFunctionTypeNested.ts ===
declare function map<T, U>(x: T, f: () => { x: (s: T) => U }): U;
>map : <T, U>(x: T, f: () => { x: (s: T) => U; }) => U
>T : T
>U : U
>x : T
>T : T
>f : () => { x: (s: T) => U; }
>x : (s: T) => U
>s : T
>T : T
>U : U
>U : U

declare function identity<V>(y: V): V;
>identity : <V>(y: V) => V
>V : V
>y : V
>V : V
>V : V

var s = map("", () => { return { x: identity }; });
>s : string
>map("", () => { return { x: identity }; }) : string
>map : <T, U>(x: T, f: () => { x: (s: T) => U; }) => U
>"" : ""
>() => { return { x: identity }; } : () => { x: (y: string) => string; }
>{ x: identity } : { x: <V>(y: V) => V; }
>x : <V>(y: V) => V
>identity : <V>(y: V) => V

