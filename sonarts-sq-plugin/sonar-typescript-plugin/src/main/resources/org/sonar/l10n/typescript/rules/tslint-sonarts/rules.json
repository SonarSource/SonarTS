[
  {
    "key": "cognitive-complexity",
    "name": "Cognitive Complexity of functions should not be too high",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/cognitive-complexity.md"
  },
  {
    "key": "consecutive-overloads",
    "name": "Method overloads should be grouped together",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/consecutive-overloads.md"
  },
  {
    "key": "max-union-size",
    "name": "Union types should not have too many elements",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/max-union-size.md"
  },
  {
    "key": "mccabe-complexity",
    "name": "Functions should not be too complex",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/mccabe-complexity.md"
  },
  {
    "key": "no-accessor-field-mismatch",
    "name": "Getters and setters should access the expected fields",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-accessor-field-mismatch.md"
  },
  {
    "key": "no-all-duplicated-branches",
    "name": "All branches in a conditional structure should not have exactly the same implementation",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-all-duplicated-branches.md"
  },
  {
    "key": "no-array-delete",
    "name": "\"delete\" should not be used on arrays",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-array-delete.md"
  },
  {
    "key": "no-big-function",
    "name": "Functions should not have too many lines of code",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-big-function.md"
  },
  {
    "key": "no-case-with-or",
    "name": "Logical OR should not be used in switch cases",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-case-with-or.md"
  },
  {
    "key": "no-collapsible-if",
    "name": "Collapsible \"if\" statements should be merged",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-collapsible-if.md"
  },
  {
    "key": "no-collection-size-mischeck",
    "name": "Collection sizes and array length comparisons should make sense",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-collection-size-mischeck.md"
  },
  {
    "key": "no-commented-code",
    "name": "Sections of code should not be \"commented out\"",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-commented-code.md"
  },
  {
    "key": "no-dead-store",
    "name": "Dead stores should be removed",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-dead-store.md"
  },
  {
    "key": "no-duplicate-in-composite",
    "name": "Union and intersection types should not be defined with duplicated elements",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-duplicate-in-composite.md"
  },
  {
    "key": "no-duplicate-string",
    "name": "String literals should not be duplicated",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-duplicate-string.md"
  },
  {
    "key": "no-duplicated-branches",
    "name": "Two branches in a conditional structure should not have exactly the same implementation",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-duplicated-branches.md"
  },
  {
    "key": "no-element-overwrite",
    "name": "Collection elements should not be replaced unconditionally",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-element-overwrite.md"
  },
  {
    "key": "no-empty-destructuring",
    "name": "Destructuring patterns should not be empty",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-empty-destructuring.md"
  },
  {
    "key": "no-empty-nested-blocks",
    "name": "Nested blocks of code should not be left empty",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-empty-nested-blocks.md"
  },
  {
    "key": "no-extra-semicolon",
    "name": "Extra semicolons should be removed",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-extra-semicolon.md"
  },
  {
    "key": "no-gratuitous-expressions",
    "name": "Conditions should not always evaluate to \"true\" or to \"false\"",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-gratuitous-expressions.md"
  },
  {
    "key": "no-hardcoded-credentials",
    "name": "Credentials should not be hard-coded",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-hardcoded-credentials.md"
  },
  {
    "key": "no-identical-conditions",
    "name": "Related \"if/else if\" statements and \"cases\" in a \"switch\" should not have the same condition",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-identical-conditions.md"
  },
  {
    "key": "no-identical-expressions",
    "name": "Identical expressions should not be used on both sides of a binary operator",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-identical-expressions.md"
  },
  {
    "key": "no-identical-functions",
    "name": "Functions should not have identical implementations",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-identical-functions.md"
  },
  {
    "key": "no-ignored-initial-value",
    "name": "Function parameters, caught exceptions and foreach variables\u0027 initial values should not be ignored",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-ignored-initial-value.md"
  },
  {
    "key": "no-ignored-return",
    "name": "Return values should not be ignored when function calls don\u0027t have any side effects",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-ignored-return.md"
  },
  {
    "key": "no-in-misuse",
    "name": "\"in\" operator should not be used on array",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-in-misuse.md"
  },
  {
    "key": "no-inconsistent-return",
    "name": "Functions should use \"return\" consistently",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-inconsistent-return.md"
  },
  {
    "key": "no-invalid-await",
    "name": "\"await\" should only be used with promises",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-invalid-await.md"
  },
  {
    "key": "no-inverted-boolean-check",
    "name": "Boolean checks should not be inverted",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-inverted-boolean-check.md"
  },
  {
    "key": "no-misleading-array-reverse",
    "name": "Array-mutating methods should not be used misleadingly",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-misleading-array-reverse.md"
  },
  {
    "key": "no-misspelled-operator",
    "name": "Non-existent operators \u0027\u003d+\u0027, \u0027\u003d-\u0027 and \u0027\u003d!\u0027 should not be used",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-misspelled-operator.md"
  },
  {
    "key": "no-multiline-string-literals",
    "name": "Multiline string literals should not be used",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-multiline-string-literals.md"
  },
  {
    "key": "no-nested-incdec",
    "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-nested-incdec.md"
  },
  {
    "key": "no-nested-template-literals",
    "name": "Template literals should not be nested",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-nested-template-literals.md"
  },
  {
    "key": "no-redundant-boolean",
    "name": "Boolean literals should not be redundant",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-redundant-boolean.md"
  },
  {
    "key": "no-redundant-jump",
    "name": "Jump statements should not be redundant",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-redundant-jump.md"
  },
  {
    "key": "no-redundant-parentheses",
    "name": "Redundant pairs of parentheses should be removed",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-redundant-parentheses.md"
  },
  {
    "key": "no-return-type-any",
    "name": "Primitive return types should be used",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-return-type-any.md"
  },
  {
    "key": "no-same-line-conditional",
    "name": "Conditionals should start on new lines",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-same-line-conditional.md"
  },
  {
    "key": "no-self-assignment",
    "name": "Variables should not be self-assigned",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-self-assignment.md"
  },
  {
    "key": "no-small-switch",
    "name": "\"switch\" statements should have at least 3 \"case\" clauses",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-small-switch.md"
  },
  {
    "key": "no-statements-same-line",
    "name": "Statements should be on separate lines",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-statements-same-line.md"
  },
  {
    "key": "no-unconditional-jump",
    "name": "Loops with at most one iteration should be refactored",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-unconditional-jump.md"
  },
  {
    "key": "no-undefined-argument",
    "name": "\"undefined\" should not be passed as the value of optional parameters",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-undefined-argument.md"
  },
  {
    "key": "no-unenclosed-multiline-block",
    "name": "Multiline blocks should be enclosed in curly braces",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-unenclosed-multiline-block.md"
  },
  {
    "key": "no-unthrown-error",
    "name": "Errors should not be created without being thrown",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-unthrown-error.md"
  },
  {
    "key": "no-unused-array",
    "name": "Array contents should be used",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-unused-array.md"
  },
  {
    "key": "no-use-of-empty-return-value",
    "name": "The output of functions that don\u0027t return anything should not be used",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-use-of-empty-return-value.md"
  },
  {
    "key": "no-useless-cast",
    "name": "Redundant casts and not-null assertions should be avoided",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-useless-cast.md"
  },
  {
    "key": "no-useless-increment",
    "name": "Values should not be uselessly incremented",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-useless-increment.md"
  },
  {
    "key": "no-useless-intersection",
    "name": "Types without members, \u0027any\u0027 and \u0027never\u0027 should not be used in type intersections",
    "type": "BUG",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-useless-intersection.md"
  },
  {
    "key": "no-variable-usage-before-declaration",
    "name": "Variables should be declared before they are used",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/no-variable-usage-before-declaration.md"
  },
  {
    "key": "parameters-max-number",
    "name": "Functions should not have too many parameters",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/parameters-max-number.md"
  },
  {
    "key": "prefer-default-last",
    "name": "\"default\" clauses should be last",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/prefer-default-last.md"
  },
  {
    "key": "prefer-immediate-return",
    "name": "Local variables should not be declared and then immediately returned or thrown",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/prefer-immediate-return.md"
  },
  {
    "key": "prefer-optional",
    "name": "Optional property declarations should use \u0027?\u0027 syntax",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/prefer-optional.md"
  },
  {
    "key": "prefer-promise-shorthand",
    "name": "Shorthand promises should be used",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/prefer-promise-shorthand.md"
  },
  {
    "key": "use-primitive-type",
    "name": "Wrapper objects should not be used for primitive types",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/use-primitive-type.md"
  },
  {
    "key": "use-type-alias",
    "name": "Type aliases should be used",
    "type": "CODE_SMELL",
    "url": "https://github.com/SonarSource/SonarTS/blob/master/sonarts-core/docs/rules/use-type-alias.md"
  }
]